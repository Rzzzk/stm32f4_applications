
006_Timers_basic_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002404  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002594  08002594  00012594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002640  08002640  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08002640  08002640  00012640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002648  08002648  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002648  08002648  00012648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800264c  0800264c  0001264c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000170  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   000035b2  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000e7c  00000000  00000000  0002368d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000440  00000000  00000000  00024510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000307  00000000  00000000  00024950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021caa  00000000  00000000  00024c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00005107  00000000  00000000  00046901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce1ad  00000000  00000000  0004ba08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000017b8  00000000  00000000  00119bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  0011b370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800257c 	.word	0x0800257c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800257c 	.word	0x0800257c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <SysTick_Handler>:
 */
#include "stm32f4xx_hal.h"


void SysTick_Handler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000570:	f000 fa28 	bl	80009c4 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000574:	f000 fb48 	bl	8000c08 <HAL_SYSTICK_IRQHandler>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}

0800057c <main>:
void PrintRCCData(void);



int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0


	/*
	 * 1. HAL Initializations
	 */
	HAL_Init();
 8000580:	f000 f9ce 	bl	8000920 <HAL_Init>


	/*
	 * 2. System Clock Configurations
	 */
	SystemClock_Config();
 8000584:	f000 f808 	bl	8000598 <SystemClock_Config>


	printf("Hello World!\n");
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <main+0x18>)
 800058a:	f001 f8f9 	bl	8001780 <puts>
	/*
	 * 3. Peripherals High Level Initializations
	 */


	PrintRCCData();
 800058e:	f000 f855 	bl	800063c <PrintRCCData>


	while(1)
 8000592:	e7fe      	b.n	8000592 <main+0x16>
 8000594:	08002594 	.word	0x08002594

08000598 <SystemClock_Config>:
	return 0;
}


void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b092      	sub	sp, #72	; 0x48
 800059c:	af00      	add	r7, sp, #0

	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clock_init;

	memset(&osc_init,0,sizeof(osc_init));
 800059e:	f107 0318 	add.w	r3, r7, #24
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 f9ea 	bl	8001980 <memset>
	memset(&clock_init,0,sizeof(clock_init));
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2214      	movs	r2, #20
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 f9e4 	bl	8001980 <memset>


	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61bb      	str	r3, [r7, #24]
	osc_init.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 80005c2:	f107 0318 	add.w	r3, r7, #24
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fb2c 	bl	8000c24 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x3e>
	{
		Error_Handler();
 80005d2:	f000 f82f 	bl	8000634 <Error_Handler>
	}


	clock_init.ClockType  = RCC_CLOCKTYPE_SYSCLK |\
 80005d6:	230f      	movs	r3, #15
 80005d8:	607b      	str	r3, [r7, #4]
			RCC_CLOCKTYPE_HCLK   |\
			RCC_CLOCKTYPE_PCLK1  |\
			RCC_CLOCKTYPE_PCLK2;


	clock_init.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 80005da:	2301      	movs	r3, #1
 80005dc:	60bb      	str	r3, [r7, #8]
	clock_init.AHBCLKDivider  = RCC_SYSCLK_DIV2;
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	60fb      	str	r3, [r7, #12]
	clock_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e6:	613b      	str	r3, [r7, #16]
	clock_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ec:	617b      	str	r3, [r7, #20]

	if ( HAL_RCC_ClockConfig(&clock_init, FLASH_ACR_LATENCY_0WS) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fd8e 	bl	8001114 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x6a>
	{
		Error_Handler();
 80005fe:	f000 f819 	bl	8000634 <Error_Handler>
	}

	__HAL_RCC_HSI_DISABLE();
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <SystemClock_Config+0x94>)
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000608:	f000 ff70 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 800060c:	4603      	mov	r3, r0
 800060e:	4a08      	ldr	r2, [pc, #32]	; (8000630 <SystemClock_Config+0x98>)
 8000610:	fba2 2303 	umull	r2, r3, r2, r3
 8000614:	099b      	lsrs	r3, r3, #6
 8000616:	4618      	mov	r0, r3
 8000618:	f000 facd 	bl	8000bb6 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800061c:	2004      	movs	r0, #4
 800061e:	f000 fad7 	bl	8000bd0 <HAL_SYSTICK_CLKSourceConfig>
}
 8000622:	bf00      	nop
 8000624:	3748      	adds	r7, #72	; 0x48
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	42470000 	.word	0x42470000
 8000630:	10624dd3 	.word	0x10624dd3

08000634 <Error_Handler>:
 * High level UART2 initialization
 */


void Error_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
	while(1);
 8000638:	e7fe      	b.n	8000638 <Error_Handler+0x4>
	...

0800063c <PrintRCCData>:
}


void PrintRCCData(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b09a      	sub	sp, #104	; 0x68
 8000640:	af00      	add	r7, sp, #0
	char clock[100];

	memset(clock,0,sizeof(clock));
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2264      	movs	r2, #100	; 0x64
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f001 f999 	bl	8001980 <memset>
	sprintf(clock ,"SYSCLK : %ld  \r\n", HAL_RCC_GetSysClockFreq());
 800064e:	f000 fe47 	bl	80012e0 <HAL_RCC_GetSysClockFreq>
 8000652:	4602      	mov	r2, r0
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	4919      	ldr	r1, [pc, #100]	; (80006bc <PrintRCCData+0x80>)
 8000658:	4618      	mov	r0, r3
 800065a:	f001 f899 	bl	8001790 <siprintf>


	memset(clock,0,sizeof(clock));
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2264      	movs	r2, #100	; 0x64
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f001 f98b 	bl	8001980 <memset>
	sprintf(clock ,"HCLK   : %ld  \r\n", HAL_RCC_GetHCLKFreq());
 800066a:	f000 ff3f 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 800066e:	4602      	mov	r2, r0
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	4913      	ldr	r1, [pc, #76]	; (80006c0 <PrintRCCData+0x84>)
 8000674:	4618      	mov	r0, r3
 8000676:	f001 f88b 	bl	8001790 <siprintf>


	memset(clock,0,sizeof(clock));
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2264      	movs	r2, #100	; 0x64
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f001 f97d 	bl	8001980 <memset>
	sprintf(clock ,"PCLK1  : %ld  \r\n", HAL_RCC_GetPCLK1Freq());
 8000686:	f000 ff3d 	bl	8001504 <HAL_RCC_GetPCLK1Freq>
 800068a:	4602      	mov	r2, r0
 800068c:	1d3b      	adds	r3, r7, #4
 800068e:	490d      	ldr	r1, [pc, #52]	; (80006c4 <PrintRCCData+0x88>)
 8000690:	4618      	mov	r0, r3
 8000692:	f001 f87d 	bl	8001790 <siprintf>


	memset(clock,0,sizeof(clock));
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2264      	movs	r2, #100	; 0x64
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f001 f96f 	bl	8001980 <memset>
	sprintf(clock ,"PCLK2  : %ld  \r\n", HAL_RCC_GetPCLK2Freq());
 80006a2:	f000 ff43 	bl	800152c <HAL_RCC_GetPCLK2Freq>
 80006a6:	4602      	mov	r2, r0
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4907      	ldr	r1, [pc, #28]	; (80006c8 <PrintRCCData+0x8c>)
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 f86f 	bl	8001790 <siprintf>

}
 80006b2:	bf00      	nop
 80006b4:	3768      	adds	r7, #104	; 0x68
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	080025a4 	.word	0x080025a4
 80006c0:	080025b8 	.word	0x080025b8
 80006c4:	080025cc 	.word	0x080025cc
 80006c8:	080025e0 	.word	0x080025e0

080006cc <HAL_MspInit>:
/*
 * LOW LEVEL PROCESSOR INITIALIZATION
 */

void HAL_MspInit(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	/*
	 * 1. configure the priority group of the processor
	 */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d0:	2003      	movs	r0, #3
 80006d2:	f000 fa49 	bl	8000b68 <HAL_NVIC_SetPriorityGrouping>

	/*
	 * 2. Enable the required system exceptions
	 */
	SCB->SHCSR |= 0x7 << 16; //enable memMan, usage fault and bus fault
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <HAL_MspInit+0x40>)
 80006d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006da:	4a0c      	ldr	r2, [pc, #48]	; (800070c <HAL_MspInit+0x40>)
 80006dc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80006e0:	6253      	str	r3, [r2, #36]	; 0x24


	/*
	 * 3. configure the priority of system exception
	 */
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2100      	movs	r1, #0
 80006e6:	f06f 000b 	mvn.w	r0, #11
 80006ea:	f000 fa48 	bl	8000b7e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2100      	movs	r1, #0
 80006f2:	f06f 000a 	mvn.w	r0, #10
 80006f6:	f000 fa42 	bl	8000b7e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	f06f 0009 	mvn.w	r0, #9
 8000702:	f000 fa3c 	bl	8000b7e <HAL_NVIC_SetPriority>
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <ITM_SendChar+0x48>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a0e      	ldr	r2, [pc, #56]	; (8000758 <ITM_SendChar+0x48>)
 8000720:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000724:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <ITM_SendChar+0x4c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a0c      	ldr	r2, [pc, #48]	; (800075c <ITM_SendChar+0x4c>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000732:	bf00      	nop
 8000734:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f8      	beq.n	8000734 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000742:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	6013      	str	r3, [r2, #0]
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000edfc 	.word	0xe000edfc
 800075c:	e0000e00 	.word	0xe0000e00

08000760 <_read>:
	_kill(status, -1);
	while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	e00a      	b.n	8000788 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000772:	f3af 8000 	nop.w
 8000776:	4601      	mov	r1, r0
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	1c5a      	adds	r2, r3, #1
 800077c:	60ba      	str	r2, [r7, #8]
 800077e:	b2ca      	uxtb	r2, r1
 8000780:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	3301      	adds	r3, #1
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697a      	ldr	r2, [r7, #20]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	429a      	cmp	r2, r3
 800078e:	dbf0      	blt.n	8000772 <_read+0x12>
	}

	return len;
 8000790:	687b      	ldr	r3, [r7, #4]
}
 8000792:	4618      	mov	r0, r3
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b086      	sub	sp, #24
 800079e:	af00      	add	r7, sp, #0
 80007a0:	60f8      	str	r0, [r7, #12]
 80007a2:	60b9      	str	r1, [r7, #8]
 80007a4:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	e009      	b.n	80007c0 <_write+0x26>
	{
		// __io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	1c5a      	adds	r2, r3, #1
 80007b0:	60ba      	str	r2, [r7, #8]
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ffab 	bl	8000710 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	3301      	adds	r3, #1
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	dbf1      	blt.n	80007ac <_write+0x12>
	}
	return len;
 80007c8:	687b      	ldr	r3, [r7, #4]
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <_close>:

int _close(int file)
{
 80007d2:	b480      	push	{r7}
 80007d4:	b083      	sub	sp, #12
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
	(void)file;
	return -1;
 80007da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007de:	4618      	mov	r0, r3
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b083      	sub	sp, #12
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
 80007f2:	6039      	str	r1, [r7, #0]
	(void)file;
	st->st_mode = S_IFCHR;
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007fa:	605a      	str	r2, [r3, #4]
	return 0;
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <_isatty>:

int _isatty(int file)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
	(void)file;
	return 1;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
	(void)file;
	(void)ptr;
	(void)dir;
	return 0;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000844:	4a14      	ldr	r2, [pc, #80]	; (8000898 <_sbrk+0x5c>)
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <_sbrk+0x60>)
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <_sbrk+0x64>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d102      	bne.n	800085e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <_sbrk+0x64>)
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <_sbrk+0x68>)
 800085c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <_sbrk+0x64>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	429a      	cmp	r2, r3
 800086a:	d207      	bcs.n	800087c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800086c:	f001 f8d6 	bl	8001a1c <__errno>
 8000870:	4603      	mov	r3, r0
 8000872:	220c      	movs	r2, #12
 8000874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800087a:	e009      	b.n	8000890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <_sbrk+0x64>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000882:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <_sbrk+0x64>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4413      	add	r3, r2
 800088a:	4a05      	ldr	r2, [pc, #20]	; (80008a0 <_sbrk+0x64>)
 800088c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800088e:	68fb      	ldr	r3, [r7, #12]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20020000 	.word	0x20020000
 800089c:	00000400 	.word	0x00000400
 80008a0:	20000084 	.word	0x20000084
 80008a4:	200001d8 	.word	0x200001d8

080008a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <SystemInit+0x20>)
 80008ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b2:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <SystemInit+0x20>)
 80008b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000904 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008d0:	f7ff ffea 	bl	80008a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008d6:	490d      	ldr	r1, [pc, #52]	; (800090c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008d8:	4a0d      	ldr	r2, [pc, #52]	; (8000910 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008dc:	e002      	b.n	80008e4 <LoopCopyDataInit>

080008de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e2:	3304      	adds	r3, #4

080008e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e8:	d3f9      	bcc.n	80008de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008ec:	4c0a      	ldr	r4, [pc, #40]	; (8000918 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f0:	e001      	b.n	80008f6 <LoopFillZerobss>

080008f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f4:	3204      	adds	r2, #4

080008f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f8:	d3fb      	bcc.n	80008f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008fa:	f001 f895 	bl	8001a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008fe:	f7ff fe3d 	bl	800057c <main>
  bx  lr    
 8000902:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000904:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800090c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000910:	08002650 	.word	0x08002650
  ldr r2, =_sbss
 8000914:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000918:	200001d8 	.word	0x200001d8

0800091c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800091c:	e7fe      	b.n	800091c <ADC_IRQHandler>
	...

08000920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000924:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <HAL_Init+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <HAL_Init+0x40>)
 800092a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800092e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000930:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <HAL_Init+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <HAL_Init+0x40>)
 8000936:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800093a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_Init+0x40>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a07      	ldr	r2, [pc, #28]	; (8000960 <HAL_Init+0x40>)
 8000942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000946:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000948:	2003      	movs	r0, #3
 800094a:	f000 f90d 	bl	8000b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094e:	2000      	movs	r0, #0
 8000950:	f000 f808 	bl	8000964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000954:	f7ff feba 	bl	80006cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023c00 	.word	0x40023c00

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_InitTick+0x54>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_InitTick+0x58>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	4619      	mov	r1, r3
 8000976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097a:	fbb3 f3f1 	udiv	r3, r3, r1
 800097e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000982:	4618      	mov	r0, r3
 8000984:	f000 f917 	bl	8000bb6 <HAL_SYSTICK_Config>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e00e      	b.n	80009b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b0f      	cmp	r3, #15
 8000996:	d80a      	bhi.n	80009ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000998:	2200      	movs	r2, #0
 800099a:	6879      	ldr	r1, [r7, #4]
 800099c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009a0:	f000 f8ed 	bl	8000b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a4:	4a06      	ldr	r2, [pc, #24]	; (80009c0 <HAL_InitTick+0x5c>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
 80009ac:	e000      	b.n	80009b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000000 	.word	0x20000000
 80009bc:	20000008 	.word	0x20000008
 80009c0:	20000004 	.word	0x20000004

080009c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_IncTick+0x20>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x24>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <HAL_IncTick+0x24>)
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000008 	.word	0x20000008
 80009e8:	20000088 	.word	0x20000088

080009ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return uwTick;
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <HAL_GetTick+0x14>)
 80009f2:	681b      	ldr	r3, [r3, #0]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	20000088 	.word	0x20000088

08000a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a20:	4013      	ands	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a36:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <__NVIC_SetPriorityGrouping+0x44>)
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	60d3      	str	r3, [r2, #12]
}
 8000a3c:	bf00      	nop
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <__NVIC_GetPriorityGrouping+0x18>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	f003 0307 	and.w	r3, r3, #7
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	6039      	str	r1, [r7, #0]
 8000a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	db0a      	blt.n	8000a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	490c      	ldr	r1, [pc, #48]	; (8000ab4 <__NVIC_SetPriority+0x4c>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	0112      	lsls	r2, r2, #4
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a90:	e00a      	b.n	8000aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4908      	ldr	r1, [pc, #32]	; (8000ab8 <__NVIC_SetPriority+0x50>)
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	3b04      	subs	r3, #4
 8000aa0:	0112      	lsls	r2, r2, #4
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	761a      	strb	r2, [r3, #24]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e100 	.word	0xe000e100
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b089      	sub	sp, #36	; 0x24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	f1c3 0307 	rsb	r3, r3, #7
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	bf28      	it	cs
 8000ada:	2304      	movcs	r3, #4
 8000adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	2b06      	cmp	r3, #6
 8000ae4:	d902      	bls.n	8000aec <NVIC_EncodePriority+0x30>
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3b03      	subs	r3, #3
 8000aea:	e000      	b.n	8000aee <NVIC_EncodePriority+0x32>
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43da      	mvns	r2, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	401a      	ands	r2, r3
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	43d9      	mvns	r1, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	4313      	orrs	r3, r2
         );
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3724      	adds	r7, #36	; 0x24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b34:	d301      	bcc.n	8000b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00f      	b.n	8000b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <SysTick_Config+0x40>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b42:	210f      	movs	r1, #15
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b48:	f7ff ff8e 	bl	8000a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <SysTick_Config+0x40>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b52:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <SysTick_Config+0x40>)
 8000b54:	2207      	movs	r2, #7
 8000b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	e000e010 	.word	0xe000e010

08000b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff47 	bl	8000a04 <__NVIC_SetPriorityGrouping>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	4603      	mov	r3, r0
 8000b86:	60b9      	str	r1, [r7, #8]
 8000b88:	607a      	str	r2, [r7, #4]
 8000b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b90:	f7ff ff5c 	bl	8000a4c <__NVIC_GetPriorityGrouping>
 8000b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	68b9      	ldr	r1, [r7, #8]
 8000b9a:	6978      	ldr	r0, [r7, #20]
 8000b9c:	f7ff ff8e 	bl	8000abc <NVIC_EncodePriority>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff5d 	bl	8000a68 <__NVIC_SetPriority>
}
 8000bae:	bf00      	nop
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ffb0 	bl	8000b24 <SysTick_Config>
 8000bc4:	4603      	mov	r3, r0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	d106      	bne.n	8000bec <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000bea:	e005      	b.n	8000bf8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000bf2:	f023 0304 	bic.w	r3, r3, #4
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000e010 	.word	0xe000e010

08000c08 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000c0c:	f000 f802 	bl	8000c14 <HAL_SYSTICK_Callback>
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d101      	bne.n	8000c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e267      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d075      	beq.n	8000d2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000c42:	4b88      	ldr	r3, [pc, #544]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	f003 030c 	and.w	r3, r3, #12
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	d00c      	beq.n	8000c68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c4e:	4b85      	ldr	r3, [pc, #532]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000c56:	2b08      	cmp	r3, #8
 8000c58:	d112      	bne.n	8000c80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c5a:	4b82      	ldr	r3, [pc, #520]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c66:	d10b      	bne.n	8000c80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c68:	4b7e      	ldr	r3, [pc, #504]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d05b      	beq.n	8000d2c <HAL_RCC_OscConfig+0x108>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d157      	bne.n	8000d2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e242      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c88:	d106      	bne.n	8000c98 <HAL_RCC_OscConfig+0x74>
 8000c8a:	4b76      	ldr	r3, [pc, #472]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a75      	ldr	r2, [pc, #468]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	e01d      	b.n	8000cd4 <HAL_RCC_OscConfig+0xb0>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ca0:	d10c      	bne.n	8000cbc <HAL_RCC_OscConfig+0x98>
 8000ca2:	4b70      	ldr	r3, [pc, #448]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a6f      	ldr	r2, [pc, #444]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	4b6d      	ldr	r3, [pc, #436]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a6c      	ldr	r2, [pc, #432]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	e00b      	b.n	8000cd4 <HAL_RCC_OscConfig+0xb0>
 8000cbc:	4b69      	ldr	r3, [pc, #420]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a68      	ldr	r2, [pc, #416]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	4b66      	ldr	r3, [pc, #408]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a65      	ldr	r2, [pc, #404]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d013      	beq.n	8000d04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fe86 	bl	80009ec <HAL_GetTick>
 8000ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce2:	e008      	b.n	8000cf6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ce4:	f7ff fe82 	bl	80009ec <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b64      	cmp	r3, #100	; 0x64
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e207      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf6:	4b5b      	ldr	r3, [pc, #364]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f0      	beq.n	8000ce4 <HAL_RCC_OscConfig+0xc0>
 8000d02:	e014      	b.n	8000d2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d04:	f7ff fe72 	bl	80009ec <HAL_GetTick>
 8000d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d0a:	e008      	b.n	8000d1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d0c:	f7ff fe6e 	bl	80009ec <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	2b64      	cmp	r3, #100	; 0x64
 8000d18:	d901      	bls.n	8000d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e1f3      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d1e:	4b51      	ldr	r3, [pc, #324]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1f0      	bne.n	8000d0c <HAL_RCC_OscConfig+0xe8>
 8000d2a:	e000      	b.n	8000d2e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d063      	beq.n	8000e02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000d3a:	4b4a      	ldr	r3, [pc, #296]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f003 030c 	and.w	r3, r3, #12
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d00b      	beq.n	8000d5e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d46:	4b47      	ldr	r3, [pc, #284]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8000d4e:	2b08      	cmp	r3, #8
 8000d50:	d11c      	bne.n	8000d8c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d52:	4b44      	ldr	r3, [pc, #272]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d116      	bne.n	8000d8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d5e:	4b41      	ldr	r3, [pc, #260]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d005      	beq.n	8000d76 <HAL_RCC_OscConfig+0x152>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d001      	beq.n	8000d76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e1c7      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d76:	4b3b      	ldr	r3, [pc, #236]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	691b      	ldr	r3, [r3, #16]
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	4937      	ldr	r1, [pc, #220]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000d86:	4313      	orrs	r3, r2
 8000d88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d8a:	e03a      	b.n	8000e02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d020      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d94:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <HAL_RCC_OscConfig+0x244>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d9a:	f7ff fe27 	bl	80009ec <HAL_GetTick>
 8000d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da0:	e008      	b.n	8000db4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000da2:	f7ff fe23 	bl	80009ec <HAL_GetTick>
 8000da6:	4602      	mov	r2, r0
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d901      	bls.n	8000db4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000db0:	2303      	movs	r3, #3
 8000db2:	e1a8      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db4:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d0f0      	beq.n	8000da2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc0:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	691b      	ldr	r3, [r3, #16]
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	4925      	ldr	r1, [pc, #148]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	600b      	str	r3, [r1, #0]
 8000dd4:	e015      	b.n	8000e02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dd6:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <HAL_RCC_OscConfig+0x244>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ddc:	f7ff fe06 	bl	80009ec <HAL_GetTick>
 8000de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000de2:	e008      	b.n	8000df6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000de4:	f7ff fe02 	bl	80009ec <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e187      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000df6:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1f0      	bne.n	8000de4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d036      	beq.n	8000e7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d016      	beq.n	8000e44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_RCC_OscConfig+0x248>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e1c:	f7ff fde6 	bl	80009ec <HAL_GetTick>
 8000e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e22:	e008      	b.n	8000e36 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e24:	f7ff fde2 	bl	80009ec <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d901      	bls.n	8000e36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	e167      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_RCC_OscConfig+0x240>)
 8000e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d0f0      	beq.n	8000e24 <HAL_RCC_OscConfig+0x200>
 8000e42:	e01b      	b.n	8000e7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <HAL_RCC_OscConfig+0x248>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e4a:	f7ff fdcf 	bl	80009ec <HAL_GetTick>
 8000e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e50:	e00e      	b.n	8000e70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e52:	f7ff fdcb 	bl	80009ec <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d907      	bls.n	8000e70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e150      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
 8000e64:	40023800 	.word	0x40023800
 8000e68:	42470000 	.word	0x42470000
 8000e6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e70:	4b88      	ldr	r3, [pc, #544]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1ea      	bne.n	8000e52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 8097 	beq.w	8000fb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e8e:	4b81      	ldr	r3, [pc, #516]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10f      	bne.n	8000eba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b7d      	ldr	r3, [pc, #500]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a7c      	ldr	r2, [pc, #496]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b7a      	ldr	r3, [pc, #488]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eba:	4b77      	ldr	r3, [pc, #476]	; (8001098 <HAL_RCC_OscConfig+0x474>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d118      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ec6:	4b74      	ldr	r3, [pc, #464]	; (8001098 <HAL_RCC_OscConfig+0x474>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a73      	ldr	r2, [pc, #460]	; (8001098 <HAL_RCC_OscConfig+0x474>)
 8000ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ed2:	f7ff fd8b 	bl	80009ec <HAL_GetTick>
 8000ed6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed8:	e008      	b.n	8000eec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eda:	f7ff fd87 	bl	80009ec <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e10c      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eec:	4b6a      	ldr	r3, [pc, #424]	; (8001098 <HAL_RCC_OscConfig+0x474>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0f0      	beq.n	8000eda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d106      	bne.n	8000f0e <HAL_RCC_OscConfig+0x2ea>
 8000f00:	4b64      	ldr	r3, [pc, #400]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f04:	4a63      	ldr	r2, [pc, #396]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f0c:	e01c      	b.n	8000f48 <HAL_RCC_OscConfig+0x324>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	2b05      	cmp	r3, #5
 8000f14:	d10c      	bne.n	8000f30 <HAL_RCC_OscConfig+0x30c>
 8000f16:	4b5f      	ldr	r3, [pc, #380]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f1a:	4a5e      	ldr	r2, [pc, #376]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6713      	str	r3, [r2, #112]	; 0x70
 8000f22:	4b5c      	ldr	r3, [pc, #368]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f26:	4a5b      	ldr	r2, [pc, #364]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f2e:	e00b      	b.n	8000f48 <HAL_RCC_OscConfig+0x324>
 8000f30:	4b58      	ldr	r3, [pc, #352]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f34:	4a57      	ldr	r2, [pc, #348]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f36:	f023 0301 	bic.w	r3, r3, #1
 8000f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f3c:	4b55      	ldr	r3, [pc, #340]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f40:	4a54      	ldr	r2, [pc, #336]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f42:	f023 0304 	bic.w	r3, r3, #4
 8000f46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d015      	beq.n	8000f7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f50:	f7ff fd4c 	bl	80009ec <HAL_GetTick>
 8000f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f56:	e00a      	b.n	8000f6e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f58:	f7ff fd48 	bl	80009ec <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e0cb      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f6e:	4b49      	ldr	r3, [pc, #292]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0ee      	beq.n	8000f58 <HAL_RCC_OscConfig+0x334>
 8000f7a:	e014      	b.n	8000fa6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f7c:	f7ff fd36 	bl	80009ec <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f82:	e00a      	b.n	8000f9a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f84:	f7ff fd32 	bl	80009ec <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e0b5      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f9a:	4b3e      	ldr	r3, [pc, #248]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1ee      	bne.n	8000f84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d105      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fac:	4b39      	ldr	r3, [pc, #228]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	4a38      	ldr	r2, [pc, #224]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80a1 	beq.w	8001104 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fc2:	4b34      	ldr	r3, [pc, #208]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
 8000fca:	2b08      	cmp	r3, #8
 8000fcc:	d05c      	beq.n	8001088 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d141      	bne.n	800105a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd6:	4b31      	ldr	r3, [pc, #196]	; (800109c <HAL_RCC_OscConfig+0x478>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fd06 	bl	80009ec <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fe4:	f7ff fd02 	bl	80009ec <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e087      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ff6:	4b27      	ldr	r3, [pc, #156]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f0      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69da      	ldr	r2, [r3, #28]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a1b      	ldr	r3, [r3, #32]
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001010:	019b      	lsls	r3, r3, #6
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	085b      	lsrs	r3, r3, #1
 800101a:	3b01      	subs	r3, #1
 800101c:	041b      	lsls	r3, r3, #16
 800101e:	431a      	orrs	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001024:	061b      	lsls	r3, r3, #24
 8001026:	491b      	ldr	r1, [pc, #108]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 8001028:	4313      	orrs	r3, r2
 800102a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <HAL_RCC_OscConfig+0x478>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001032:	f7ff fcdb 	bl	80009ec <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800103a:	f7ff fcd7 	bl	80009ec <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e05c      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f0      	beq.n	800103a <HAL_RCC_OscConfig+0x416>
 8001058:	e054      	b.n	8001104 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <HAL_RCC_OscConfig+0x478>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001060:	f7ff fcc4 	bl	80009ec <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001066:	e008      	b.n	800107a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001068:	f7ff fcc0 	bl	80009ec <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e045      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_RCC_OscConfig+0x470>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1f0      	bne.n	8001068 <HAL_RCC_OscConfig+0x444>
 8001086:	e03d      	b.n	8001104 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d107      	bne.n	80010a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e038      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
 8001094:	40023800 	.word	0x40023800
 8001098:	40007000 	.word	0x40007000
 800109c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <HAL_RCC_OscConfig+0x4ec>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d028      	beq.n	8001100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d121      	bne.n	8001100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d11a      	bne.n	8001100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010d0:	4013      	ands	r3, r2
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80010d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010d8:	4293      	cmp	r3, r2
 80010da:	d111      	bne.n	8001100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e6:	085b      	lsrs	r3, r3, #1
 80010e8:	3b01      	subs	r3, #1
 80010ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d107      	bne.n	8001100 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d001      	beq.n	8001104 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e000      	b.n	8001106 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800

08001114 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e0cc      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001128:	4b68      	ldr	r3, [pc, #416]	; (80012cc <HAL_RCC_ClockConfig+0x1b8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d90c      	bls.n	8001150 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001136:	4b65      	ldr	r3, [pc, #404]	; (80012cc <HAL_RCC_ClockConfig+0x1b8>)
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800113e:	4b63      	ldr	r3, [pc, #396]	; (80012cc <HAL_RCC_ClockConfig+0x1b8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d001      	beq.n	8001150 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e0b8      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d020      	beq.n	800119e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	2b00      	cmp	r3, #0
 8001166:	d005      	beq.n	8001174 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001168:	4b59      	ldr	r3, [pc, #356]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	4a58      	ldr	r2, [pc, #352]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001172:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0308 	and.w	r3, r3, #8
 800117c:	2b00      	cmp	r3, #0
 800117e:	d005      	beq.n	800118c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001180:	4b53      	ldr	r3, [pc, #332]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	4a52      	ldr	r2, [pc, #328]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001186:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800118a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800118c:	4b50      	ldr	r3, [pc, #320]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	494d      	ldr	r1, [pc, #308]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	4313      	orrs	r3, r2
 800119c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d044      	beq.n	8001234 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d107      	bne.n	80011c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d119      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e07f      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d003      	beq.n	80011d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	d107      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011d2:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d109      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e06f      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e2:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e067      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011f2:	4b37      	ldr	r3, [pc, #220]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f023 0203 	bic.w	r2, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4934      	ldr	r1, [pc, #208]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	4313      	orrs	r3, r2
 8001202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001204:	f7ff fbf2 	bl	80009ec <HAL_GetTick>
 8001208:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120a:	e00a      	b.n	8001222 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800120c:	f7ff fbee 	bl	80009ec <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	f241 3288 	movw	r2, #5000	; 0x1388
 800121a:	4293      	cmp	r3, r2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e04f      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001222:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 020c 	and.w	r2, r3, #12
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	429a      	cmp	r2, r3
 8001232:	d1eb      	bne.n	800120c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <HAL_RCC_ClockConfig+0x1b8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	d20c      	bcs.n	800125c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <HAL_RCC_ClockConfig+0x1b8>)
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <HAL_RCC_ClockConfig+0x1b8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d001      	beq.n	800125c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e032      	b.n	80012c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	d008      	beq.n	800127a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	4916      	ldr	r1, [pc, #88]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	4313      	orrs	r3, r2
 8001278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	2b00      	cmp	r3, #0
 8001284:	d009      	beq.n	800129a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	490e      	ldr	r1, [pc, #56]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001296:	4313      	orrs	r3, r2
 8001298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800129a:	f000 f821 	bl	80012e0 <HAL_RCC_GetSysClockFreq>
 800129e:	4602      	mov	r2, r0
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	490a      	ldr	r1, [pc, #40]	; (80012d4 <HAL_RCC_ClockConfig+0x1c0>)
 80012ac:	5ccb      	ldrb	r3, [r1, r3]
 80012ae:	fa22 f303 	lsr.w	r3, r2, r3
 80012b2:	4a09      	ldr	r2, [pc, #36]	; (80012d8 <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_RCC_ClockConfig+0x1c8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fb52 	bl	8000964 <HAL_InitTick>

  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023c00 	.word	0x40023c00
 80012d0:	40023800 	.word	0x40023800
 80012d4:	080025f4 	.word	0x080025f4
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000004 	.word	0x20000004

080012e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012e4:	b094      	sub	sp, #80	; 0x50
 80012e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012f8:	4b79      	ldr	r3, [pc, #484]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 030c 	and.w	r3, r3, #12
 8001300:	2b08      	cmp	r3, #8
 8001302:	d00d      	beq.n	8001320 <HAL_RCC_GetSysClockFreq+0x40>
 8001304:	2b08      	cmp	r3, #8
 8001306:	f200 80e1 	bhi.w	80014cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <HAL_RCC_GetSysClockFreq+0x34>
 800130e:	2b04      	cmp	r3, #4
 8001310:	d003      	beq.n	800131a <HAL_RCC_GetSysClockFreq+0x3a>
 8001312:	e0db      	b.n	80014cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001314:	4b73      	ldr	r3, [pc, #460]	; (80014e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001316:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001318:	e0db      	b.n	80014d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800131a:	4b73      	ldr	r3, [pc, #460]	; (80014e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800131c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800131e:	e0d8      	b.n	80014d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001320:	4b6f      	ldr	r3, [pc, #444]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001328:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800132a:	4b6d      	ldr	r3, [pc, #436]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d063      	beq.n	80013fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001336:	4b6a      	ldr	r3, [pc, #424]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	099b      	lsrs	r3, r3, #6
 800133c:	2200      	movs	r2, #0
 800133e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001340:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001348:	633b      	str	r3, [r7, #48]	; 0x30
 800134a:	2300      	movs	r3, #0
 800134c:	637b      	str	r3, [r7, #52]	; 0x34
 800134e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001352:	4622      	mov	r2, r4
 8001354:	462b      	mov	r3, r5
 8001356:	f04f 0000 	mov.w	r0, #0
 800135a:	f04f 0100 	mov.w	r1, #0
 800135e:	0159      	lsls	r1, r3, #5
 8001360:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001364:	0150      	lsls	r0, r2, #5
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4621      	mov	r1, r4
 800136c:	1a51      	subs	r1, r2, r1
 800136e:	6139      	str	r1, [r7, #16]
 8001370:	4629      	mov	r1, r5
 8001372:	eb63 0301 	sbc.w	r3, r3, r1
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001384:	4659      	mov	r1, fp
 8001386:	018b      	lsls	r3, r1, #6
 8001388:	4651      	mov	r1, sl
 800138a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800138e:	4651      	mov	r1, sl
 8001390:	018a      	lsls	r2, r1, #6
 8001392:	4651      	mov	r1, sl
 8001394:	ebb2 0801 	subs.w	r8, r2, r1
 8001398:	4659      	mov	r1, fp
 800139a:	eb63 0901 	sbc.w	r9, r3, r1
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013b2:	4690      	mov	r8, r2
 80013b4:	4699      	mov	r9, r3
 80013b6:	4623      	mov	r3, r4
 80013b8:	eb18 0303 	adds.w	r3, r8, r3
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	462b      	mov	r3, r5
 80013c0:	eb49 0303 	adc.w	r3, r9, r3
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80013d2:	4629      	mov	r1, r5
 80013d4:	024b      	lsls	r3, r1, #9
 80013d6:	4621      	mov	r1, r4
 80013d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80013dc:	4621      	mov	r1, r4
 80013de:	024a      	lsls	r2, r1, #9
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013e6:	2200      	movs	r2, #0
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80013f0:	f7fe ff3e 	bl	8000270 <__aeabi_uldivmod>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4613      	mov	r3, r2
 80013fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013fc:	e058      	b.n	80014b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	099b      	lsrs	r3, r3, #6
 8001404:	2200      	movs	r2, #0
 8001406:	4618      	mov	r0, r3
 8001408:	4611      	mov	r1, r2
 800140a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800140e:	623b      	str	r3, [r7, #32]
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
 8001414:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001418:	4642      	mov	r2, r8
 800141a:	464b      	mov	r3, r9
 800141c:	f04f 0000 	mov.w	r0, #0
 8001420:	f04f 0100 	mov.w	r1, #0
 8001424:	0159      	lsls	r1, r3, #5
 8001426:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800142a:	0150      	lsls	r0, r2, #5
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4641      	mov	r1, r8
 8001432:	ebb2 0a01 	subs.w	sl, r2, r1
 8001436:	4649      	mov	r1, r9
 8001438:	eb63 0b01 	sbc.w	fp, r3, r1
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001448:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800144c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001450:	ebb2 040a 	subs.w	r4, r2, sl
 8001454:	eb63 050b 	sbc.w	r5, r3, fp
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	00eb      	lsls	r3, r5, #3
 8001462:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001466:	00e2      	lsls	r2, r4, #3
 8001468:	4614      	mov	r4, r2
 800146a:	461d      	mov	r5, r3
 800146c:	4643      	mov	r3, r8
 800146e:	18e3      	adds	r3, r4, r3
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	464b      	mov	r3, r9
 8001474:	eb45 0303 	adc.w	r3, r5, r3
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	f04f 0300 	mov.w	r3, #0
 8001482:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001486:	4629      	mov	r1, r5
 8001488:	028b      	lsls	r3, r1, #10
 800148a:	4621      	mov	r1, r4
 800148c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001490:	4621      	mov	r1, r4
 8001492:	028a      	lsls	r2, r1, #10
 8001494:	4610      	mov	r0, r2
 8001496:	4619      	mov	r1, r3
 8001498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800149a:	2200      	movs	r2, #0
 800149c:	61bb      	str	r3, [r7, #24]
 800149e:	61fa      	str	r2, [r7, #28]
 80014a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014a4:	f7fe fee4 	bl	8000270 <__aeabi_uldivmod>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4613      	mov	r3, r2
 80014ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	0c1b      	lsrs	r3, r3, #16
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	3301      	adds	r3, #1
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80014c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80014ca:	e002      	b.n	80014d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80014ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80014d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3750      	adds	r7, #80	; 0x50
 80014d8:	46bd      	mov	sp, r7
 80014da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	00f42400 	.word	0x00f42400
 80014e8:	007a1200 	.word	0x007a1200

080014ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_RCC_GetHCLKFreq+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000000 	.word	0x20000000

08001504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001508:	f7ff fff0 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 800150c:	4602      	mov	r2, r0
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	0a9b      	lsrs	r3, r3, #10
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	4903      	ldr	r1, [pc, #12]	; (8001528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800151a:	5ccb      	ldrb	r3, [r1, r3]
 800151c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001520:	4618      	mov	r0, r3
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800
 8001528:	08002604 	.word	0x08002604

0800152c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001530:	f7ff ffdc 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 8001534:	4602      	mov	r2, r0
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	0b5b      	lsrs	r3, r3, #13
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	4903      	ldr	r1, [pc, #12]	; (8001550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001542:	5ccb      	ldrb	r3, [r1, r3]
 8001544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001548:	4618      	mov	r0, r3
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	08002604 	.word	0x08002604

08001554 <std>:
 8001554:	2300      	movs	r3, #0
 8001556:	b510      	push	{r4, lr}
 8001558:	4604      	mov	r4, r0
 800155a:	e9c0 3300 	strd	r3, r3, [r0]
 800155e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001562:	6083      	str	r3, [r0, #8]
 8001564:	8181      	strh	r1, [r0, #12]
 8001566:	6643      	str	r3, [r0, #100]	; 0x64
 8001568:	81c2      	strh	r2, [r0, #14]
 800156a:	6183      	str	r3, [r0, #24]
 800156c:	4619      	mov	r1, r3
 800156e:	2208      	movs	r2, #8
 8001570:	305c      	adds	r0, #92	; 0x5c
 8001572:	f000 fa05 	bl	8001980 <memset>
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <std+0x58>)
 8001578:	6263      	str	r3, [r4, #36]	; 0x24
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <std+0x5c>)
 800157c:	62a3      	str	r3, [r4, #40]	; 0x28
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <std+0x60>)
 8001580:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <std+0x64>)
 8001584:	6323      	str	r3, [r4, #48]	; 0x30
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <std+0x68>)
 8001588:	6224      	str	r4, [r4, #32]
 800158a:	429c      	cmp	r4, r3
 800158c:	d006      	beq.n	800159c <std+0x48>
 800158e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001592:	4294      	cmp	r4, r2
 8001594:	d002      	beq.n	800159c <std+0x48>
 8001596:	33d0      	adds	r3, #208	; 0xd0
 8001598:	429c      	cmp	r4, r3
 800159a:	d105      	bne.n	80015a8 <std+0x54>
 800159c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80015a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015a4:	f000 ba64 	b.w	8001a70 <__retarget_lock_init_recursive>
 80015a8:	bd10      	pop	{r4, pc}
 80015aa:	bf00      	nop
 80015ac:	080017d1 	.word	0x080017d1
 80015b0:	080017f3 	.word	0x080017f3
 80015b4:	0800182b 	.word	0x0800182b
 80015b8:	0800184f 	.word	0x0800184f
 80015bc:	2000008c 	.word	0x2000008c

080015c0 <stdio_exit_handler>:
 80015c0:	4a02      	ldr	r2, [pc, #8]	; (80015cc <stdio_exit_handler+0xc>)
 80015c2:	4903      	ldr	r1, [pc, #12]	; (80015d0 <stdio_exit_handler+0x10>)
 80015c4:	4803      	ldr	r0, [pc, #12]	; (80015d4 <stdio_exit_handler+0x14>)
 80015c6:	f000 b869 	b.w	800169c <_fwalk_sglue>
 80015ca:	bf00      	nop
 80015cc:	2000000c 	.word	0x2000000c
 80015d0:	08002345 	.word	0x08002345
 80015d4:	20000018 	.word	0x20000018

080015d8 <cleanup_stdio>:
 80015d8:	6841      	ldr	r1, [r0, #4]
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <cleanup_stdio+0x34>)
 80015dc:	4299      	cmp	r1, r3
 80015de:	b510      	push	{r4, lr}
 80015e0:	4604      	mov	r4, r0
 80015e2:	d001      	beq.n	80015e8 <cleanup_stdio+0x10>
 80015e4:	f000 feae 	bl	8002344 <_fflush_r>
 80015e8:	68a1      	ldr	r1, [r4, #8]
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <cleanup_stdio+0x38>)
 80015ec:	4299      	cmp	r1, r3
 80015ee:	d002      	beq.n	80015f6 <cleanup_stdio+0x1e>
 80015f0:	4620      	mov	r0, r4
 80015f2:	f000 fea7 	bl	8002344 <_fflush_r>
 80015f6:	68e1      	ldr	r1, [r4, #12]
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <cleanup_stdio+0x3c>)
 80015fa:	4299      	cmp	r1, r3
 80015fc:	d004      	beq.n	8001608 <cleanup_stdio+0x30>
 80015fe:	4620      	mov	r0, r4
 8001600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001604:	f000 be9e 	b.w	8002344 <_fflush_r>
 8001608:	bd10      	pop	{r4, pc}
 800160a:	bf00      	nop
 800160c:	2000008c 	.word	0x2000008c
 8001610:	200000f4 	.word	0x200000f4
 8001614:	2000015c 	.word	0x2000015c

08001618 <global_stdio_init.part.0>:
 8001618:	b510      	push	{r4, lr}
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <global_stdio_init.part.0+0x30>)
 800161c:	4c0b      	ldr	r4, [pc, #44]	; (800164c <global_stdio_init.part.0+0x34>)
 800161e:	4a0c      	ldr	r2, [pc, #48]	; (8001650 <global_stdio_init.part.0+0x38>)
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	4620      	mov	r0, r4
 8001624:	2200      	movs	r2, #0
 8001626:	2104      	movs	r1, #4
 8001628:	f7ff ff94 	bl	8001554 <std>
 800162c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001630:	2201      	movs	r2, #1
 8001632:	2109      	movs	r1, #9
 8001634:	f7ff ff8e 	bl	8001554 <std>
 8001638:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800163c:	2202      	movs	r2, #2
 800163e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001642:	2112      	movs	r1, #18
 8001644:	f7ff bf86 	b.w	8001554 <std>
 8001648:	200001c4 	.word	0x200001c4
 800164c:	2000008c 	.word	0x2000008c
 8001650:	080015c1 	.word	0x080015c1

08001654 <__sfp_lock_acquire>:
 8001654:	4801      	ldr	r0, [pc, #4]	; (800165c <__sfp_lock_acquire+0x8>)
 8001656:	f000 ba0c 	b.w	8001a72 <__retarget_lock_acquire_recursive>
 800165a:	bf00      	nop
 800165c:	200001cd 	.word	0x200001cd

08001660 <__sfp_lock_release>:
 8001660:	4801      	ldr	r0, [pc, #4]	; (8001668 <__sfp_lock_release+0x8>)
 8001662:	f000 ba07 	b.w	8001a74 <__retarget_lock_release_recursive>
 8001666:	bf00      	nop
 8001668:	200001cd 	.word	0x200001cd

0800166c <__sinit>:
 800166c:	b510      	push	{r4, lr}
 800166e:	4604      	mov	r4, r0
 8001670:	f7ff fff0 	bl	8001654 <__sfp_lock_acquire>
 8001674:	6a23      	ldr	r3, [r4, #32]
 8001676:	b11b      	cbz	r3, 8001680 <__sinit+0x14>
 8001678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800167c:	f7ff bff0 	b.w	8001660 <__sfp_lock_release>
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <__sinit+0x28>)
 8001682:	6223      	str	r3, [r4, #32]
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <__sinit+0x2c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f5      	bne.n	8001678 <__sinit+0xc>
 800168c:	f7ff ffc4 	bl	8001618 <global_stdio_init.part.0>
 8001690:	e7f2      	b.n	8001678 <__sinit+0xc>
 8001692:	bf00      	nop
 8001694:	080015d9 	.word	0x080015d9
 8001698:	200001c4 	.word	0x200001c4

0800169c <_fwalk_sglue>:
 800169c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016a0:	4607      	mov	r7, r0
 80016a2:	4688      	mov	r8, r1
 80016a4:	4614      	mov	r4, r2
 80016a6:	2600      	movs	r6, #0
 80016a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80016ac:	f1b9 0901 	subs.w	r9, r9, #1
 80016b0:	d505      	bpl.n	80016be <_fwalk_sglue+0x22>
 80016b2:	6824      	ldr	r4, [r4, #0]
 80016b4:	2c00      	cmp	r4, #0
 80016b6:	d1f7      	bne.n	80016a8 <_fwalk_sglue+0xc>
 80016b8:	4630      	mov	r0, r6
 80016ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016be:	89ab      	ldrh	r3, [r5, #12]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d907      	bls.n	80016d4 <_fwalk_sglue+0x38>
 80016c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80016c8:	3301      	adds	r3, #1
 80016ca:	d003      	beq.n	80016d4 <_fwalk_sglue+0x38>
 80016cc:	4629      	mov	r1, r5
 80016ce:	4638      	mov	r0, r7
 80016d0:	47c0      	blx	r8
 80016d2:	4306      	orrs	r6, r0
 80016d4:	3568      	adds	r5, #104	; 0x68
 80016d6:	e7e9      	b.n	80016ac <_fwalk_sglue+0x10>

080016d8 <_puts_r>:
 80016d8:	6a03      	ldr	r3, [r0, #32]
 80016da:	b570      	push	{r4, r5, r6, lr}
 80016dc:	6884      	ldr	r4, [r0, #8]
 80016de:	4605      	mov	r5, r0
 80016e0:	460e      	mov	r6, r1
 80016e2:	b90b      	cbnz	r3, 80016e8 <_puts_r+0x10>
 80016e4:	f7ff ffc2 	bl	800166c <__sinit>
 80016e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016ea:	07db      	lsls	r3, r3, #31
 80016ec:	d405      	bmi.n	80016fa <_puts_r+0x22>
 80016ee:	89a3      	ldrh	r3, [r4, #12]
 80016f0:	0598      	lsls	r0, r3, #22
 80016f2:	d402      	bmi.n	80016fa <_puts_r+0x22>
 80016f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016f6:	f000 f9bc 	bl	8001a72 <__retarget_lock_acquire_recursive>
 80016fa:	89a3      	ldrh	r3, [r4, #12]
 80016fc:	0719      	lsls	r1, r3, #28
 80016fe:	d513      	bpl.n	8001728 <_puts_r+0x50>
 8001700:	6923      	ldr	r3, [r4, #16]
 8001702:	b18b      	cbz	r3, 8001728 <_puts_r+0x50>
 8001704:	3e01      	subs	r6, #1
 8001706:	68a3      	ldr	r3, [r4, #8]
 8001708:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800170c:	3b01      	subs	r3, #1
 800170e:	60a3      	str	r3, [r4, #8]
 8001710:	b9e9      	cbnz	r1, 800174e <_puts_r+0x76>
 8001712:	2b00      	cmp	r3, #0
 8001714:	da2e      	bge.n	8001774 <_puts_r+0x9c>
 8001716:	4622      	mov	r2, r4
 8001718:	210a      	movs	r1, #10
 800171a:	4628      	mov	r0, r5
 800171c:	f000 f89b 	bl	8001856 <__swbuf_r>
 8001720:	3001      	adds	r0, #1
 8001722:	d007      	beq.n	8001734 <_puts_r+0x5c>
 8001724:	250a      	movs	r5, #10
 8001726:	e007      	b.n	8001738 <_puts_r+0x60>
 8001728:	4621      	mov	r1, r4
 800172a:	4628      	mov	r0, r5
 800172c:	f000 f8d0 	bl	80018d0 <__swsetup_r>
 8001730:	2800      	cmp	r0, #0
 8001732:	d0e7      	beq.n	8001704 <_puts_r+0x2c>
 8001734:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001738:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800173a:	07da      	lsls	r2, r3, #31
 800173c:	d405      	bmi.n	800174a <_puts_r+0x72>
 800173e:	89a3      	ldrh	r3, [r4, #12]
 8001740:	059b      	lsls	r3, r3, #22
 8001742:	d402      	bmi.n	800174a <_puts_r+0x72>
 8001744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001746:	f000 f995 	bl	8001a74 <__retarget_lock_release_recursive>
 800174a:	4628      	mov	r0, r5
 800174c:	bd70      	pop	{r4, r5, r6, pc}
 800174e:	2b00      	cmp	r3, #0
 8001750:	da04      	bge.n	800175c <_puts_r+0x84>
 8001752:	69a2      	ldr	r2, [r4, #24]
 8001754:	429a      	cmp	r2, r3
 8001756:	dc06      	bgt.n	8001766 <_puts_r+0x8e>
 8001758:	290a      	cmp	r1, #10
 800175a:	d004      	beq.n	8001766 <_puts_r+0x8e>
 800175c:	6823      	ldr	r3, [r4, #0]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	6022      	str	r2, [r4, #0]
 8001762:	7019      	strb	r1, [r3, #0]
 8001764:	e7cf      	b.n	8001706 <_puts_r+0x2e>
 8001766:	4622      	mov	r2, r4
 8001768:	4628      	mov	r0, r5
 800176a:	f000 f874 	bl	8001856 <__swbuf_r>
 800176e:	3001      	adds	r0, #1
 8001770:	d1c9      	bne.n	8001706 <_puts_r+0x2e>
 8001772:	e7df      	b.n	8001734 <_puts_r+0x5c>
 8001774:	6823      	ldr	r3, [r4, #0]
 8001776:	250a      	movs	r5, #10
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	6022      	str	r2, [r4, #0]
 800177c:	701d      	strb	r5, [r3, #0]
 800177e:	e7db      	b.n	8001738 <_puts_r+0x60>

08001780 <puts>:
 8001780:	4b02      	ldr	r3, [pc, #8]	; (800178c <puts+0xc>)
 8001782:	4601      	mov	r1, r0
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	f7ff bfa7 	b.w	80016d8 <_puts_r>
 800178a:	bf00      	nop
 800178c:	20000064 	.word	0x20000064

08001790 <siprintf>:
 8001790:	b40e      	push	{r1, r2, r3}
 8001792:	b500      	push	{lr}
 8001794:	b09c      	sub	sp, #112	; 0x70
 8001796:	ab1d      	add	r3, sp, #116	; 0x74
 8001798:	9002      	str	r0, [sp, #8]
 800179a:	9006      	str	r0, [sp, #24]
 800179c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80017a0:	4809      	ldr	r0, [pc, #36]	; (80017c8 <siprintf+0x38>)
 80017a2:	9107      	str	r1, [sp, #28]
 80017a4:	9104      	str	r1, [sp, #16]
 80017a6:	4909      	ldr	r1, [pc, #36]	; (80017cc <siprintf+0x3c>)
 80017a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80017ac:	9105      	str	r1, [sp, #20]
 80017ae:	6800      	ldr	r0, [r0, #0]
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	a902      	add	r1, sp, #8
 80017b4:	f000 fab2 	bl	8001d1c <_svfiprintf_r>
 80017b8:	9b02      	ldr	r3, [sp, #8]
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	b01c      	add	sp, #112	; 0x70
 80017c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80017c4:	b003      	add	sp, #12
 80017c6:	4770      	bx	lr
 80017c8:	20000064 	.word	0x20000064
 80017cc:	ffff0208 	.word	0xffff0208

080017d0 <__sread>:
 80017d0:	b510      	push	{r4, lr}
 80017d2:	460c      	mov	r4, r1
 80017d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017d8:	f000 f8fc 	bl	80019d4 <_read_r>
 80017dc:	2800      	cmp	r0, #0
 80017de:	bfab      	itete	ge
 80017e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80017e2:	89a3      	ldrhlt	r3, [r4, #12]
 80017e4:	181b      	addge	r3, r3, r0
 80017e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80017ea:	bfac      	ite	ge
 80017ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80017ee:	81a3      	strhlt	r3, [r4, #12]
 80017f0:	bd10      	pop	{r4, pc}

080017f2 <__swrite>:
 80017f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017f6:	461f      	mov	r7, r3
 80017f8:	898b      	ldrh	r3, [r1, #12]
 80017fa:	05db      	lsls	r3, r3, #23
 80017fc:	4605      	mov	r5, r0
 80017fe:	460c      	mov	r4, r1
 8001800:	4616      	mov	r6, r2
 8001802:	d505      	bpl.n	8001810 <__swrite+0x1e>
 8001804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001808:	2302      	movs	r3, #2
 800180a:	2200      	movs	r2, #0
 800180c:	f000 f8d0 	bl	80019b0 <_lseek_r>
 8001810:	89a3      	ldrh	r3, [r4, #12]
 8001812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800181a:	81a3      	strh	r3, [r4, #12]
 800181c:	4632      	mov	r2, r6
 800181e:	463b      	mov	r3, r7
 8001820:	4628      	mov	r0, r5
 8001822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001826:	f000 b8e7 	b.w	80019f8 <_write_r>

0800182a <__sseek>:
 800182a:	b510      	push	{r4, lr}
 800182c:	460c      	mov	r4, r1
 800182e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001832:	f000 f8bd 	bl	80019b0 <_lseek_r>
 8001836:	1c43      	adds	r3, r0, #1
 8001838:	89a3      	ldrh	r3, [r4, #12]
 800183a:	bf15      	itete	ne
 800183c:	6560      	strne	r0, [r4, #84]	; 0x54
 800183e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001842:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001846:	81a3      	strheq	r3, [r4, #12]
 8001848:	bf18      	it	ne
 800184a:	81a3      	strhne	r3, [r4, #12]
 800184c:	bd10      	pop	{r4, pc}

0800184e <__sclose>:
 800184e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001852:	f000 b89d 	b.w	8001990 <_close_r>

08001856 <__swbuf_r>:
 8001856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001858:	460e      	mov	r6, r1
 800185a:	4614      	mov	r4, r2
 800185c:	4605      	mov	r5, r0
 800185e:	b118      	cbz	r0, 8001868 <__swbuf_r+0x12>
 8001860:	6a03      	ldr	r3, [r0, #32]
 8001862:	b90b      	cbnz	r3, 8001868 <__swbuf_r+0x12>
 8001864:	f7ff ff02 	bl	800166c <__sinit>
 8001868:	69a3      	ldr	r3, [r4, #24]
 800186a:	60a3      	str	r3, [r4, #8]
 800186c:	89a3      	ldrh	r3, [r4, #12]
 800186e:	071a      	lsls	r2, r3, #28
 8001870:	d525      	bpl.n	80018be <__swbuf_r+0x68>
 8001872:	6923      	ldr	r3, [r4, #16]
 8001874:	b31b      	cbz	r3, 80018be <__swbuf_r+0x68>
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	6922      	ldr	r2, [r4, #16]
 800187a:	1a98      	subs	r0, r3, r2
 800187c:	6963      	ldr	r3, [r4, #20]
 800187e:	b2f6      	uxtb	r6, r6
 8001880:	4283      	cmp	r3, r0
 8001882:	4637      	mov	r7, r6
 8001884:	dc04      	bgt.n	8001890 <__swbuf_r+0x3a>
 8001886:	4621      	mov	r1, r4
 8001888:	4628      	mov	r0, r5
 800188a:	f000 fd5b 	bl	8002344 <_fflush_r>
 800188e:	b9e0      	cbnz	r0, 80018ca <__swbuf_r+0x74>
 8001890:	68a3      	ldr	r3, [r4, #8]
 8001892:	3b01      	subs	r3, #1
 8001894:	60a3      	str	r3, [r4, #8]
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	6022      	str	r2, [r4, #0]
 800189c:	701e      	strb	r6, [r3, #0]
 800189e:	6962      	ldr	r2, [r4, #20]
 80018a0:	1c43      	adds	r3, r0, #1
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d004      	beq.n	80018b0 <__swbuf_r+0x5a>
 80018a6:	89a3      	ldrh	r3, [r4, #12]
 80018a8:	07db      	lsls	r3, r3, #31
 80018aa:	d506      	bpl.n	80018ba <__swbuf_r+0x64>
 80018ac:	2e0a      	cmp	r6, #10
 80018ae:	d104      	bne.n	80018ba <__swbuf_r+0x64>
 80018b0:	4621      	mov	r1, r4
 80018b2:	4628      	mov	r0, r5
 80018b4:	f000 fd46 	bl	8002344 <_fflush_r>
 80018b8:	b938      	cbnz	r0, 80018ca <__swbuf_r+0x74>
 80018ba:	4638      	mov	r0, r7
 80018bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018be:	4621      	mov	r1, r4
 80018c0:	4628      	mov	r0, r5
 80018c2:	f000 f805 	bl	80018d0 <__swsetup_r>
 80018c6:	2800      	cmp	r0, #0
 80018c8:	d0d5      	beq.n	8001876 <__swbuf_r+0x20>
 80018ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80018ce:	e7f4      	b.n	80018ba <__swbuf_r+0x64>

080018d0 <__swsetup_r>:
 80018d0:	b538      	push	{r3, r4, r5, lr}
 80018d2:	4b2a      	ldr	r3, [pc, #168]	; (800197c <__swsetup_r+0xac>)
 80018d4:	4605      	mov	r5, r0
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	460c      	mov	r4, r1
 80018da:	b118      	cbz	r0, 80018e4 <__swsetup_r+0x14>
 80018dc:	6a03      	ldr	r3, [r0, #32]
 80018de:	b90b      	cbnz	r3, 80018e4 <__swsetup_r+0x14>
 80018e0:	f7ff fec4 	bl	800166c <__sinit>
 80018e4:	89a3      	ldrh	r3, [r4, #12]
 80018e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80018ea:	0718      	lsls	r0, r3, #28
 80018ec:	d422      	bmi.n	8001934 <__swsetup_r+0x64>
 80018ee:	06d9      	lsls	r1, r3, #27
 80018f0:	d407      	bmi.n	8001902 <__swsetup_r+0x32>
 80018f2:	2309      	movs	r3, #9
 80018f4:	602b      	str	r3, [r5, #0]
 80018f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80018fa:	81a3      	strh	r3, [r4, #12]
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001900:	e034      	b.n	800196c <__swsetup_r+0x9c>
 8001902:	0758      	lsls	r0, r3, #29
 8001904:	d512      	bpl.n	800192c <__swsetup_r+0x5c>
 8001906:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001908:	b141      	cbz	r1, 800191c <__swsetup_r+0x4c>
 800190a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800190e:	4299      	cmp	r1, r3
 8001910:	d002      	beq.n	8001918 <__swsetup_r+0x48>
 8001912:	4628      	mov	r0, r5
 8001914:	f000 f8b0 	bl	8001a78 <_free_r>
 8001918:	2300      	movs	r3, #0
 800191a:	6363      	str	r3, [r4, #52]	; 0x34
 800191c:	89a3      	ldrh	r3, [r4, #12]
 800191e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001922:	81a3      	strh	r3, [r4, #12]
 8001924:	2300      	movs	r3, #0
 8001926:	6063      	str	r3, [r4, #4]
 8001928:	6923      	ldr	r3, [r4, #16]
 800192a:	6023      	str	r3, [r4, #0]
 800192c:	89a3      	ldrh	r3, [r4, #12]
 800192e:	f043 0308 	orr.w	r3, r3, #8
 8001932:	81a3      	strh	r3, [r4, #12]
 8001934:	6923      	ldr	r3, [r4, #16]
 8001936:	b94b      	cbnz	r3, 800194c <__swsetup_r+0x7c>
 8001938:	89a3      	ldrh	r3, [r4, #12]
 800193a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800193e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001942:	d003      	beq.n	800194c <__swsetup_r+0x7c>
 8001944:	4621      	mov	r1, r4
 8001946:	4628      	mov	r0, r5
 8001948:	f000 fd4a 	bl	80023e0 <__smakebuf_r>
 800194c:	89a0      	ldrh	r0, [r4, #12]
 800194e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001952:	f010 0301 	ands.w	r3, r0, #1
 8001956:	d00a      	beq.n	800196e <__swsetup_r+0x9e>
 8001958:	2300      	movs	r3, #0
 800195a:	60a3      	str	r3, [r4, #8]
 800195c:	6963      	ldr	r3, [r4, #20]
 800195e:	425b      	negs	r3, r3
 8001960:	61a3      	str	r3, [r4, #24]
 8001962:	6923      	ldr	r3, [r4, #16]
 8001964:	b943      	cbnz	r3, 8001978 <__swsetup_r+0xa8>
 8001966:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800196a:	d1c4      	bne.n	80018f6 <__swsetup_r+0x26>
 800196c:	bd38      	pop	{r3, r4, r5, pc}
 800196e:	0781      	lsls	r1, r0, #30
 8001970:	bf58      	it	pl
 8001972:	6963      	ldrpl	r3, [r4, #20]
 8001974:	60a3      	str	r3, [r4, #8]
 8001976:	e7f4      	b.n	8001962 <__swsetup_r+0x92>
 8001978:	2000      	movs	r0, #0
 800197a:	e7f7      	b.n	800196c <__swsetup_r+0x9c>
 800197c:	20000064 	.word	0x20000064

08001980 <memset>:
 8001980:	4402      	add	r2, r0
 8001982:	4603      	mov	r3, r0
 8001984:	4293      	cmp	r3, r2
 8001986:	d100      	bne.n	800198a <memset+0xa>
 8001988:	4770      	bx	lr
 800198a:	f803 1b01 	strb.w	r1, [r3], #1
 800198e:	e7f9      	b.n	8001984 <memset+0x4>

08001990 <_close_r>:
 8001990:	b538      	push	{r3, r4, r5, lr}
 8001992:	4d06      	ldr	r5, [pc, #24]	; (80019ac <_close_r+0x1c>)
 8001994:	2300      	movs	r3, #0
 8001996:	4604      	mov	r4, r0
 8001998:	4608      	mov	r0, r1
 800199a:	602b      	str	r3, [r5, #0]
 800199c:	f7fe ff19 	bl	80007d2 <_close>
 80019a0:	1c43      	adds	r3, r0, #1
 80019a2:	d102      	bne.n	80019aa <_close_r+0x1a>
 80019a4:	682b      	ldr	r3, [r5, #0]
 80019a6:	b103      	cbz	r3, 80019aa <_close_r+0x1a>
 80019a8:	6023      	str	r3, [r4, #0]
 80019aa:	bd38      	pop	{r3, r4, r5, pc}
 80019ac:	200001c8 	.word	0x200001c8

080019b0 <_lseek_r>:
 80019b0:	b538      	push	{r3, r4, r5, lr}
 80019b2:	4d07      	ldr	r5, [pc, #28]	; (80019d0 <_lseek_r+0x20>)
 80019b4:	4604      	mov	r4, r0
 80019b6:	4608      	mov	r0, r1
 80019b8:	4611      	mov	r1, r2
 80019ba:	2200      	movs	r2, #0
 80019bc:	602a      	str	r2, [r5, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	f7fe ff2e 	bl	8000820 <_lseek>
 80019c4:	1c43      	adds	r3, r0, #1
 80019c6:	d102      	bne.n	80019ce <_lseek_r+0x1e>
 80019c8:	682b      	ldr	r3, [r5, #0]
 80019ca:	b103      	cbz	r3, 80019ce <_lseek_r+0x1e>
 80019cc:	6023      	str	r3, [r4, #0]
 80019ce:	bd38      	pop	{r3, r4, r5, pc}
 80019d0:	200001c8 	.word	0x200001c8

080019d4 <_read_r>:
 80019d4:	b538      	push	{r3, r4, r5, lr}
 80019d6:	4d07      	ldr	r5, [pc, #28]	; (80019f4 <_read_r+0x20>)
 80019d8:	4604      	mov	r4, r0
 80019da:	4608      	mov	r0, r1
 80019dc:	4611      	mov	r1, r2
 80019de:	2200      	movs	r2, #0
 80019e0:	602a      	str	r2, [r5, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	f7fe febc 	bl	8000760 <_read>
 80019e8:	1c43      	adds	r3, r0, #1
 80019ea:	d102      	bne.n	80019f2 <_read_r+0x1e>
 80019ec:	682b      	ldr	r3, [r5, #0]
 80019ee:	b103      	cbz	r3, 80019f2 <_read_r+0x1e>
 80019f0:	6023      	str	r3, [r4, #0]
 80019f2:	bd38      	pop	{r3, r4, r5, pc}
 80019f4:	200001c8 	.word	0x200001c8

080019f8 <_write_r>:
 80019f8:	b538      	push	{r3, r4, r5, lr}
 80019fa:	4d07      	ldr	r5, [pc, #28]	; (8001a18 <_write_r+0x20>)
 80019fc:	4604      	mov	r4, r0
 80019fe:	4608      	mov	r0, r1
 8001a00:	4611      	mov	r1, r2
 8001a02:	2200      	movs	r2, #0
 8001a04:	602a      	str	r2, [r5, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	f7fe fec7 	bl	800079a <_write>
 8001a0c:	1c43      	adds	r3, r0, #1
 8001a0e:	d102      	bne.n	8001a16 <_write_r+0x1e>
 8001a10:	682b      	ldr	r3, [r5, #0]
 8001a12:	b103      	cbz	r3, 8001a16 <_write_r+0x1e>
 8001a14:	6023      	str	r3, [r4, #0]
 8001a16:	bd38      	pop	{r3, r4, r5, pc}
 8001a18:	200001c8 	.word	0x200001c8

08001a1c <__errno>:
 8001a1c:	4b01      	ldr	r3, [pc, #4]	; (8001a24 <__errno+0x8>)
 8001a1e:	6818      	ldr	r0, [r3, #0]
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000064 	.word	0x20000064

08001a28 <__libc_init_array>:
 8001a28:	b570      	push	{r4, r5, r6, lr}
 8001a2a:	4d0d      	ldr	r5, [pc, #52]	; (8001a60 <__libc_init_array+0x38>)
 8001a2c:	4c0d      	ldr	r4, [pc, #52]	; (8001a64 <__libc_init_array+0x3c>)
 8001a2e:	1b64      	subs	r4, r4, r5
 8001a30:	10a4      	asrs	r4, r4, #2
 8001a32:	2600      	movs	r6, #0
 8001a34:	42a6      	cmp	r6, r4
 8001a36:	d109      	bne.n	8001a4c <__libc_init_array+0x24>
 8001a38:	4d0b      	ldr	r5, [pc, #44]	; (8001a68 <__libc_init_array+0x40>)
 8001a3a:	4c0c      	ldr	r4, [pc, #48]	; (8001a6c <__libc_init_array+0x44>)
 8001a3c:	f000 fd9e 	bl	800257c <_init>
 8001a40:	1b64      	subs	r4, r4, r5
 8001a42:	10a4      	asrs	r4, r4, #2
 8001a44:	2600      	movs	r6, #0
 8001a46:	42a6      	cmp	r6, r4
 8001a48:	d105      	bne.n	8001a56 <__libc_init_array+0x2e>
 8001a4a:	bd70      	pop	{r4, r5, r6, pc}
 8001a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a50:	4798      	blx	r3
 8001a52:	3601      	adds	r6, #1
 8001a54:	e7ee      	b.n	8001a34 <__libc_init_array+0xc>
 8001a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a5a:	4798      	blx	r3
 8001a5c:	3601      	adds	r6, #1
 8001a5e:	e7f2      	b.n	8001a46 <__libc_init_array+0x1e>
 8001a60:	08002648 	.word	0x08002648
 8001a64:	08002648 	.word	0x08002648
 8001a68:	08002648 	.word	0x08002648
 8001a6c:	0800264c 	.word	0x0800264c

08001a70 <__retarget_lock_init_recursive>:
 8001a70:	4770      	bx	lr

08001a72 <__retarget_lock_acquire_recursive>:
 8001a72:	4770      	bx	lr

08001a74 <__retarget_lock_release_recursive>:
 8001a74:	4770      	bx	lr
	...

08001a78 <_free_r>:
 8001a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001a7a:	2900      	cmp	r1, #0
 8001a7c:	d044      	beq.n	8001b08 <_free_r+0x90>
 8001a7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a82:	9001      	str	r0, [sp, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f1a1 0404 	sub.w	r4, r1, #4
 8001a8a:	bfb8      	it	lt
 8001a8c:	18e4      	addlt	r4, r4, r3
 8001a8e:	f000 f8df 	bl	8001c50 <__malloc_lock>
 8001a92:	4a1e      	ldr	r2, [pc, #120]	; (8001b0c <_free_r+0x94>)
 8001a94:	9801      	ldr	r0, [sp, #4]
 8001a96:	6813      	ldr	r3, [r2, #0]
 8001a98:	b933      	cbnz	r3, 8001aa8 <_free_r+0x30>
 8001a9a:	6063      	str	r3, [r4, #4]
 8001a9c:	6014      	str	r4, [r2, #0]
 8001a9e:	b003      	add	sp, #12
 8001aa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001aa4:	f000 b8da 	b.w	8001c5c <__malloc_unlock>
 8001aa8:	42a3      	cmp	r3, r4
 8001aaa:	d908      	bls.n	8001abe <_free_r+0x46>
 8001aac:	6825      	ldr	r5, [r4, #0]
 8001aae:	1961      	adds	r1, r4, r5
 8001ab0:	428b      	cmp	r3, r1
 8001ab2:	bf01      	itttt	eq
 8001ab4:	6819      	ldreq	r1, [r3, #0]
 8001ab6:	685b      	ldreq	r3, [r3, #4]
 8001ab8:	1949      	addeq	r1, r1, r5
 8001aba:	6021      	streq	r1, [r4, #0]
 8001abc:	e7ed      	b.n	8001a9a <_free_r+0x22>
 8001abe:	461a      	mov	r2, r3
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	b10b      	cbz	r3, 8001ac8 <_free_r+0x50>
 8001ac4:	42a3      	cmp	r3, r4
 8001ac6:	d9fa      	bls.n	8001abe <_free_r+0x46>
 8001ac8:	6811      	ldr	r1, [r2, #0]
 8001aca:	1855      	adds	r5, r2, r1
 8001acc:	42a5      	cmp	r5, r4
 8001ace:	d10b      	bne.n	8001ae8 <_free_r+0x70>
 8001ad0:	6824      	ldr	r4, [r4, #0]
 8001ad2:	4421      	add	r1, r4
 8001ad4:	1854      	adds	r4, r2, r1
 8001ad6:	42a3      	cmp	r3, r4
 8001ad8:	6011      	str	r1, [r2, #0]
 8001ada:	d1e0      	bne.n	8001a9e <_free_r+0x26>
 8001adc:	681c      	ldr	r4, [r3, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	6053      	str	r3, [r2, #4]
 8001ae2:	440c      	add	r4, r1
 8001ae4:	6014      	str	r4, [r2, #0]
 8001ae6:	e7da      	b.n	8001a9e <_free_r+0x26>
 8001ae8:	d902      	bls.n	8001af0 <_free_r+0x78>
 8001aea:	230c      	movs	r3, #12
 8001aec:	6003      	str	r3, [r0, #0]
 8001aee:	e7d6      	b.n	8001a9e <_free_r+0x26>
 8001af0:	6825      	ldr	r5, [r4, #0]
 8001af2:	1961      	adds	r1, r4, r5
 8001af4:	428b      	cmp	r3, r1
 8001af6:	bf04      	itt	eq
 8001af8:	6819      	ldreq	r1, [r3, #0]
 8001afa:	685b      	ldreq	r3, [r3, #4]
 8001afc:	6063      	str	r3, [r4, #4]
 8001afe:	bf04      	itt	eq
 8001b00:	1949      	addeq	r1, r1, r5
 8001b02:	6021      	streq	r1, [r4, #0]
 8001b04:	6054      	str	r4, [r2, #4]
 8001b06:	e7ca      	b.n	8001a9e <_free_r+0x26>
 8001b08:	b003      	add	sp, #12
 8001b0a:	bd30      	pop	{r4, r5, pc}
 8001b0c:	200001d0 	.word	0x200001d0

08001b10 <sbrk_aligned>:
 8001b10:	b570      	push	{r4, r5, r6, lr}
 8001b12:	4e0e      	ldr	r6, [pc, #56]	; (8001b4c <sbrk_aligned+0x3c>)
 8001b14:	460c      	mov	r4, r1
 8001b16:	6831      	ldr	r1, [r6, #0]
 8001b18:	4605      	mov	r5, r0
 8001b1a:	b911      	cbnz	r1, 8001b22 <sbrk_aligned+0x12>
 8001b1c:	f000 fcd8 	bl	80024d0 <_sbrk_r>
 8001b20:	6030      	str	r0, [r6, #0]
 8001b22:	4621      	mov	r1, r4
 8001b24:	4628      	mov	r0, r5
 8001b26:	f000 fcd3 	bl	80024d0 <_sbrk_r>
 8001b2a:	1c43      	adds	r3, r0, #1
 8001b2c:	d00a      	beq.n	8001b44 <sbrk_aligned+0x34>
 8001b2e:	1cc4      	adds	r4, r0, #3
 8001b30:	f024 0403 	bic.w	r4, r4, #3
 8001b34:	42a0      	cmp	r0, r4
 8001b36:	d007      	beq.n	8001b48 <sbrk_aligned+0x38>
 8001b38:	1a21      	subs	r1, r4, r0
 8001b3a:	4628      	mov	r0, r5
 8001b3c:	f000 fcc8 	bl	80024d0 <_sbrk_r>
 8001b40:	3001      	adds	r0, #1
 8001b42:	d101      	bne.n	8001b48 <sbrk_aligned+0x38>
 8001b44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001b48:	4620      	mov	r0, r4
 8001b4a:	bd70      	pop	{r4, r5, r6, pc}
 8001b4c:	200001d4 	.word	0x200001d4

08001b50 <_malloc_r>:
 8001b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b54:	1ccd      	adds	r5, r1, #3
 8001b56:	f025 0503 	bic.w	r5, r5, #3
 8001b5a:	3508      	adds	r5, #8
 8001b5c:	2d0c      	cmp	r5, #12
 8001b5e:	bf38      	it	cc
 8001b60:	250c      	movcc	r5, #12
 8001b62:	2d00      	cmp	r5, #0
 8001b64:	4607      	mov	r7, r0
 8001b66:	db01      	blt.n	8001b6c <_malloc_r+0x1c>
 8001b68:	42a9      	cmp	r1, r5
 8001b6a:	d905      	bls.n	8001b78 <_malloc_r+0x28>
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	2600      	movs	r6, #0
 8001b72:	4630      	mov	r0, r6
 8001b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001c4c <_malloc_r+0xfc>
 8001b7c:	f000 f868 	bl	8001c50 <__malloc_lock>
 8001b80:	f8d8 3000 	ldr.w	r3, [r8]
 8001b84:	461c      	mov	r4, r3
 8001b86:	bb5c      	cbnz	r4, 8001be0 <_malloc_r+0x90>
 8001b88:	4629      	mov	r1, r5
 8001b8a:	4638      	mov	r0, r7
 8001b8c:	f7ff ffc0 	bl	8001b10 <sbrk_aligned>
 8001b90:	1c43      	adds	r3, r0, #1
 8001b92:	4604      	mov	r4, r0
 8001b94:	d155      	bne.n	8001c42 <_malloc_r+0xf2>
 8001b96:	f8d8 4000 	ldr.w	r4, [r8]
 8001b9a:	4626      	mov	r6, r4
 8001b9c:	2e00      	cmp	r6, #0
 8001b9e:	d145      	bne.n	8001c2c <_malloc_r+0xdc>
 8001ba0:	2c00      	cmp	r4, #0
 8001ba2:	d048      	beq.n	8001c36 <_malloc_r+0xe6>
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	4631      	mov	r1, r6
 8001ba8:	4638      	mov	r0, r7
 8001baa:	eb04 0903 	add.w	r9, r4, r3
 8001bae:	f000 fc8f 	bl	80024d0 <_sbrk_r>
 8001bb2:	4581      	cmp	r9, r0
 8001bb4:	d13f      	bne.n	8001c36 <_malloc_r+0xe6>
 8001bb6:	6821      	ldr	r1, [r4, #0]
 8001bb8:	1a6d      	subs	r5, r5, r1
 8001bba:	4629      	mov	r1, r5
 8001bbc:	4638      	mov	r0, r7
 8001bbe:	f7ff ffa7 	bl	8001b10 <sbrk_aligned>
 8001bc2:	3001      	adds	r0, #1
 8001bc4:	d037      	beq.n	8001c36 <_malloc_r+0xe6>
 8001bc6:	6823      	ldr	r3, [r4, #0]
 8001bc8:	442b      	add	r3, r5
 8001bca:	6023      	str	r3, [r4, #0]
 8001bcc:	f8d8 3000 	ldr.w	r3, [r8]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d038      	beq.n	8001c46 <_malloc_r+0xf6>
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	42a2      	cmp	r2, r4
 8001bd8:	d12b      	bne.n	8001c32 <_malloc_r+0xe2>
 8001bda:	2200      	movs	r2, #0
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	e00f      	b.n	8001c00 <_malloc_r+0xb0>
 8001be0:	6822      	ldr	r2, [r4, #0]
 8001be2:	1b52      	subs	r2, r2, r5
 8001be4:	d41f      	bmi.n	8001c26 <_malloc_r+0xd6>
 8001be6:	2a0b      	cmp	r2, #11
 8001be8:	d917      	bls.n	8001c1a <_malloc_r+0xca>
 8001bea:	1961      	adds	r1, r4, r5
 8001bec:	42a3      	cmp	r3, r4
 8001bee:	6025      	str	r5, [r4, #0]
 8001bf0:	bf18      	it	ne
 8001bf2:	6059      	strne	r1, [r3, #4]
 8001bf4:	6863      	ldr	r3, [r4, #4]
 8001bf6:	bf08      	it	eq
 8001bf8:	f8c8 1000 	streq.w	r1, [r8]
 8001bfc:	5162      	str	r2, [r4, r5]
 8001bfe:	604b      	str	r3, [r1, #4]
 8001c00:	4638      	mov	r0, r7
 8001c02:	f104 060b 	add.w	r6, r4, #11
 8001c06:	f000 f829 	bl	8001c5c <__malloc_unlock>
 8001c0a:	f026 0607 	bic.w	r6, r6, #7
 8001c0e:	1d23      	adds	r3, r4, #4
 8001c10:	1af2      	subs	r2, r6, r3
 8001c12:	d0ae      	beq.n	8001b72 <_malloc_r+0x22>
 8001c14:	1b9b      	subs	r3, r3, r6
 8001c16:	50a3      	str	r3, [r4, r2]
 8001c18:	e7ab      	b.n	8001b72 <_malloc_r+0x22>
 8001c1a:	42a3      	cmp	r3, r4
 8001c1c:	6862      	ldr	r2, [r4, #4]
 8001c1e:	d1dd      	bne.n	8001bdc <_malloc_r+0x8c>
 8001c20:	f8c8 2000 	str.w	r2, [r8]
 8001c24:	e7ec      	b.n	8001c00 <_malloc_r+0xb0>
 8001c26:	4623      	mov	r3, r4
 8001c28:	6864      	ldr	r4, [r4, #4]
 8001c2a:	e7ac      	b.n	8001b86 <_malloc_r+0x36>
 8001c2c:	4634      	mov	r4, r6
 8001c2e:	6876      	ldr	r6, [r6, #4]
 8001c30:	e7b4      	b.n	8001b9c <_malloc_r+0x4c>
 8001c32:	4613      	mov	r3, r2
 8001c34:	e7cc      	b.n	8001bd0 <_malloc_r+0x80>
 8001c36:	230c      	movs	r3, #12
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	4638      	mov	r0, r7
 8001c3c:	f000 f80e 	bl	8001c5c <__malloc_unlock>
 8001c40:	e797      	b.n	8001b72 <_malloc_r+0x22>
 8001c42:	6025      	str	r5, [r4, #0]
 8001c44:	e7dc      	b.n	8001c00 <_malloc_r+0xb0>
 8001c46:	605b      	str	r3, [r3, #4]
 8001c48:	deff      	udf	#255	; 0xff
 8001c4a:	bf00      	nop
 8001c4c:	200001d0 	.word	0x200001d0

08001c50 <__malloc_lock>:
 8001c50:	4801      	ldr	r0, [pc, #4]	; (8001c58 <__malloc_lock+0x8>)
 8001c52:	f7ff bf0e 	b.w	8001a72 <__retarget_lock_acquire_recursive>
 8001c56:	bf00      	nop
 8001c58:	200001cc 	.word	0x200001cc

08001c5c <__malloc_unlock>:
 8001c5c:	4801      	ldr	r0, [pc, #4]	; (8001c64 <__malloc_unlock+0x8>)
 8001c5e:	f7ff bf09 	b.w	8001a74 <__retarget_lock_release_recursive>
 8001c62:	bf00      	nop
 8001c64:	200001cc 	.word	0x200001cc

08001c68 <__ssputs_r>:
 8001c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c6c:	688e      	ldr	r6, [r1, #8]
 8001c6e:	461f      	mov	r7, r3
 8001c70:	42be      	cmp	r6, r7
 8001c72:	680b      	ldr	r3, [r1, #0]
 8001c74:	4682      	mov	sl, r0
 8001c76:	460c      	mov	r4, r1
 8001c78:	4690      	mov	r8, r2
 8001c7a:	d82c      	bhi.n	8001cd6 <__ssputs_r+0x6e>
 8001c7c:	898a      	ldrh	r2, [r1, #12]
 8001c7e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001c82:	d026      	beq.n	8001cd2 <__ssputs_r+0x6a>
 8001c84:	6965      	ldr	r5, [r4, #20]
 8001c86:	6909      	ldr	r1, [r1, #16]
 8001c88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c8c:	eba3 0901 	sub.w	r9, r3, r1
 8001c90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001c94:	1c7b      	adds	r3, r7, #1
 8001c96:	444b      	add	r3, r9
 8001c98:	106d      	asrs	r5, r5, #1
 8001c9a:	429d      	cmp	r5, r3
 8001c9c:	bf38      	it	cc
 8001c9e:	461d      	movcc	r5, r3
 8001ca0:	0553      	lsls	r3, r2, #21
 8001ca2:	d527      	bpl.n	8001cf4 <__ssputs_r+0x8c>
 8001ca4:	4629      	mov	r1, r5
 8001ca6:	f7ff ff53 	bl	8001b50 <_malloc_r>
 8001caa:	4606      	mov	r6, r0
 8001cac:	b360      	cbz	r0, 8001d08 <__ssputs_r+0xa0>
 8001cae:	6921      	ldr	r1, [r4, #16]
 8001cb0:	464a      	mov	r2, r9
 8001cb2:	f000 fc1d 	bl	80024f0 <memcpy>
 8001cb6:	89a3      	ldrh	r3, [r4, #12]
 8001cb8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc0:	81a3      	strh	r3, [r4, #12]
 8001cc2:	6126      	str	r6, [r4, #16]
 8001cc4:	6165      	str	r5, [r4, #20]
 8001cc6:	444e      	add	r6, r9
 8001cc8:	eba5 0509 	sub.w	r5, r5, r9
 8001ccc:	6026      	str	r6, [r4, #0]
 8001cce:	60a5      	str	r5, [r4, #8]
 8001cd0:	463e      	mov	r6, r7
 8001cd2:	42be      	cmp	r6, r7
 8001cd4:	d900      	bls.n	8001cd8 <__ssputs_r+0x70>
 8001cd6:	463e      	mov	r6, r7
 8001cd8:	6820      	ldr	r0, [r4, #0]
 8001cda:	4632      	mov	r2, r6
 8001cdc:	4641      	mov	r1, r8
 8001cde:	f000 fbbb 	bl	8002458 <memmove>
 8001ce2:	68a3      	ldr	r3, [r4, #8]
 8001ce4:	1b9b      	subs	r3, r3, r6
 8001ce6:	60a3      	str	r3, [r4, #8]
 8001ce8:	6823      	ldr	r3, [r4, #0]
 8001cea:	4433      	add	r3, r6
 8001cec:	6023      	str	r3, [r4, #0]
 8001cee:	2000      	movs	r0, #0
 8001cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cf4:	462a      	mov	r2, r5
 8001cf6:	f000 fc09 	bl	800250c <_realloc_r>
 8001cfa:	4606      	mov	r6, r0
 8001cfc:	2800      	cmp	r0, #0
 8001cfe:	d1e0      	bne.n	8001cc2 <__ssputs_r+0x5a>
 8001d00:	6921      	ldr	r1, [r4, #16]
 8001d02:	4650      	mov	r0, sl
 8001d04:	f7ff feb8 	bl	8001a78 <_free_r>
 8001d08:	230c      	movs	r3, #12
 8001d0a:	f8ca 3000 	str.w	r3, [sl]
 8001d0e:	89a3      	ldrh	r3, [r4, #12]
 8001d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d14:	81a3      	strh	r3, [r4, #12]
 8001d16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d1a:	e7e9      	b.n	8001cf0 <__ssputs_r+0x88>

08001d1c <_svfiprintf_r>:
 8001d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d20:	4698      	mov	r8, r3
 8001d22:	898b      	ldrh	r3, [r1, #12]
 8001d24:	061b      	lsls	r3, r3, #24
 8001d26:	b09d      	sub	sp, #116	; 0x74
 8001d28:	4607      	mov	r7, r0
 8001d2a:	460d      	mov	r5, r1
 8001d2c:	4614      	mov	r4, r2
 8001d2e:	d50e      	bpl.n	8001d4e <_svfiprintf_r+0x32>
 8001d30:	690b      	ldr	r3, [r1, #16]
 8001d32:	b963      	cbnz	r3, 8001d4e <_svfiprintf_r+0x32>
 8001d34:	2140      	movs	r1, #64	; 0x40
 8001d36:	f7ff ff0b 	bl	8001b50 <_malloc_r>
 8001d3a:	6028      	str	r0, [r5, #0]
 8001d3c:	6128      	str	r0, [r5, #16]
 8001d3e:	b920      	cbnz	r0, 8001d4a <_svfiprintf_r+0x2e>
 8001d40:	230c      	movs	r3, #12
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d48:	e0d0      	b.n	8001eec <_svfiprintf_r+0x1d0>
 8001d4a:	2340      	movs	r3, #64	; 0x40
 8001d4c:	616b      	str	r3, [r5, #20]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	9309      	str	r3, [sp, #36]	; 0x24
 8001d52:	2320      	movs	r3, #32
 8001d54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d58:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d5c:	2330      	movs	r3, #48	; 0x30
 8001d5e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001f04 <_svfiprintf_r+0x1e8>
 8001d62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d66:	f04f 0901 	mov.w	r9, #1
 8001d6a:	4623      	mov	r3, r4
 8001d6c:	469a      	mov	sl, r3
 8001d6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d72:	b10a      	cbz	r2, 8001d78 <_svfiprintf_r+0x5c>
 8001d74:	2a25      	cmp	r2, #37	; 0x25
 8001d76:	d1f9      	bne.n	8001d6c <_svfiprintf_r+0x50>
 8001d78:	ebba 0b04 	subs.w	fp, sl, r4
 8001d7c:	d00b      	beq.n	8001d96 <_svfiprintf_r+0x7a>
 8001d7e:	465b      	mov	r3, fp
 8001d80:	4622      	mov	r2, r4
 8001d82:	4629      	mov	r1, r5
 8001d84:	4638      	mov	r0, r7
 8001d86:	f7ff ff6f 	bl	8001c68 <__ssputs_r>
 8001d8a:	3001      	adds	r0, #1
 8001d8c:	f000 80a9 	beq.w	8001ee2 <_svfiprintf_r+0x1c6>
 8001d90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d92:	445a      	add	r2, fp
 8001d94:	9209      	str	r2, [sp, #36]	; 0x24
 8001d96:	f89a 3000 	ldrb.w	r3, [sl]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 80a1 	beq.w	8001ee2 <_svfiprintf_r+0x1c6>
 8001da0:	2300      	movs	r3, #0
 8001da2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001da6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001daa:	f10a 0a01 	add.w	sl, sl, #1
 8001dae:	9304      	str	r3, [sp, #16]
 8001db0:	9307      	str	r3, [sp, #28]
 8001db2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001db6:	931a      	str	r3, [sp, #104]	; 0x68
 8001db8:	4654      	mov	r4, sl
 8001dba:	2205      	movs	r2, #5
 8001dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dc0:	4850      	ldr	r0, [pc, #320]	; (8001f04 <_svfiprintf_r+0x1e8>)
 8001dc2:	f7fe fa05 	bl	80001d0 <memchr>
 8001dc6:	9a04      	ldr	r2, [sp, #16]
 8001dc8:	b9d8      	cbnz	r0, 8001e02 <_svfiprintf_r+0xe6>
 8001dca:	06d0      	lsls	r0, r2, #27
 8001dcc:	bf44      	itt	mi
 8001dce:	2320      	movmi	r3, #32
 8001dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001dd4:	0711      	lsls	r1, r2, #28
 8001dd6:	bf44      	itt	mi
 8001dd8:	232b      	movmi	r3, #43	; 0x2b
 8001dda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001dde:	f89a 3000 	ldrb.w	r3, [sl]
 8001de2:	2b2a      	cmp	r3, #42	; 0x2a
 8001de4:	d015      	beq.n	8001e12 <_svfiprintf_r+0xf6>
 8001de6:	9a07      	ldr	r2, [sp, #28]
 8001de8:	4654      	mov	r4, sl
 8001dea:	2000      	movs	r0, #0
 8001dec:	f04f 0c0a 	mov.w	ip, #10
 8001df0:	4621      	mov	r1, r4
 8001df2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001df6:	3b30      	subs	r3, #48	; 0x30
 8001df8:	2b09      	cmp	r3, #9
 8001dfa:	d94d      	bls.n	8001e98 <_svfiprintf_r+0x17c>
 8001dfc:	b1b0      	cbz	r0, 8001e2c <_svfiprintf_r+0x110>
 8001dfe:	9207      	str	r2, [sp, #28]
 8001e00:	e014      	b.n	8001e2c <_svfiprintf_r+0x110>
 8001e02:	eba0 0308 	sub.w	r3, r0, r8
 8001e06:	fa09 f303 	lsl.w	r3, r9, r3
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	9304      	str	r3, [sp, #16]
 8001e0e:	46a2      	mov	sl, r4
 8001e10:	e7d2      	b.n	8001db8 <_svfiprintf_r+0x9c>
 8001e12:	9b03      	ldr	r3, [sp, #12]
 8001e14:	1d19      	adds	r1, r3, #4
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	9103      	str	r1, [sp, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	bfbb      	ittet	lt
 8001e1e:	425b      	neglt	r3, r3
 8001e20:	f042 0202 	orrlt.w	r2, r2, #2
 8001e24:	9307      	strge	r3, [sp, #28]
 8001e26:	9307      	strlt	r3, [sp, #28]
 8001e28:	bfb8      	it	lt
 8001e2a:	9204      	strlt	r2, [sp, #16]
 8001e2c:	7823      	ldrb	r3, [r4, #0]
 8001e2e:	2b2e      	cmp	r3, #46	; 0x2e
 8001e30:	d10c      	bne.n	8001e4c <_svfiprintf_r+0x130>
 8001e32:	7863      	ldrb	r3, [r4, #1]
 8001e34:	2b2a      	cmp	r3, #42	; 0x2a
 8001e36:	d134      	bne.n	8001ea2 <_svfiprintf_r+0x186>
 8001e38:	9b03      	ldr	r3, [sp, #12]
 8001e3a:	1d1a      	adds	r2, r3, #4
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	9203      	str	r2, [sp, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bfb8      	it	lt
 8001e44:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001e48:	3402      	adds	r4, #2
 8001e4a:	9305      	str	r3, [sp, #20]
 8001e4c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8001f14 <_svfiprintf_r+0x1f8>
 8001e50:	7821      	ldrb	r1, [r4, #0]
 8001e52:	2203      	movs	r2, #3
 8001e54:	4650      	mov	r0, sl
 8001e56:	f7fe f9bb 	bl	80001d0 <memchr>
 8001e5a:	b138      	cbz	r0, 8001e6c <_svfiprintf_r+0x150>
 8001e5c:	9b04      	ldr	r3, [sp, #16]
 8001e5e:	eba0 000a 	sub.w	r0, r0, sl
 8001e62:	2240      	movs	r2, #64	; 0x40
 8001e64:	4082      	lsls	r2, r0
 8001e66:	4313      	orrs	r3, r2
 8001e68:	3401      	adds	r4, #1
 8001e6a:	9304      	str	r3, [sp, #16]
 8001e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e70:	4825      	ldr	r0, [pc, #148]	; (8001f08 <_svfiprintf_r+0x1ec>)
 8001e72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e76:	2206      	movs	r2, #6
 8001e78:	f7fe f9aa 	bl	80001d0 <memchr>
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	d038      	beq.n	8001ef2 <_svfiprintf_r+0x1d6>
 8001e80:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <_svfiprintf_r+0x1f0>)
 8001e82:	bb1b      	cbnz	r3, 8001ecc <_svfiprintf_r+0x1b0>
 8001e84:	9b03      	ldr	r3, [sp, #12]
 8001e86:	3307      	adds	r3, #7
 8001e88:	f023 0307 	bic.w	r3, r3, #7
 8001e8c:	3308      	adds	r3, #8
 8001e8e:	9303      	str	r3, [sp, #12]
 8001e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e92:	4433      	add	r3, r6
 8001e94:	9309      	str	r3, [sp, #36]	; 0x24
 8001e96:	e768      	b.n	8001d6a <_svfiprintf_r+0x4e>
 8001e98:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e9c:	460c      	mov	r4, r1
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	e7a6      	b.n	8001df0 <_svfiprintf_r+0xd4>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	3401      	adds	r4, #1
 8001ea6:	9305      	str	r3, [sp, #20]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f04f 0c0a 	mov.w	ip, #10
 8001eae:	4620      	mov	r0, r4
 8001eb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001eb4:	3a30      	subs	r2, #48	; 0x30
 8001eb6:	2a09      	cmp	r2, #9
 8001eb8:	d903      	bls.n	8001ec2 <_svfiprintf_r+0x1a6>
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0c6      	beq.n	8001e4c <_svfiprintf_r+0x130>
 8001ebe:	9105      	str	r1, [sp, #20]
 8001ec0:	e7c4      	b.n	8001e4c <_svfiprintf_r+0x130>
 8001ec2:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e7f0      	b.n	8001eae <_svfiprintf_r+0x192>
 8001ecc:	ab03      	add	r3, sp, #12
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	462a      	mov	r2, r5
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <_svfiprintf_r+0x1f4>)
 8001ed4:	a904      	add	r1, sp, #16
 8001ed6:	4638      	mov	r0, r7
 8001ed8:	f3af 8000 	nop.w
 8001edc:	1c42      	adds	r2, r0, #1
 8001ede:	4606      	mov	r6, r0
 8001ee0:	d1d6      	bne.n	8001e90 <_svfiprintf_r+0x174>
 8001ee2:	89ab      	ldrh	r3, [r5, #12]
 8001ee4:	065b      	lsls	r3, r3, #25
 8001ee6:	f53f af2d 	bmi.w	8001d44 <_svfiprintf_r+0x28>
 8001eea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001eec:	b01d      	add	sp, #116	; 0x74
 8001eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ef2:	ab03      	add	r3, sp, #12
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	462a      	mov	r2, r5
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <_svfiprintf_r+0x1f4>)
 8001efa:	a904      	add	r1, sp, #16
 8001efc:	4638      	mov	r0, r7
 8001efe:	f000 f879 	bl	8001ff4 <_printf_i>
 8001f02:	e7eb      	b.n	8001edc <_svfiprintf_r+0x1c0>
 8001f04:	0800260c 	.word	0x0800260c
 8001f08:	08002616 	.word	0x08002616
 8001f0c:	00000000 	.word	0x00000000
 8001f10:	08001c69 	.word	0x08001c69
 8001f14:	08002612 	.word	0x08002612

08001f18 <_printf_common>:
 8001f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f1c:	4616      	mov	r6, r2
 8001f1e:	4699      	mov	r9, r3
 8001f20:	688a      	ldr	r2, [r1, #8]
 8001f22:	690b      	ldr	r3, [r1, #16]
 8001f24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	bfb8      	it	lt
 8001f2c:	4613      	movlt	r3, r2
 8001f2e:	6033      	str	r3, [r6, #0]
 8001f30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f34:	4607      	mov	r7, r0
 8001f36:	460c      	mov	r4, r1
 8001f38:	b10a      	cbz	r2, 8001f3e <_printf_common+0x26>
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	6033      	str	r3, [r6, #0]
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	0699      	lsls	r1, r3, #26
 8001f42:	bf42      	ittt	mi
 8001f44:	6833      	ldrmi	r3, [r6, #0]
 8001f46:	3302      	addmi	r3, #2
 8001f48:	6033      	strmi	r3, [r6, #0]
 8001f4a:	6825      	ldr	r5, [r4, #0]
 8001f4c:	f015 0506 	ands.w	r5, r5, #6
 8001f50:	d106      	bne.n	8001f60 <_printf_common+0x48>
 8001f52:	f104 0a19 	add.w	sl, r4, #25
 8001f56:	68e3      	ldr	r3, [r4, #12]
 8001f58:	6832      	ldr	r2, [r6, #0]
 8001f5a:	1a9b      	subs	r3, r3, r2
 8001f5c:	42ab      	cmp	r3, r5
 8001f5e:	dc26      	bgt.n	8001fae <_printf_common+0x96>
 8001f60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001f64:	1e13      	subs	r3, r2, #0
 8001f66:	6822      	ldr	r2, [r4, #0]
 8001f68:	bf18      	it	ne
 8001f6a:	2301      	movne	r3, #1
 8001f6c:	0692      	lsls	r2, r2, #26
 8001f6e:	d42b      	bmi.n	8001fc8 <_printf_common+0xb0>
 8001f70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f74:	4649      	mov	r1, r9
 8001f76:	4638      	mov	r0, r7
 8001f78:	47c0      	blx	r8
 8001f7a:	3001      	adds	r0, #1
 8001f7c:	d01e      	beq.n	8001fbc <_printf_common+0xa4>
 8001f7e:	6823      	ldr	r3, [r4, #0]
 8001f80:	6922      	ldr	r2, [r4, #16]
 8001f82:	f003 0306 	and.w	r3, r3, #6
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	bf02      	ittt	eq
 8001f8a:	68e5      	ldreq	r5, [r4, #12]
 8001f8c:	6833      	ldreq	r3, [r6, #0]
 8001f8e:	1aed      	subeq	r5, r5, r3
 8001f90:	68a3      	ldr	r3, [r4, #8]
 8001f92:	bf0c      	ite	eq
 8001f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f98:	2500      	movne	r5, #0
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	bfc4      	itt	gt
 8001f9e:	1a9b      	subgt	r3, r3, r2
 8001fa0:	18ed      	addgt	r5, r5, r3
 8001fa2:	2600      	movs	r6, #0
 8001fa4:	341a      	adds	r4, #26
 8001fa6:	42b5      	cmp	r5, r6
 8001fa8:	d11a      	bne.n	8001fe0 <_printf_common+0xc8>
 8001faa:	2000      	movs	r0, #0
 8001fac:	e008      	b.n	8001fc0 <_printf_common+0xa8>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	4652      	mov	r2, sl
 8001fb2:	4649      	mov	r1, r9
 8001fb4:	4638      	mov	r0, r7
 8001fb6:	47c0      	blx	r8
 8001fb8:	3001      	adds	r0, #1
 8001fba:	d103      	bne.n	8001fc4 <_printf_common+0xac>
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fc4:	3501      	adds	r5, #1
 8001fc6:	e7c6      	b.n	8001f56 <_printf_common+0x3e>
 8001fc8:	18e1      	adds	r1, r4, r3
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	2030      	movs	r0, #48	; 0x30
 8001fce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001fd2:	4422      	add	r2, r4
 8001fd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001fd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001fdc:	3302      	adds	r3, #2
 8001fde:	e7c7      	b.n	8001f70 <_printf_common+0x58>
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	4622      	mov	r2, r4
 8001fe4:	4649      	mov	r1, r9
 8001fe6:	4638      	mov	r0, r7
 8001fe8:	47c0      	blx	r8
 8001fea:	3001      	adds	r0, #1
 8001fec:	d0e6      	beq.n	8001fbc <_printf_common+0xa4>
 8001fee:	3601      	adds	r6, #1
 8001ff0:	e7d9      	b.n	8001fa6 <_printf_common+0x8e>
	...

08001ff4 <_printf_i>:
 8001ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ff8:	7e0f      	ldrb	r7, [r1, #24]
 8001ffa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001ffc:	2f78      	cmp	r7, #120	; 0x78
 8001ffe:	4691      	mov	r9, r2
 8002000:	4680      	mov	r8, r0
 8002002:	460c      	mov	r4, r1
 8002004:	469a      	mov	sl, r3
 8002006:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800200a:	d807      	bhi.n	800201c <_printf_i+0x28>
 800200c:	2f62      	cmp	r7, #98	; 0x62
 800200e:	d80a      	bhi.n	8002026 <_printf_i+0x32>
 8002010:	2f00      	cmp	r7, #0
 8002012:	f000 80d4 	beq.w	80021be <_printf_i+0x1ca>
 8002016:	2f58      	cmp	r7, #88	; 0x58
 8002018:	f000 80c0 	beq.w	800219c <_printf_i+0x1a8>
 800201c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002020:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002024:	e03a      	b.n	800209c <_printf_i+0xa8>
 8002026:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800202a:	2b15      	cmp	r3, #21
 800202c:	d8f6      	bhi.n	800201c <_printf_i+0x28>
 800202e:	a101      	add	r1, pc, #4	; (adr r1, 8002034 <_printf_i+0x40>)
 8002030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002034:	0800208d 	.word	0x0800208d
 8002038:	080020a1 	.word	0x080020a1
 800203c:	0800201d 	.word	0x0800201d
 8002040:	0800201d 	.word	0x0800201d
 8002044:	0800201d 	.word	0x0800201d
 8002048:	0800201d 	.word	0x0800201d
 800204c:	080020a1 	.word	0x080020a1
 8002050:	0800201d 	.word	0x0800201d
 8002054:	0800201d 	.word	0x0800201d
 8002058:	0800201d 	.word	0x0800201d
 800205c:	0800201d 	.word	0x0800201d
 8002060:	080021a5 	.word	0x080021a5
 8002064:	080020cd 	.word	0x080020cd
 8002068:	0800215f 	.word	0x0800215f
 800206c:	0800201d 	.word	0x0800201d
 8002070:	0800201d 	.word	0x0800201d
 8002074:	080021c7 	.word	0x080021c7
 8002078:	0800201d 	.word	0x0800201d
 800207c:	080020cd 	.word	0x080020cd
 8002080:	0800201d 	.word	0x0800201d
 8002084:	0800201d 	.word	0x0800201d
 8002088:	08002167 	.word	0x08002167
 800208c:	682b      	ldr	r3, [r5, #0]
 800208e:	1d1a      	adds	r2, r3, #4
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	602a      	str	r2, [r5, #0]
 8002094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002098:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800209c:	2301      	movs	r3, #1
 800209e:	e09f      	b.n	80021e0 <_printf_i+0x1ec>
 80020a0:	6820      	ldr	r0, [r4, #0]
 80020a2:	682b      	ldr	r3, [r5, #0]
 80020a4:	0607      	lsls	r7, r0, #24
 80020a6:	f103 0104 	add.w	r1, r3, #4
 80020aa:	6029      	str	r1, [r5, #0]
 80020ac:	d501      	bpl.n	80020b2 <_printf_i+0xbe>
 80020ae:	681e      	ldr	r6, [r3, #0]
 80020b0:	e003      	b.n	80020ba <_printf_i+0xc6>
 80020b2:	0646      	lsls	r6, r0, #25
 80020b4:	d5fb      	bpl.n	80020ae <_printf_i+0xba>
 80020b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80020ba:	2e00      	cmp	r6, #0
 80020bc:	da03      	bge.n	80020c6 <_printf_i+0xd2>
 80020be:	232d      	movs	r3, #45	; 0x2d
 80020c0:	4276      	negs	r6, r6
 80020c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020c6:	485a      	ldr	r0, [pc, #360]	; (8002230 <_printf_i+0x23c>)
 80020c8:	230a      	movs	r3, #10
 80020ca:	e012      	b.n	80020f2 <_printf_i+0xfe>
 80020cc:	682b      	ldr	r3, [r5, #0]
 80020ce:	6820      	ldr	r0, [r4, #0]
 80020d0:	1d19      	adds	r1, r3, #4
 80020d2:	6029      	str	r1, [r5, #0]
 80020d4:	0605      	lsls	r5, r0, #24
 80020d6:	d501      	bpl.n	80020dc <_printf_i+0xe8>
 80020d8:	681e      	ldr	r6, [r3, #0]
 80020da:	e002      	b.n	80020e2 <_printf_i+0xee>
 80020dc:	0641      	lsls	r1, r0, #25
 80020de:	d5fb      	bpl.n	80020d8 <_printf_i+0xe4>
 80020e0:	881e      	ldrh	r6, [r3, #0]
 80020e2:	4853      	ldr	r0, [pc, #332]	; (8002230 <_printf_i+0x23c>)
 80020e4:	2f6f      	cmp	r7, #111	; 0x6f
 80020e6:	bf0c      	ite	eq
 80020e8:	2308      	moveq	r3, #8
 80020ea:	230a      	movne	r3, #10
 80020ec:	2100      	movs	r1, #0
 80020ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80020f2:	6865      	ldr	r5, [r4, #4]
 80020f4:	60a5      	str	r5, [r4, #8]
 80020f6:	2d00      	cmp	r5, #0
 80020f8:	bfa2      	ittt	ge
 80020fa:	6821      	ldrge	r1, [r4, #0]
 80020fc:	f021 0104 	bicge.w	r1, r1, #4
 8002100:	6021      	strge	r1, [r4, #0]
 8002102:	b90e      	cbnz	r6, 8002108 <_printf_i+0x114>
 8002104:	2d00      	cmp	r5, #0
 8002106:	d04b      	beq.n	80021a0 <_printf_i+0x1ac>
 8002108:	4615      	mov	r5, r2
 800210a:	fbb6 f1f3 	udiv	r1, r6, r3
 800210e:	fb03 6711 	mls	r7, r3, r1, r6
 8002112:	5dc7      	ldrb	r7, [r0, r7]
 8002114:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002118:	4637      	mov	r7, r6
 800211a:	42bb      	cmp	r3, r7
 800211c:	460e      	mov	r6, r1
 800211e:	d9f4      	bls.n	800210a <_printf_i+0x116>
 8002120:	2b08      	cmp	r3, #8
 8002122:	d10b      	bne.n	800213c <_printf_i+0x148>
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	07de      	lsls	r6, r3, #31
 8002128:	d508      	bpl.n	800213c <_printf_i+0x148>
 800212a:	6923      	ldr	r3, [r4, #16]
 800212c:	6861      	ldr	r1, [r4, #4]
 800212e:	4299      	cmp	r1, r3
 8002130:	bfde      	ittt	le
 8002132:	2330      	movle	r3, #48	; 0x30
 8002134:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002138:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800213c:	1b52      	subs	r2, r2, r5
 800213e:	6122      	str	r2, [r4, #16]
 8002140:	f8cd a000 	str.w	sl, [sp]
 8002144:	464b      	mov	r3, r9
 8002146:	aa03      	add	r2, sp, #12
 8002148:	4621      	mov	r1, r4
 800214a:	4640      	mov	r0, r8
 800214c:	f7ff fee4 	bl	8001f18 <_printf_common>
 8002150:	3001      	adds	r0, #1
 8002152:	d14a      	bne.n	80021ea <_printf_i+0x1f6>
 8002154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002158:	b004      	add	sp, #16
 800215a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	f043 0320 	orr.w	r3, r3, #32
 8002164:	6023      	str	r3, [r4, #0]
 8002166:	4833      	ldr	r0, [pc, #204]	; (8002234 <_printf_i+0x240>)
 8002168:	2778      	movs	r7, #120	; 0x78
 800216a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800216e:	6823      	ldr	r3, [r4, #0]
 8002170:	6829      	ldr	r1, [r5, #0]
 8002172:	061f      	lsls	r7, r3, #24
 8002174:	f851 6b04 	ldr.w	r6, [r1], #4
 8002178:	d402      	bmi.n	8002180 <_printf_i+0x18c>
 800217a:	065f      	lsls	r7, r3, #25
 800217c:	bf48      	it	mi
 800217e:	b2b6      	uxthmi	r6, r6
 8002180:	07df      	lsls	r7, r3, #31
 8002182:	bf48      	it	mi
 8002184:	f043 0320 	orrmi.w	r3, r3, #32
 8002188:	6029      	str	r1, [r5, #0]
 800218a:	bf48      	it	mi
 800218c:	6023      	strmi	r3, [r4, #0]
 800218e:	b91e      	cbnz	r6, 8002198 <_printf_i+0x1a4>
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	f023 0320 	bic.w	r3, r3, #32
 8002196:	6023      	str	r3, [r4, #0]
 8002198:	2310      	movs	r3, #16
 800219a:	e7a7      	b.n	80020ec <_printf_i+0xf8>
 800219c:	4824      	ldr	r0, [pc, #144]	; (8002230 <_printf_i+0x23c>)
 800219e:	e7e4      	b.n	800216a <_printf_i+0x176>
 80021a0:	4615      	mov	r5, r2
 80021a2:	e7bd      	b.n	8002120 <_printf_i+0x12c>
 80021a4:	682b      	ldr	r3, [r5, #0]
 80021a6:	6826      	ldr	r6, [r4, #0]
 80021a8:	6961      	ldr	r1, [r4, #20]
 80021aa:	1d18      	adds	r0, r3, #4
 80021ac:	6028      	str	r0, [r5, #0]
 80021ae:	0635      	lsls	r5, r6, #24
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	d501      	bpl.n	80021b8 <_printf_i+0x1c4>
 80021b4:	6019      	str	r1, [r3, #0]
 80021b6:	e002      	b.n	80021be <_printf_i+0x1ca>
 80021b8:	0670      	lsls	r0, r6, #25
 80021ba:	d5fb      	bpl.n	80021b4 <_printf_i+0x1c0>
 80021bc:	8019      	strh	r1, [r3, #0]
 80021be:	2300      	movs	r3, #0
 80021c0:	6123      	str	r3, [r4, #16]
 80021c2:	4615      	mov	r5, r2
 80021c4:	e7bc      	b.n	8002140 <_printf_i+0x14c>
 80021c6:	682b      	ldr	r3, [r5, #0]
 80021c8:	1d1a      	adds	r2, r3, #4
 80021ca:	602a      	str	r2, [r5, #0]
 80021cc:	681d      	ldr	r5, [r3, #0]
 80021ce:	6862      	ldr	r2, [r4, #4]
 80021d0:	2100      	movs	r1, #0
 80021d2:	4628      	mov	r0, r5
 80021d4:	f7fd fffc 	bl	80001d0 <memchr>
 80021d8:	b108      	cbz	r0, 80021de <_printf_i+0x1ea>
 80021da:	1b40      	subs	r0, r0, r5
 80021dc:	6060      	str	r0, [r4, #4]
 80021de:	6863      	ldr	r3, [r4, #4]
 80021e0:	6123      	str	r3, [r4, #16]
 80021e2:	2300      	movs	r3, #0
 80021e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021e8:	e7aa      	b.n	8002140 <_printf_i+0x14c>
 80021ea:	6923      	ldr	r3, [r4, #16]
 80021ec:	462a      	mov	r2, r5
 80021ee:	4649      	mov	r1, r9
 80021f0:	4640      	mov	r0, r8
 80021f2:	47d0      	blx	sl
 80021f4:	3001      	adds	r0, #1
 80021f6:	d0ad      	beq.n	8002154 <_printf_i+0x160>
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	079b      	lsls	r3, r3, #30
 80021fc:	d413      	bmi.n	8002226 <_printf_i+0x232>
 80021fe:	68e0      	ldr	r0, [r4, #12]
 8002200:	9b03      	ldr	r3, [sp, #12]
 8002202:	4298      	cmp	r0, r3
 8002204:	bfb8      	it	lt
 8002206:	4618      	movlt	r0, r3
 8002208:	e7a6      	b.n	8002158 <_printf_i+0x164>
 800220a:	2301      	movs	r3, #1
 800220c:	4632      	mov	r2, r6
 800220e:	4649      	mov	r1, r9
 8002210:	4640      	mov	r0, r8
 8002212:	47d0      	blx	sl
 8002214:	3001      	adds	r0, #1
 8002216:	d09d      	beq.n	8002154 <_printf_i+0x160>
 8002218:	3501      	adds	r5, #1
 800221a:	68e3      	ldr	r3, [r4, #12]
 800221c:	9903      	ldr	r1, [sp, #12]
 800221e:	1a5b      	subs	r3, r3, r1
 8002220:	42ab      	cmp	r3, r5
 8002222:	dcf2      	bgt.n	800220a <_printf_i+0x216>
 8002224:	e7eb      	b.n	80021fe <_printf_i+0x20a>
 8002226:	2500      	movs	r5, #0
 8002228:	f104 0619 	add.w	r6, r4, #25
 800222c:	e7f5      	b.n	800221a <_printf_i+0x226>
 800222e:	bf00      	nop
 8002230:	0800261d 	.word	0x0800261d
 8002234:	0800262e 	.word	0x0800262e

08002238 <__sflush_r>:
 8002238:	898a      	ldrh	r2, [r1, #12]
 800223a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800223e:	4605      	mov	r5, r0
 8002240:	0710      	lsls	r0, r2, #28
 8002242:	460c      	mov	r4, r1
 8002244:	d458      	bmi.n	80022f8 <__sflush_r+0xc0>
 8002246:	684b      	ldr	r3, [r1, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	dc05      	bgt.n	8002258 <__sflush_r+0x20>
 800224c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	dc02      	bgt.n	8002258 <__sflush_r+0x20>
 8002252:	2000      	movs	r0, #0
 8002254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002258:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800225a:	2e00      	cmp	r6, #0
 800225c:	d0f9      	beq.n	8002252 <__sflush_r+0x1a>
 800225e:	2300      	movs	r3, #0
 8002260:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002264:	682f      	ldr	r7, [r5, #0]
 8002266:	6a21      	ldr	r1, [r4, #32]
 8002268:	602b      	str	r3, [r5, #0]
 800226a:	d032      	beq.n	80022d2 <__sflush_r+0x9a>
 800226c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800226e:	89a3      	ldrh	r3, [r4, #12]
 8002270:	075a      	lsls	r2, r3, #29
 8002272:	d505      	bpl.n	8002280 <__sflush_r+0x48>
 8002274:	6863      	ldr	r3, [r4, #4]
 8002276:	1ac0      	subs	r0, r0, r3
 8002278:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800227a:	b10b      	cbz	r3, 8002280 <__sflush_r+0x48>
 800227c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800227e:	1ac0      	subs	r0, r0, r3
 8002280:	2300      	movs	r3, #0
 8002282:	4602      	mov	r2, r0
 8002284:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002286:	6a21      	ldr	r1, [r4, #32]
 8002288:	4628      	mov	r0, r5
 800228a:	47b0      	blx	r6
 800228c:	1c43      	adds	r3, r0, #1
 800228e:	89a3      	ldrh	r3, [r4, #12]
 8002290:	d106      	bne.n	80022a0 <__sflush_r+0x68>
 8002292:	6829      	ldr	r1, [r5, #0]
 8002294:	291d      	cmp	r1, #29
 8002296:	d82b      	bhi.n	80022f0 <__sflush_r+0xb8>
 8002298:	4a29      	ldr	r2, [pc, #164]	; (8002340 <__sflush_r+0x108>)
 800229a:	410a      	asrs	r2, r1
 800229c:	07d6      	lsls	r6, r2, #31
 800229e:	d427      	bmi.n	80022f0 <__sflush_r+0xb8>
 80022a0:	2200      	movs	r2, #0
 80022a2:	6062      	str	r2, [r4, #4]
 80022a4:	04d9      	lsls	r1, r3, #19
 80022a6:	6922      	ldr	r2, [r4, #16]
 80022a8:	6022      	str	r2, [r4, #0]
 80022aa:	d504      	bpl.n	80022b6 <__sflush_r+0x7e>
 80022ac:	1c42      	adds	r2, r0, #1
 80022ae:	d101      	bne.n	80022b4 <__sflush_r+0x7c>
 80022b0:	682b      	ldr	r3, [r5, #0]
 80022b2:	b903      	cbnz	r3, 80022b6 <__sflush_r+0x7e>
 80022b4:	6560      	str	r0, [r4, #84]	; 0x54
 80022b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022b8:	602f      	str	r7, [r5, #0]
 80022ba:	2900      	cmp	r1, #0
 80022bc:	d0c9      	beq.n	8002252 <__sflush_r+0x1a>
 80022be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022c2:	4299      	cmp	r1, r3
 80022c4:	d002      	beq.n	80022cc <__sflush_r+0x94>
 80022c6:	4628      	mov	r0, r5
 80022c8:	f7ff fbd6 	bl	8001a78 <_free_r>
 80022cc:	2000      	movs	r0, #0
 80022ce:	6360      	str	r0, [r4, #52]	; 0x34
 80022d0:	e7c0      	b.n	8002254 <__sflush_r+0x1c>
 80022d2:	2301      	movs	r3, #1
 80022d4:	4628      	mov	r0, r5
 80022d6:	47b0      	blx	r6
 80022d8:	1c41      	adds	r1, r0, #1
 80022da:	d1c8      	bne.n	800226e <__sflush_r+0x36>
 80022dc:	682b      	ldr	r3, [r5, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0c5      	beq.n	800226e <__sflush_r+0x36>
 80022e2:	2b1d      	cmp	r3, #29
 80022e4:	d001      	beq.n	80022ea <__sflush_r+0xb2>
 80022e6:	2b16      	cmp	r3, #22
 80022e8:	d101      	bne.n	80022ee <__sflush_r+0xb6>
 80022ea:	602f      	str	r7, [r5, #0]
 80022ec:	e7b1      	b.n	8002252 <__sflush_r+0x1a>
 80022ee:	89a3      	ldrh	r3, [r4, #12]
 80022f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022f4:	81a3      	strh	r3, [r4, #12]
 80022f6:	e7ad      	b.n	8002254 <__sflush_r+0x1c>
 80022f8:	690f      	ldr	r7, [r1, #16]
 80022fa:	2f00      	cmp	r7, #0
 80022fc:	d0a9      	beq.n	8002252 <__sflush_r+0x1a>
 80022fe:	0793      	lsls	r3, r2, #30
 8002300:	680e      	ldr	r6, [r1, #0]
 8002302:	bf08      	it	eq
 8002304:	694b      	ldreq	r3, [r1, #20]
 8002306:	600f      	str	r7, [r1, #0]
 8002308:	bf18      	it	ne
 800230a:	2300      	movne	r3, #0
 800230c:	eba6 0807 	sub.w	r8, r6, r7
 8002310:	608b      	str	r3, [r1, #8]
 8002312:	f1b8 0f00 	cmp.w	r8, #0
 8002316:	dd9c      	ble.n	8002252 <__sflush_r+0x1a>
 8002318:	6a21      	ldr	r1, [r4, #32]
 800231a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800231c:	4643      	mov	r3, r8
 800231e:	463a      	mov	r2, r7
 8002320:	4628      	mov	r0, r5
 8002322:	47b0      	blx	r6
 8002324:	2800      	cmp	r0, #0
 8002326:	dc06      	bgt.n	8002336 <__sflush_r+0xfe>
 8002328:	89a3      	ldrh	r3, [r4, #12]
 800232a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800232e:	81a3      	strh	r3, [r4, #12]
 8002330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002334:	e78e      	b.n	8002254 <__sflush_r+0x1c>
 8002336:	4407      	add	r7, r0
 8002338:	eba8 0800 	sub.w	r8, r8, r0
 800233c:	e7e9      	b.n	8002312 <__sflush_r+0xda>
 800233e:	bf00      	nop
 8002340:	dfbffffe 	.word	0xdfbffffe

08002344 <_fflush_r>:
 8002344:	b538      	push	{r3, r4, r5, lr}
 8002346:	690b      	ldr	r3, [r1, #16]
 8002348:	4605      	mov	r5, r0
 800234a:	460c      	mov	r4, r1
 800234c:	b913      	cbnz	r3, 8002354 <_fflush_r+0x10>
 800234e:	2500      	movs	r5, #0
 8002350:	4628      	mov	r0, r5
 8002352:	bd38      	pop	{r3, r4, r5, pc}
 8002354:	b118      	cbz	r0, 800235e <_fflush_r+0x1a>
 8002356:	6a03      	ldr	r3, [r0, #32]
 8002358:	b90b      	cbnz	r3, 800235e <_fflush_r+0x1a>
 800235a:	f7ff f987 	bl	800166c <__sinit>
 800235e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f3      	beq.n	800234e <_fflush_r+0xa>
 8002366:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002368:	07d0      	lsls	r0, r2, #31
 800236a:	d404      	bmi.n	8002376 <_fflush_r+0x32>
 800236c:	0599      	lsls	r1, r3, #22
 800236e:	d402      	bmi.n	8002376 <_fflush_r+0x32>
 8002370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002372:	f7ff fb7e 	bl	8001a72 <__retarget_lock_acquire_recursive>
 8002376:	4628      	mov	r0, r5
 8002378:	4621      	mov	r1, r4
 800237a:	f7ff ff5d 	bl	8002238 <__sflush_r>
 800237e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002380:	07da      	lsls	r2, r3, #31
 8002382:	4605      	mov	r5, r0
 8002384:	d4e4      	bmi.n	8002350 <_fflush_r+0xc>
 8002386:	89a3      	ldrh	r3, [r4, #12]
 8002388:	059b      	lsls	r3, r3, #22
 800238a:	d4e1      	bmi.n	8002350 <_fflush_r+0xc>
 800238c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800238e:	f7ff fb71 	bl	8001a74 <__retarget_lock_release_recursive>
 8002392:	e7dd      	b.n	8002350 <_fflush_r+0xc>

08002394 <__swhatbuf_r>:
 8002394:	b570      	push	{r4, r5, r6, lr}
 8002396:	460c      	mov	r4, r1
 8002398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800239c:	2900      	cmp	r1, #0
 800239e:	b096      	sub	sp, #88	; 0x58
 80023a0:	4615      	mov	r5, r2
 80023a2:	461e      	mov	r6, r3
 80023a4:	da0d      	bge.n	80023c2 <__swhatbuf_r+0x2e>
 80023a6:	89a3      	ldrh	r3, [r4, #12]
 80023a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80023ac:	f04f 0100 	mov.w	r1, #0
 80023b0:	bf0c      	ite	eq
 80023b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80023b6:	2340      	movne	r3, #64	; 0x40
 80023b8:	2000      	movs	r0, #0
 80023ba:	6031      	str	r1, [r6, #0]
 80023bc:	602b      	str	r3, [r5, #0]
 80023be:	b016      	add	sp, #88	; 0x58
 80023c0:	bd70      	pop	{r4, r5, r6, pc}
 80023c2:	466a      	mov	r2, sp
 80023c4:	f000 f862 	bl	800248c <_fstat_r>
 80023c8:	2800      	cmp	r0, #0
 80023ca:	dbec      	blt.n	80023a6 <__swhatbuf_r+0x12>
 80023cc:	9901      	ldr	r1, [sp, #4]
 80023ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80023d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80023d6:	4259      	negs	r1, r3
 80023d8:	4159      	adcs	r1, r3
 80023da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023de:	e7eb      	b.n	80023b8 <__swhatbuf_r+0x24>

080023e0 <__smakebuf_r>:
 80023e0:	898b      	ldrh	r3, [r1, #12]
 80023e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80023e4:	079d      	lsls	r5, r3, #30
 80023e6:	4606      	mov	r6, r0
 80023e8:	460c      	mov	r4, r1
 80023ea:	d507      	bpl.n	80023fc <__smakebuf_r+0x1c>
 80023ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80023f0:	6023      	str	r3, [r4, #0]
 80023f2:	6123      	str	r3, [r4, #16]
 80023f4:	2301      	movs	r3, #1
 80023f6:	6163      	str	r3, [r4, #20]
 80023f8:	b002      	add	sp, #8
 80023fa:	bd70      	pop	{r4, r5, r6, pc}
 80023fc:	ab01      	add	r3, sp, #4
 80023fe:	466a      	mov	r2, sp
 8002400:	f7ff ffc8 	bl	8002394 <__swhatbuf_r>
 8002404:	9900      	ldr	r1, [sp, #0]
 8002406:	4605      	mov	r5, r0
 8002408:	4630      	mov	r0, r6
 800240a:	f7ff fba1 	bl	8001b50 <_malloc_r>
 800240e:	b948      	cbnz	r0, 8002424 <__smakebuf_r+0x44>
 8002410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002414:	059a      	lsls	r2, r3, #22
 8002416:	d4ef      	bmi.n	80023f8 <__smakebuf_r+0x18>
 8002418:	f023 0303 	bic.w	r3, r3, #3
 800241c:	f043 0302 	orr.w	r3, r3, #2
 8002420:	81a3      	strh	r3, [r4, #12]
 8002422:	e7e3      	b.n	80023ec <__smakebuf_r+0xc>
 8002424:	89a3      	ldrh	r3, [r4, #12]
 8002426:	6020      	str	r0, [r4, #0]
 8002428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800242c:	81a3      	strh	r3, [r4, #12]
 800242e:	9b00      	ldr	r3, [sp, #0]
 8002430:	6163      	str	r3, [r4, #20]
 8002432:	9b01      	ldr	r3, [sp, #4]
 8002434:	6120      	str	r0, [r4, #16]
 8002436:	b15b      	cbz	r3, 8002450 <__smakebuf_r+0x70>
 8002438:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800243c:	4630      	mov	r0, r6
 800243e:	f000 f837 	bl	80024b0 <_isatty_r>
 8002442:	b128      	cbz	r0, 8002450 <__smakebuf_r+0x70>
 8002444:	89a3      	ldrh	r3, [r4, #12]
 8002446:	f023 0303 	bic.w	r3, r3, #3
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	81a3      	strh	r3, [r4, #12]
 8002450:	89a3      	ldrh	r3, [r4, #12]
 8002452:	431d      	orrs	r5, r3
 8002454:	81a5      	strh	r5, [r4, #12]
 8002456:	e7cf      	b.n	80023f8 <__smakebuf_r+0x18>

08002458 <memmove>:
 8002458:	4288      	cmp	r0, r1
 800245a:	b510      	push	{r4, lr}
 800245c:	eb01 0402 	add.w	r4, r1, r2
 8002460:	d902      	bls.n	8002468 <memmove+0x10>
 8002462:	4284      	cmp	r4, r0
 8002464:	4623      	mov	r3, r4
 8002466:	d807      	bhi.n	8002478 <memmove+0x20>
 8002468:	1e43      	subs	r3, r0, #1
 800246a:	42a1      	cmp	r1, r4
 800246c:	d008      	beq.n	8002480 <memmove+0x28>
 800246e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002472:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002476:	e7f8      	b.n	800246a <memmove+0x12>
 8002478:	4402      	add	r2, r0
 800247a:	4601      	mov	r1, r0
 800247c:	428a      	cmp	r2, r1
 800247e:	d100      	bne.n	8002482 <memmove+0x2a>
 8002480:	bd10      	pop	{r4, pc}
 8002482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800248a:	e7f7      	b.n	800247c <memmove+0x24>

0800248c <_fstat_r>:
 800248c:	b538      	push	{r3, r4, r5, lr}
 800248e:	4d07      	ldr	r5, [pc, #28]	; (80024ac <_fstat_r+0x20>)
 8002490:	2300      	movs	r3, #0
 8002492:	4604      	mov	r4, r0
 8002494:	4608      	mov	r0, r1
 8002496:	4611      	mov	r1, r2
 8002498:	602b      	str	r3, [r5, #0]
 800249a:	f7fe f9a6 	bl	80007ea <_fstat>
 800249e:	1c43      	adds	r3, r0, #1
 80024a0:	d102      	bne.n	80024a8 <_fstat_r+0x1c>
 80024a2:	682b      	ldr	r3, [r5, #0]
 80024a4:	b103      	cbz	r3, 80024a8 <_fstat_r+0x1c>
 80024a6:	6023      	str	r3, [r4, #0]
 80024a8:	bd38      	pop	{r3, r4, r5, pc}
 80024aa:	bf00      	nop
 80024ac:	200001c8 	.word	0x200001c8

080024b0 <_isatty_r>:
 80024b0:	b538      	push	{r3, r4, r5, lr}
 80024b2:	4d06      	ldr	r5, [pc, #24]	; (80024cc <_isatty_r+0x1c>)
 80024b4:	2300      	movs	r3, #0
 80024b6:	4604      	mov	r4, r0
 80024b8:	4608      	mov	r0, r1
 80024ba:	602b      	str	r3, [r5, #0]
 80024bc:	f7fe f9a5 	bl	800080a <_isatty>
 80024c0:	1c43      	adds	r3, r0, #1
 80024c2:	d102      	bne.n	80024ca <_isatty_r+0x1a>
 80024c4:	682b      	ldr	r3, [r5, #0]
 80024c6:	b103      	cbz	r3, 80024ca <_isatty_r+0x1a>
 80024c8:	6023      	str	r3, [r4, #0]
 80024ca:	bd38      	pop	{r3, r4, r5, pc}
 80024cc:	200001c8 	.word	0x200001c8

080024d0 <_sbrk_r>:
 80024d0:	b538      	push	{r3, r4, r5, lr}
 80024d2:	4d06      	ldr	r5, [pc, #24]	; (80024ec <_sbrk_r+0x1c>)
 80024d4:	2300      	movs	r3, #0
 80024d6:	4604      	mov	r4, r0
 80024d8:	4608      	mov	r0, r1
 80024da:	602b      	str	r3, [r5, #0]
 80024dc:	f7fe f9ae 	bl	800083c <_sbrk>
 80024e0:	1c43      	adds	r3, r0, #1
 80024e2:	d102      	bne.n	80024ea <_sbrk_r+0x1a>
 80024e4:	682b      	ldr	r3, [r5, #0]
 80024e6:	b103      	cbz	r3, 80024ea <_sbrk_r+0x1a>
 80024e8:	6023      	str	r3, [r4, #0]
 80024ea:	bd38      	pop	{r3, r4, r5, pc}
 80024ec:	200001c8 	.word	0x200001c8

080024f0 <memcpy>:
 80024f0:	440a      	add	r2, r1
 80024f2:	4291      	cmp	r1, r2
 80024f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80024f8:	d100      	bne.n	80024fc <memcpy+0xc>
 80024fa:	4770      	bx	lr
 80024fc:	b510      	push	{r4, lr}
 80024fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002502:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002506:	4291      	cmp	r1, r2
 8002508:	d1f9      	bne.n	80024fe <memcpy+0xe>
 800250a:	bd10      	pop	{r4, pc}

0800250c <_realloc_r>:
 800250c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002510:	4680      	mov	r8, r0
 8002512:	4614      	mov	r4, r2
 8002514:	460e      	mov	r6, r1
 8002516:	b921      	cbnz	r1, 8002522 <_realloc_r+0x16>
 8002518:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800251c:	4611      	mov	r1, r2
 800251e:	f7ff bb17 	b.w	8001b50 <_malloc_r>
 8002522:	b92a      	cbnz	r2, 8002530 <_realloc_r+0x24>
 8002524:	f7ff faa8 	bl	8001a78 <_free_r>
 8002528:	4625      	mov	r5, r4
 800252a:	4628      	mov	r0, r5
 800252c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002530:	f000 f81b 	bl	800256a <_malloc_usable_size_r>
 8002534:	4284      	cmp	r4, r0
 8002536:	4607      	mov	r7, r0
 8002538:	d802      	bhi.n	8002540 <_realloc_r+0x34>
 800253a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800253e:	d812      	bhi.n	8002566 <_realloc_r+0x5a>
 8002540:	4621      	mov	r1, r4
 8002542:	4640      	mov	r0, r8
 8002544:	f7ff fb04 	bl	8001b50 <_malloc_r>
 8002548:	4605      	mov	r5, r0
 800254a:	2800      	cmp	r0, #0
 800254c:	d0ed      	beq.n	800252a <_realloc_r+0x1e>
 800254e:	42bc      	cmp	r4, r7
 8002550:	4622      	mov	r2, r4
 8002552:	4631      	mov	r1, r6
 8002554:	bf28      	it	cs
 8002556:	463a      	movcs	r2, r7
 8002558:	f7ff ffca 	bl	80024f0 <memcpy>
 800255c:	4631      	mov	r1, r6
 800255e:	4640      	mov	r0, r8
 8002560:	f7ff fa8a 	bl	8001a78 <_free_r>
 8002564:	e7e1      	b.n	800252a <_realloc_r+0x1e>
 8002566:	4635      	mov	r5, r6
 8002568:	e7df      	b.n	800252a <_realloc_r+0x1e>

0800256a <_malloc_usable_size_r>:
 800256a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800256e:	1f18      	subs	r0, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	bfbc      	itt	lt
 8002574:	580b      	ldrlt	r3, [r1, r0]
 8002576:	18c0      	addlt	r0, r0, r3
 8002578:	4770      	bx	lr
	...

0800257c <_init>:
 800257c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257e:	bf00      	nop
 8002580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002582:	bc08      	pop	{r3}
 8002584:	469e      	mov	lr, r3
 8002586:	4770      	bx	lr

08002588 <_fini>:
 8002588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258a:	bf00      	nop
 800258c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258e:	bc08      	pop	{r3}
 8002590:	469e      	mov	lr, r3
 8002592:	4770      	bx	lr
