
006_TIM6_basic_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08002fb0  08002fb0  00012fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003050  08003050  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003050  08003050  00013050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003058  08003058  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003058  08003058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800305c  0800305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000001b8  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   000075db  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000144e  00000000  00000000  000276b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000888  00000000  00000000  00028b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000679  00000000  00000000  00029390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021e1d  00000000  00000000  00029a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000094be  00000000  00000000  0004b826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce61b  00000000  00000000  00054ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002c24  00000000  00000000  00123300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  00125f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002f98 	.word	0x08002f98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08002f98 	.word	0x08002f98

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <SysTick_Handler>:
 */
#include "stm32f4xx_hal.h"


void SysTick_Handler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000570:	f000 faf4 	bl	8000b5c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000574:	f000 fc40 	bl	8000df8 <HAL_SYSTICK_IRQHandler>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}

0800057c <main>:


/**********************************************  [main]  *****************************************/

int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	/*Application initializations*/
	MAIN_Init();
 8000580:	f000 f81c 	bl	80005bc <MAIN_Init>

	HAL_TIM_Base_Start(&timer6_hn);
 8000584:	480a      	ldr	r0, [pc, #40]	; (80005b0 <main+0x34>)
 8000586:	f001 fae3 	bl	8001b50 <HAL_TIM_Base_Start>

	while(1)
	{
		while( !(TIM6->SR & TIM_SR_UIF_Msk) );
 800058a:	bf00      	nop
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <main+0x38>)
 800058e:	691b      	ldr	r3, [r3, #16]
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	2b00      	cmp	r3, #0
 8000596:	d0f9      	beq.n	800058c <main+0x10>
		TIM6->SR &= ~(1 << 0);
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <main+0x38>)
 800059a:	691b      	ldr	r3, [r3, #16]
 800059c:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <main+0x38>)
 800059e:	f023 0301 	bic.w	r3, r3, #1
 80005a2:	6113      	str	r3, [r2, #16]
		HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 80005a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <main+0x3c>)
 80005aa:	f000 fdcf 	bl	800114c <HAL_GPIO_TogglePin>
		while( !(TIM6->SR & TIM_SR_UIF_Msk) );
 80005ae:	e7ec      	b.n	800058a <main+0xe>
 80005b0:	20000084 	.word	0x20000084
 80005b4:	40001000 	.word	0x40001000
 80005b8:	40020c00 	.word	0x40020c00

080005bc <MAIN_Init>:



/*************************************************************************************************/
void MAIN_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	// HAL Initializations
	HAL_Init();
 80005c0:	f000 fa7a 	bl	8000ab8 <HAL_Init>

	// System Clock Configurations
	SystemClock_Config();
 80005c4:	f000 f808 	bl	80005d8 <SystemClock_Config>

	// Peripherals High Level Initializations

	PrintSystemClockInfo();
 80005c8:	f000 f852 	bl	8000670 <PrintSystemClockInfo>

	TIMER6_Init();
 80005cc:	f000 f8ae 	bl	800072c <TIMER6_Init>

	LED_Init();
 80005d0:	f000 f8ca 	bl	8000768 <LED_Init>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <SystemClock_Config>:


void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b092      	sub	sp, #72	; 0x48
 80005dc:	af00      	add	r7, sp, #0

	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0318 	add.w	r3, r7, #24
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fcfd 	bl	8001fe6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]


	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fa:	2302      	movs	r3, #2
 80005fc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000602:	2310      	movs	r3, #16
 8000604:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000606:	2301      	movs	r3, #1
 8000608:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	f107 0318 	add.w	r3, r7, #24
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fdb6 	bl	8001180 <HAL_RCC_OscConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x46>
	{
		Error_Handler();
 800061a:	f000 f8c3 	bl	80007a4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK |\
 800061e:	230f      	movs	r3, #15
 8000620:	607b      	str	r3, [r7, #4]
			RCC_CLOCKTYPE_HCLK   |\
			RCC_CLOCKTYPE_PCLK1  |\
			RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000634:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f001 f818 	bl	8001670 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000646:	f000 f8ad 	bl	80007a4 <Error_Handler>
	}

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800064a:	f001 f9fd 	bl	8001a48 <HAL_RCC_GetHCLKFreq>
 800064e:	4603      	mov	r3, r0
 8000650:	4a06      	ldr	r2, [pc, #24]	; (800066c <SystemClock_Config+0x94>)
 8000652:	fba2 2303 	umull	r2, r3, r2, r3
 8000656:	099b      	lsrs	r3, r3, #6
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fba4 	bl	8000da6 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800065e:	2004      	movs	r0, #4
 8000660:	f000 fbae 	bl	8000dc0 <HAL_SYSTICK_CLKSourceConfig>
}
 8000664:	bf00      	nop
 8000666:	3748      	adds	r7, #72	; 0x48
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	10624dd3 	.word	0x10624dd3

08000670 <PrintSystemClockInfo>:



void PrintSystemClockInfo(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b09a      	sub	sp, #104	; 0x68
 8000674:	af00      	add	r7, sp, #0
	char clock[100];

	memset(clock,0,sizeof(clock));
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2264      	movs	r2, #100	; 0x64
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fcb2 	bl	8001fe6 <memset>
	sprintf(clock ,"SYSCLK : %ld  \r\n", HAL_RCC_GetSysClockFreq());
 8000682:	f001 f8db 	bl	800183c <HAL_RCC_GetSysClockFreq>
 8000686:	4602      	mov	r2, r0
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	4923      	ldr	r1, [pc, #140]	; (8000718 <PrintSystemClockInfo+0xa8>)
 800068c:	4618      	mov	r0, r3
 800068e:	f001 fc47 	bl	8001f20 <siprintf>
	printf("%s",clock);
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4619      	mov	r1, r3
 8000696:	4821      	ldr	r0, [pc, #132]	; (800071c <PrintSystemClockInfo+0xac>)
 8000698:	f001 fc30 	bl	8001efc <iprintf>

	memset(clock,0,sizeof(clock));
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2264      	movs	r2, #100	; 0x64
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fc9f 	bl	8001fe6 <memset>
	sprintf(clock ,"HCLK   : %ld  \r\n", HAL_RCC_GetHCLKFreq());
 80006a8:	f001 f9ce 	bl	8001a48 <HAL_RCC_GetHCLKFreq>
 80006ac:	4602      	mov	r2, r0
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	491b      	ldr	r1, [pc, #108]	; (8000720 <PrintSystemClockInfo+0xb0>)
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 fc34 	bl	8001f20 <siprintf>
	printf("%s",clock);
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	4619      	mov	r1, r3
 80006bc:	4817      	ldr	r0, [pc, #92]	; (800071c <PrintSystemClockInfo+0xac>)
 80006be:	f001 fc1d 	bl	8001efc <iprintf>

	memset(clock,0,sizeof(clock));
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2264      	movs	r2, #100	; 0x64
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fc8c 	bl	8001fe6 <memset>
	sprintf(clock ,"PCLK1  : %ld  \r\n", HAL_RCC_GetPCLK1Freq());
 80006ce:	f001 f9c7 	bl	8001a60 <HAL_RCC_GetPCLK1Freq>
 80006d2:	4602      	mov	r2, r0
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4913      	ldr	r1, [pc, #76]	; (8000724 <PrintSystemClockInfo+0xb4>)
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 fc21 	bl	8001f20 <siprintf>
	printf("%s",clock);
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4619      	mov	r1, r3
 80006e2:	480e      	ldr	r0, [pc, #56]	; (800071c <PrintSystemClockInfo+0xac>)
 80006e4:	f001 fc0a 	bl	8001efc <iprintf>

	memset(clock,0,sizeof(clock));
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2264      	movs	r2, #100	; 0x64
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fc79 	bl	8001fe6 <memset>
	sprintf(clock ,"PCLK2  : %ld  \r\n", HAL_RCC_GetPCLK2Freq());
 80006f4:	f001 f9c8 	bl	8001a88 <HAL_RCC_GetPCLK2Freq>
 80006f8:	4602      	mov	r2, r0
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	490a      	ldr	r1, [pc, #40]	; (8000728 <PrintSystemClockInfo+0xb8>)
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fc0e 	bl	8001f20 <siprintf>
	printf("%s",clock);
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4619      	mov	r1, r3
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <PrintSystemClockInfo+0xac>)
 800070a:	f001 fbf7 	bl	8001efc <iprintf>
}
 800070e:	bf00      	nop
 8000710:	3768      	adds	r7, #104	; 0x68
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	08002fb0 	.word	0x08002fb0
 800071c:	08002fc4 	.word	0x08002fc4
 8000720:	08002fc8 	.word	0x08002fc8
 8000724:	08002fdc 	.word	0x08002fdc
 8000728:	08002ff0 	.word	0x08002ff0

0800072c <TIMER6_Init>:

void TIMER6_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	timer6_hn.Instance = TIM6;
 8000730:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <TIMER6_Init+0x34>)
 8000732:	4a0c      	ldr	r2, [pc, #48]	; (8000764 <TIMER6_Init+0x38>)
 8000734:	601a      	str	r2, [r3, #0]

	timer6_hn.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <TIMER6_Init+0x34>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
	timer6_hn.Init.Prescaler         = 24;
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <TIMER6_Init+0x34>)
 800073e:	2218      	movs	r2, #24
 8000740:	605a      	str	r2, [r3, #4]
	timer6_hn.Init.Period            = 64000-1;
 8000742:	4b07      	ldr	r3, [pc, #28]	; (8000760 <TIMER6_Init+0x34>)
 8000744:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000748:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&timer6_hn) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <TIMER6_Init+0x34>)
 800074c:	f001 f9b0 	bl	8001ab0 <HAL_TIM_Base_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <TIMER6_Init+0x2e>
	{
		Error_Handler();
 8000756:	f000 f825 	bl	80007a4 <Error_Handler>
	}
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000084 	.word	0x20000084
 8000764:	40001000 	.word	0x40001000

08000768 <LED_Init>:


void LED_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef led = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

	led.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
	led.Pin = RED_LED_PIN;
 8000780:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000784:	607b      	str	r3, [r7, #4]
	led.Speed = GPIO_SPEED_FAST;
 8000786:	2302      	movs	r3, #2
 8000788:	613b      	str	r3, [r7, #16]
	led.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RED_LED_PORT, &led);
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4619      	mov	r1, r3
 8000792:	4803      	ldr	r0, [pc, #12]	; (80007a0 <LED_Init+0x38>)
 8000794:	f000 fb3e 	bl	8000e14 <HAL_GPIO_Init>
}
 8000798:	bf00      	nop
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40020c00 	.word	0x40020c00

080007a4 <Error_Handler>:

void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
	while(1);
 80007a8:	e7fe      	b.n	80007a8 <Error_Handler+0x4>
	...

080007ac <HAL_MspInit>:
/*
 * LOW LEVEL PROCESSOR INITIALIZATION
 */

void HAL_MspInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
	/*
	 * 1. configure the priority group of the processor
	 */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b2:	2003      	movs	r0, #3
 80007b4:	f000 fac2 	bl	8000d3c <HAL_NVIC_SetPriorityGrouping>

	/*
	 * 2. Enable the required system exceptions
	 */
	SCB->SHCSR |= 0x7 << 16; //enable memMan, usage fault and bus fault
 80007b8:	4b29      	ldr	r3, [pc, #164]	; (8000860 <HAL_MspInit+0xb4>)
 80007ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007bc:	4a28      	ldr	r2, [pc, #160]	; (8000860 <HAL_MspInit+0xb4>)
 80007be:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80007c2:	6253      	str	r3, [r2, #36]	; 0x24


	/*
	 * 3. configure the priority of system exception
	 */
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	f06f 000b 	mvn.w	r0, #11
 80007cc:	f000 fac1 	bl	8000d52 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	f06f 000a 	mvn.w	r0, #10
 80007d8:	f000 fabb 	bl	8000d52 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	f06f 0009 	mvn.w	r0, #9
 80007e4:	f000 fab5 	bl	8000d52 <HAL_NVIC_SetPriority>


	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <HAL_MspInit+0xb8>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f0:	4a1c      	ldr	r2, [pc, #112]	; (8000864 <HAL_MspInit+0xb8>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	6313      	str	r3, [r2, #48]	; 0x30
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <HAL_MspInit+0xb8>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <HAL_MspInit+0xb8>)
 800080a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080c:	4a15      	ldr	r2, [pc, #84]	; (8000864 <HAL_MspInit+0xb8>)
 800080e:	f043 0302 	orr.w	r3, r3, #2
 8000812:	6313      	str	r3, [r2, #48]	; 0x30
 8000814:	4b13      	ldr	r3, [pc, #76]	; (8000864 <HAL_MspInit+0xb8>)
 8000816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000818:	f003 0302 	and.w	r3, r3, #2
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_MspInit+0xb8>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000828:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <HAL_MspInit+0xb8>)
 800082a:	f043 0304 	orr.w	r3, r3, #4
 800082e:	6313      	str	r3, [r2, #48]	; 0x30
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <HAL_MspInit+0xb8>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000834:	f003 0304 	and.w	r3, r3, #4
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_MspInit+0xb8>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <HAL_MspInit+0xb8>)
 8000846:	f043 0308 	orr.w	r3, r3, #8
 800084a:	6313      	str	r3, [r2, #48]	; 0x30
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_MspInit+0xb8>)
 800084e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000850:	f003 0308 	and.w	r3, r3, #8
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	683b      	ldr	r3, [r7, #0]
}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	e000ed00 	.word	0xe000ed00
 8000864:	40023800 	.word	0x40023800

08000868 <HAL_TIM_Base_MspInit>:

/*
 * LOW LEVEL PERIPHERALS INITIALIZATION
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM6_CLK_ENABLE();
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <HAL_TIM_Base_MspInit+0x3c>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <HAL_TIM_Base_MspInit+0x3c>)
 800087a:	f043 0310 	orr.w	r3, r3, #16
 800087e:	6413      	str	r3, [r2, #64]	; 0x40
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_TIM_Base_MspInit+0x3c>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	f003 0310 	and.w	r3, r3, #16
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]

	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800088c:	2036      	movs	r0, #54	; 0x36
 800088e:	f000 fa7c 	bl	8000d8a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	210f      	movs	r1, #15
 8000896:	2036      	movs	r0, #54	; 0x36
 8000898:	f000 fa5b 	bl	8000d52 <HAL_NVIC_SetPriority>
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800

080008a8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <ITM_SendChar+0x48>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <ITM_SendChar+0x48>)
 80008b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008bc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <ITM_SendChar+0x4c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a0c      	ldr	r2, [pc, #48]	; (80008f4 <ITM_SendChar+0x4c>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80008ca:	bf00      	nop
 80008cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d0f8      	beq.n	80008cc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80008da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	6013      	str	r3, [r2, #0]
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000edfc 	.word	0xe000edfc
 80008f4:	e0000e00 	.word	0xe0000e00

080008f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	e00a      	b.n	8000920 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800090a:	f3af 8000 	nop.w
 800090e:	4601      	mov	r1, r0
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	60ba      	str	r2, [r7, #8]
 8000916:	b2ca      	uxtb	r2, r1
 8000918:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	3301      	adds	r3, #1
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	429a      	cmp	r2, r3
 8000926:	dbf0      	blt.n	800090a <_read+0x12>
  }

  return len;
 8000928:	687b      	ldr	r3, [r7, #4]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b086      	sub	sp, #24
 8000936:	af00      	add	r7, sp, #0
 8000938:	60f8      	str	r0, [r7, #12]
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	e009      	b.n	8000958 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	60ba      	str	r2, [r7, #8]
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ffab 	bl	80008a8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	3301      	adds	r3, #1
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697a      	ldr	r2, [r7, #20]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	429a      	cmp	r2, r3
 800095e:	dbf1      	blt.n	8000944 <_write+0x12>
  }
  return len;
 8000960:	687b      	ldr	r3, [r7, #4]
}
 8000962:	4618      	mov	r0, r3
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <_close>:

int _close(int file)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
 800098a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000992:	605a      	str	r2, [r3, #4]
  return 0;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <_isatty>:

int _isatty(int file)
{
 80009a2:	b480      	push	{r7}
 80009a4:	b083      	sub	sp, #12
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009aa:	2301      	movs	r3, #1
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
	...

080009d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009dc:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <_sbrk+0x5c>)
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <_sbrk+0x60>)
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <_sbrk+0x64>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <_sbrk+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d207      	bcs.n	8000a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a04:	f001 fb3e 	bl	8002084 <__errno>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a12:	e009      	b.n	8000a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <_sbrk+0x64>)
 8000a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20020000 	.word	0x20020000
 8000a34:	00000400 	.word	0x00000400
 8000a38:	200000cc 	.word	0x200000cc
 8000a3c:	20000220 	.word	0x20000220

08000a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <SystemInit+0x20>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4a:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <SystemInit+0x20>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a68:	f7ff ffea 	bl	8000a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a6c:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a6e:	490d      	ldr	r1, [pc, #52]	; (8000aa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a70:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a84:	4c0a      	ldr	r4, [pc, #40]	; (8000ab0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a92:	f001 fafd 	bl	8002090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a96:	f7ff fd71 	bl	800057c <main>
  bx  lr    
 8000a9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000aa8:	08003060 	.word	0x08003060
  ldr r2, =_sbss
 8000aac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ab0:	20000220 	.word	0x20000220

08000ab4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC_IRQHandler>
	...

08000ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000abc:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <HAL_Init+0x40>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <HAL_Init+0x40>)
 8000ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ac6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <HAL_Init+0x40>)
 8000ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <HAL_Init+0x40>)
 8000ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	f000 f92b 	bl	8000d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f000 f808 	bl	8000afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aec:	f7ff fe5e 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023c00 	.word	0x40023c00

08000afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_InitTick+0x54>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_InitTick+0x58>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f943 	bl	8000da6 <HAL_SYSTICK_Config>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00e      	b.n	8000b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d80a      	bhi.n	8000b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b30:	2200      	movs	r2, #0
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b38:	f000 f90b 	bl	8000d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b3c:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <HAL_InitTick+0x5c>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e000      	b.n	8000b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000008 	.word	0x20000008
 8000b58:	20000004 	.word	0x20000004

08000b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x20>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x24>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_IncTick+0x24>)
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	200000d0 	.word	0x200000d0

08000b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return uwTick;
 8000b88:	4b03      	ldr	r3, [pc, #12]	; (8000b98 <HAL_GetTick+0x14>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	200000d0 	.word	0x200000d0

08000b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bce:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	60d3      	str	r3, [r2, #12]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <__NVIC_GetPriorityGrouping+0x18>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	f003 0307 	and.w	r3, r3, #7
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	db0b      	blt.n	8000c2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	f003 021f 	and.w	r2, r3, #31
 8000c18:	4907      	ldr	r1, [pc, #28]	; (8000c38 <__NVIC_EnableIRQ+0x38>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	095b      	lsrs	r3, r3, #5
 8000c20:	2001      	movs	r0, #1
 8000c22:	fa00 f202 	lsl.w	r2, r0, r2
 8000c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000e100 	.word	0xe000e100

08000c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	db0a      	blt.n	8000c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	490c      	ldr	r1, [pc, #48]	; (8000c88 <__NVIC_SetPriority+0x4c>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	0112      	lsls	r2, r2, #4
 8000c5c:	b2d2      	uxtb	r2, r2
 8000c5e:	440b      	add	r3, r1
 8000c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c64:	e00a      	b.n	8000c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4908      	ldr	r1, [pc, #32]	; (8000c8c <__NVIC_SetPriority+0x50>)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	3b04      	subs	r3, #4
 8000c74:	0112      	lsls	r2, r2, #4
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	440b      	add	r3, r1
 8000c7a:	761a      	strb	r2, [r3, #24]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000e100 	.word	0xe000e100
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b089      	sub	sp, #36	; 0x24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f1c3 0307 	rsb	r3, r3, #7
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	bf28      	it	cs
 8000cae:	2304      	movcs	r3, #4
 8000cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d902      	bls.n	8000cc0 <NVIC_EncodePriority+0x30>
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3b03      	subs	r3, #3
 8000cbe:	e000      	b.n	8000cc2 <NVIC_EncodePriority+0x32>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce2:	43d9      	mvns	r1, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	4313      	orrs	r3, r2
         );
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3724      	adds	r7, #36	; 0x24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
	...

08000cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d08:	d301      	bcc.n	8000d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e00f      	b.n	8000d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <SysTick_Config+0x40>)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d16:	210f      	movs	r1, #15
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d1c:	f7ff ff8e 	bl	8000c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <SysTick_Config+0x40>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <SysTick_Config+0x40>)
 8000d28:	2207      	movs	r2, #7
 8000d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	e000e010 	.word	0xe000e010

08000d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff ff29 	bl	8000b9c <__NVIC_SetPriorityGrouping>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b086      	sub	sp, #24
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	4603      	mov	r3, r0
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d64:	f7ff ff3e 	bl	8000be4 <__NVIC_GetPriorityGrouping>
 8000d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	68b9      	ldr	r1, [r7, #8]
 8000d6e:	6978      	ldr	r0, [r7, #20]
 8000d70:	f7ff ff8e 	bl	8000c90 <NVIC_EncodePriority>
 8000d74:	4602      	mov	r2, r0
 8000d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff5d 	bl	8000c3c <__NVIC_SetPriority>
}
 8000d82:	bf00      	nop
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff31 	bl	8000c00 <__NVIC_EnableIRQ>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ffa2 	bl	8000cf8 <SysTick_Config>
 8000db4:	4603      	mov	r3, r0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	d106      	bne.n	8000ddc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000dd4:	f043 0304 	orr.w	r3, r3, #4
 8000dd8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000dda:	e005      	b.n	8000de8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000de2:	f023 0304 	bic.w	r3, r3, #4
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000dfc:	f000 f802 	bl	8000e04 <HAL_SYSTICK_Callback>
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
	...

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
 8000e2e:	e16b      	b.n	8001108 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e30:	2201      	movs	r2, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f040 815a 	bne.w	8001102 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d005      	beq.n	8000e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d130      	bne.n	8000ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	091b      	lsrs	r3, r3, #4
 8000eb2:	f003 0201 	and.w	r2, r3, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d017      	beq.n	8000f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d123      	bne.n	8000f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	08da      	lsrs	r2, r3, #3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3208      	adds	r2, #8
 8000f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	220f      	movs	r2, #15
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	691a      	ldr	r2, [r3, #16]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3208      	adds	r2, #8
 8000f52:	69b9      	ldr	r1, [r7, #24]
 8000f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0203 	and.w	r2, r3, #3
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f000 80b4 	beq.w	8001102 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b60      	ldr	r3, [pc, #384]	; (8001120 <HAL_GPIO_Init+0x30c>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	4a5f      	ldr	r2, [pc, #380]	; (8001120 <HAL_GPIO_Init+0x30c>)
 8000fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000faa:	4b5d      	ldr	r3, [pc, #372]	; (8001120 <HAL_GPIO_Init+0x30c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fb6:	4a5b      	ldr	r2, [pc, #364]	; (8001124 <HAL_GPIO_Init+0x310>)
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	220f      	movs	r2, #15
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a52      	ldr	r2, [pc, #328]	; (8001128 <HAL_GPIO_Init+0x314>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d02b      	beq.n	800103a <HAL_GPIO_Init+0x226>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a51      	ldr	r2, [pc, #324]	; (800112c <HAL_GPIO_Init+0x318>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d025      	beq.n	8001036 <HAL_GPIO_Init+0x222>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a50      	ldr	r2, [pc, #320]	; (8001130 <HAL_GPIO_Init+0x31c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d01f      	beq.n	8001032 <HAL_GPIO_Init+0x21e>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4f      	ldr	r2, [pc, #316]	; (8001134 <HAL_GPIO_Init+0x320>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d019      	beq.n	800102e <HAL_GPIO_Init+0x21a>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4e      	ldr	r2, [pc, #312]	; (8001138 <HAL_GPIO_Init+0x324>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d013      	beq.n	800102a <HAL_GPIO_Init+0x216>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4d      	ldr	r2, [pc, #308]	; (800113c <HAL_GPIO_Init+0x328>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00d      	beq.n	8001026 <HAL_GPIO_Init+0x212>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4c      	ldr	r2, [pc, #304]	; (8001140 <HAL_GPIO_Init+0x32c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d007      	beq.n	8001022 <HAL_GPIO_Init+0x20e>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4b      	ldr	r2, [pc, #300]	; (8001144 <HAL_GPIO_Init+0x330>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d101      	bne.n	800101e <HAL_GPIO_Init+0x20a>
 800101a:	2307      	movs	r3, #7
 800101c:	e00e      	b.n	800103c <HAL_GPIO_Init+0x228>
 800101e:	2308      	movs	r3, #8
 8001020:	e00c      	b.n	800103c <HAL_GPIO_Init+0x228>
 8001022:	2306      	movs	r3, #6
 8001024:	e00a      	b.n	800103c <HAL_GPIO_Init+0x228>
 8001026:	2305      	movs	r3, #5
 8001028:	e008      	b.n	800103c <HAL_GPIO_Init+0x228>
 800102a:	2304      	movs	r3, #4
 800102c:	e006      	b.n	800103c <HAL_GPIO_Init+0x228>
 800102e:	2303      	movs	r3, #3
 8001030:	e004      	b.n	800103c <HAL_GPIO_Init+0x228>
 8001032:	2302      	movs	r3, #2
 8001034:	e002      	b.n	800103c <HAL_GPIO_Init+0x228>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <HAL_GPIO_Init+0x228>
 800103a:	2300      	movs	r3, #0
 800103c:	69fa      	ldr	r2, [r7, #28]
 800103e:	f002 0203 	and.w	r2, r2, #3
 8001042:	0092      	lsls	r2, r2, #2
 8001044:	4093      	lsls	r3, r2
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800104c:	4935      	ldr	r1, [pc, #212]	; (8001124 <HAL_GPIO_Init+0x310>)
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	3302      	adds	r3, #2
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800105a:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <HAL_GPIO_Init+0x334>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800107e:	4a32      	ldr	r2, [pc, #200]	; (8001148 <HAL_GPIO_Init+0x334>)
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001084:	4b30      	ldr	r3, [pc, #192]	; (8001148 <HAL_GPIO_Init+0x334>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a8:	4a27      	ldr	r2, [pc, #156]	; (8001148 <HAL_GPIO_Init+0x334>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <HAL_GPIO_Init+0x334>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d2:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <HAL_GPIO_Init+0x334>)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <HAL_GPIO_Init+0x334>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010fc:	4a12      	ldr	r2, [pc, #72]	; (8001148 <HAL_GPIO_Init+0x334>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3301      	adds	r3, #1
 8001106:	61fb      	str	r3, [r7, #28]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	2b0f      	cmp	r3, #15
 800110c:	f67f ae90 	bls.w	8000e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800
 8001124:	40013800 	.word	0x40013800
 8001128:	40020000 	.word	0x40020000
 800112c:	40020400 	.word	0x40020400
 8001130:	40020800 	.word	0x40020800
 8001134:	40020c00 	.word	0x40020c00
 8001138:	40021000 	.word	0x40021000
 800113c:	40021400 	.word	0x40021400
 8001140:	40021800 	.word	0x40021800
 8001144:	40021c00 	.word	0x40021c00
 8001148:	40013c00 	.word	0x40013c00

0800114c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4013      	ands	r3, r2
 8001164:	041a      	lsls	r2, r3, #16
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43d9      	mvns	r1, r3
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	400b      	ands	r3, r1
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e267      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	d075      	beq.n	800128a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800119e:	4b88      	ldr	r3, [pc, #544]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	d00c      	beq.n	80011c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011aa:	4b85      	ldr	r3, [pc, #532]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011b2:	2b08      	cmp	r3, #8
 80011b4:	d112      	bne.n	80011dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011b6:	4b82      	ldr	r3, [pc, #520]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011c2:	d10b      	bne.n	80011dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c4:	4b7e      	ldr	r3, [pc, #504]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d05b      	beq.n	8001288 <HAL_RCC_OscConfig+0x108>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d157      	bne.n	8001288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e242      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e4:	d106      	bne.n	80011f4 <HAL_RCC_OscConfig+0x74>
 80011e6:	4b76      	ldr	r3, [pc, #472]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a75      	ldr	r2, [pc, #468]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80011ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	e01d      	b.n	8001230 <HAL_RCC_OscConfig+0xb0>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0x98>
 80011fe:	4b70      	ldr	r3, [pc, #448]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a6f      	ldr	r2, [pc, #444]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 8001204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	4b6d      	ldr	r3, [pc, #436]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a6c      	ldr	r2, [pc, #432]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 8001210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e00b      	b.n	8001230 <HAL_RCC_OscConfig+0xb0>
 8001218:	4b69      	ldr	r3, [pc, #420]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a68      	ldr	r2, [pc, #416]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 800121e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b66      	ldr	r3, [pc, #408]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a65      	ldr	r2, [pc, #404]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 800122a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d013      	beq.n	8001260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fca4 	bl	8000b84 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fca0 	bl	8000b84 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	; 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e207      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001252:	4b5b      	ldr	r3, [pc, #364]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f0      	beq.n	8001240 <HAL_RCC_OscConfig+0xc0>
 800125e:	e014      	b.n	800128a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fc90 	bl	8000b84 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001268:	f7ff fc8c 	bl	8000b84 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b64      	cmp	r3, #100	; 0x64
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e1f3      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127a:	4b51      	ldr	r3, [pc, #324]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0xe8>
 8001286:	e000      	b.n	800128a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d063      	beq.n	800135e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001296:	4b4a      	ldr	r3, [pc, #296]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 030c 	and.w	r3, r3, #12
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00b      	beq.n	80012ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012a2:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012aa:	2b08      	cmp	r3, #8
 80012ac:	d11c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ae:	4b44      	ldr	r3, [pc, #272]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d116      	bne.n	80012e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ba:	4b41      	ldr	r3, [pc, #260]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d005      	beq.n	80012d2 <HAL_RCC_OscConfig+0x152>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d001      	beq.n	80012d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e1c7      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d2:	4b3b      	ldr	r3, [pc, #236]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	4937      	ldr	r1, [pc, #220]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e6:	e03a      	b.n	800135e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d020      	beq.n	8001332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f0:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <HAL_RCC_OscConfig+0x244>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f6:	f7ff fc45 	bl	8000b84 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012fe:	f7ff fc41 	bl	8000b84 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e1a8      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001310:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0f0      	beq.n	80012fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131c:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4925      	ldr	r1, [pc, #148]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 800132c:	4313      	orrs	r3, r2
 800132e:	600b      	str	r3, [r1, #0]
 8001330:	e015      	b.n	800135e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <HAL_RCC_OscConfig+0x244>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001338:	f7ff fc24 	bl	8000b84 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001340:	f7ff fc20 	bl	8000b84 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e187      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001352:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	2b00      	cmp	r3, #0
 8001368:	d036      	beq.n	80013d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d016      	beq.n	80013a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_RCC_OscConfig+0x248>)
 8001374:	2201      	movs	r2, #1
 8001376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001378:	f7ff fc04 	bl	8000b84 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001380:	f7ff fc00 	bl	8000b84 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e167      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_RCC_OscConfig+0x240>)
 8001394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0x200>
 800139e:	e01b      	b.n	80013d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_RCC_OscConfig+0x248>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a6:	f7ff fbed 	bl	8000b84 <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ac:	e00e      	b.n	80013cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ae:	f7ff fbe9 	bl	8000b84 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d907      	bls.n	80013cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e150      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
 80013c0:	40023800 	.word	0x40023800
 80013c4:	42470000 	.word	0x42470000
 80013c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013cc:	4b88      	ldr	r3, [pc, #544]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 80013ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1ea      	bne.n	80013ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f000 8097 	beq.w	8001514 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ea:	4b81      	ldr	r3, [pc, #516]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10f      	bne.n	8001416 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	4b7d      	ldr	r3, [pc, #500]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a7c      	ldr	r2, [pc, #496]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b7a      	ldr	r3, [pc, #488]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001412:	2301      	movs	r3, #1
 8001414:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001416:	4b77      	ldr	r3, [pc, #476]	; (80015f4 <HAL_RCC_OscConfig+0x474>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d118      	bne.n	8001454 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001422:	4b74      	ldr	r3, [pc, #464]	; (80015f4 <HAL_RCC_OscConfig+0x474>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a73      	ldr	r2, [pc, #460]	; (80015f4 <HAL_RCC_OscConfig+0x474>)
 8001428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800142e:	f7ff fba9 	bl	8000b84 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001436:	f7ff fba5 	bl	8000b84 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e10c      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001448:	4b6a      	ldr	r3, [pc, #424]	; (80015f4 <HAL_RCC_OscConfig+0x474>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d106      	bne.n	800146a <HAL_RCC_OscConfig+0x2ea>
 800145c:	4b64      	ldr	r3, [pc, #400]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 800145e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001460:	4a63      	ldr	r2, [pc, #396]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6713      	str	r3, [r2, #112]	; 0x70
 8001468:	e01c      	b.n	80014a4 <HAL_RCC_OscConfig+0x324>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b05      	cmp	r3, #5
 8001470:	d10c      	bne.n	800148c <HAL_RCC_OscConfig+0x30c>
 8001472:	4b5f      	ldr	r3, [pc, #380]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001476:	4a5e      	ldr	r2, [pc, #376]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	6713      	str	r3, [r2, #112]	; 0x70
 800147e:	4b5c      	ldr	r3, [pc, #368]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001482:	4a5b      	ldr	r2, [pc, #364]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6713      	str	r3, [r2, #112]	; 0x70
 800148a:	e00b      	b.n	80014a4 <HAL_RCC_OscConfig+0x324>
 800148c:	4b58      	ldr	r3, [pc, #352]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 800148e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001490:	4a57      	ldr	r2, [pc, #348]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001492:	f023 0301 	bic.w	r3, r3, #1
 8001496:	6713      	str	r3, [r2, #112]	; 0x70
 8001498:	4b55      	ldr	r3, [pc, #340]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 800149a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149c:	4a54      	ldr	r2, [pc, #336]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 800149e:	f023 0304 	bic.w	r3, r3, #4
 80014a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d015      	beq.n	80014d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ac:	f7ff fb6a 	bl	8000b84 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b2:	e00a      	b.n	80014ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b4:	f7ff fb66 	bl	8000b84 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e0cb      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ca:	4b49      	ldr	r3, [pc, #292]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0ee      	beq.n	80014b4 <HAL_RCC_OscConfig+0x334>
 80014d6:	e014      	b.n	8001502 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d8:	f7ff fb54 	bl	8000b84 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014de:	e00a      	b.n	80014f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e0:	f7ff fb50 	bl	8000b84 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e0b5      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f6:	4b3e      	ldr	r3, [pc, #248]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 80014f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1ee      	bne.n	80014e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001502:	7dfb      	ldrb	r3, [r7, #23]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d105      	bne.n	8001514 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001508:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	4a38      	ldr	r2, [pc, #224]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 800150e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001512:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80a1 	beq.w	8001660 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800151e:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b08      	cmp	r3, #8
 8001528:	d05c      	beq.n	80015e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d141      	bne.n	80015b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001532:	4b31      	ldr	r3, [pc, #196]	; (80015f8 <HAL_RCC_OscConfig+0x478>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff fb24 	bl	8000b84 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff fb20 	bl	8000b84 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e087      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001552:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69da      	ldr	r2, [r3, #28]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156c:	019b      	lsls	r3, r3, #6
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	085b      	lsrs	r3, r3, #1
 8001576:	3b01      	subs	r3, #1
 8001578:	041b      	lsls	r3, r3, #16
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	061b      	lsls	r3, r3, #24
 8001582:	491b      	ldr	r1, [pc, #108]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_RCC_OscConfig+0x478>)
 800158a:	2201      	movs	r2, #1
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158e:	f7ff faf9 	bl	8000b84 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001596:	f7ff faf5 	bl	8000b84 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e05c      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x416>
 80015b4:	e054      	b.n	8001660 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <HAL_RCC_OscConfig+0x478>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fae2 	bl	8000b84 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c4:	f7ff fade 	bl	8000b84 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e045      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_RCC_OscConfig+0x470>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x444>
 80015e2:	e03d      	b.n	8001660 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d107      	bne.n	80015fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e038      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40007000 	.word	0x40007000
 80015f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_RCC_OscConfig+0x4ec>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d028      	beq.n	800165c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001614:	429a      	cmp	r2, r3
 8001616:	d121      	bne.n	800165c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001622:	429a      	cmp	r2, r3
 8001624:	d11a      	bne.n	800165c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800162c:	4013      	ands	r3, r2
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001634:	4293      	cmp	r3, r2
 8001636:	d111      	bne.n	800165c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001642:	085b      	lsrs	r3, r3, #1
 8001644:	3b01      	subs	r3, #1
 8001646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001648:	429a      	cmp	r2, r3
 800164a:	d107      	bne.n	800165c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001658:	429a      	cmp	r2, r3
 800165a:	d001      	beq.n	8001660 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800

08001670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0cc      	b.n	800181e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001684:	4b68      	ldr	r3, [pc, #416]	; (8001828 <HAL_RCC_ClockConfig+0x1b8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d90c      	bls.n	80016ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001692:	4b65      	ldr	r3, [pc, #404]	; (8001828 <HAL_RCC_ClockConfig+0x1b8>)
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800169a:	4b63      	ldr	r3, [pc, #396]	; (8001828 <HAL_RCC_ClockConfig+0x1b8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e0b8      	b.n	800181e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d020      	beq.n	80016fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c4:	4b59      	ldr	r3, [pc, #356]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4a58      	ldr	r2, [pc, #352]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016dc:	4b53      	ldr	r3, [pc, #332]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	4a52      	ldr	r2, [pc, #328]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e8:	4b50      	ldr	r3, [pc, #320]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	494d      	ldr	r1, [pc, #308]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d044      	beq.n	8001790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d107      	bne.n	800171e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170e:	4b47      	ldr	r3, [pc, #284]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d119      	bne.n	800174e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e07f      	b.n	800181e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d003      	beq.n	800172e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172a:	2b03      	cmp	r3, #3
 800172c:	d107      	bne.n	800173e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172e:	4b3f      	ldr	r3, [pc, #252]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d109      	bne.n	800174e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e06f      	b.n	800181e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173e:	4b3b      	ldr	r3, [pc, #236]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e067      	b.n	800181e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800174e:	4b37      	ldr	r3, [pc, #220]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f023 0203 	bic.w	r2, r3, #3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	4934      	ldr	r1, [pc, #208]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	4313      	orrs	r3, r2
 800175e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001760:	f7ff fa10 	bl	8000b84 <HAL_GetTick>
 8001764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001766:	e00a      	b.n	800177e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001768:	f7ff fa0c 	bl	8000b84 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	; 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e04f      	b.n	800181e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177e:	4b2b      	ldr	r3, [pc, #172]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 020c 	and.w	r2, r3, #12
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	429a      	cmp	r2, r3
 800178e:	d1eb      	bne.n	8001768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001790:	4b25      	ldr	r3, [pc, #148]	; (8001828 <HAL_RCC_ClockConfig+0x1b8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d20c      	bcs.n	80017b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179e:	4b22      	ldr	r3, [pc, #136]	; (8001828 <HAL_RCC_ClockConfig+0x1b8>)
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b20      	ldr	r3, [pc, #128]	; (8001828 <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e032      	b.n	800181e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d008      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	4916      	ldr	r1, [pc, #88]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d009      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	490e      	ldr	r1, [pc, #56]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017f6:	f000 f821 	bl	800183c <HAL_RCC_GetSysClockFreq>
 80017fa:	4602      	mov	r2, r0
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	490a      	ldr	r1, [pc, #40]	; (8001830 <HAL_RCC_ClockConfig+0x1c0>)
 8001808:	5ccb      	ldrb	r3, [r1, r3]
 800180a:	fa22 f303 	lsr.w	r3, r2, r3
 800180e:	4a09      	ldr	r2, [pc, #36]	; (8001834 <HAL_RCC_ClockConfig+0x1c4>)
 8001810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_RCC_ClockConfig+0x1c8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff f970 	bl	8000afc <HAL_InitTick>

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023c00 	.word	0x40023c00
 800182c:	40023800 	.word	0x40023800
 8001830:	08003004 	.word	0x08003004
 8001834:	20000000 	.word	0x20000000
 8001838:	20000004 	.word	0x20000004

0800183c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800183c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001840:	b094      	sub	sp, #80	; 0x50
 8001842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001854:	4b79      	ldr	r3, [pc, #484]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 030c 	and.w	r3, r3, #12
 800185c:	2b08      	cmp	r3, #8
 800185e:	d00d      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x40>
 8001860:	2b08      	cmp	r3, #8
 8001862:	f200 80e1 	bhi.w	8001a28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0x34>
 800186a:	2b04      	cmp	r3, #4
 800186c:	d003      	beq.n	8001876 <HAL_RCC_GetSysClockFreq+0x3a>
 800186e:	e0db      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001870:	4b73      	ldr	r3, [pc, #460]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001872:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001874:	e0db      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001876:	4b73      	ldr	r3, [pc, #460]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x208>)
 8001878:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800187a:	e0d8      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800187c:	4b6f      	ldr	r3, [pc, #444]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x200>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001884:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001886:	4b6d      	ldr	r3, [pc, #436]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d063      	beq.n	800195a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001892:	4b6a      	ldr	r3, [pc, #424]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	099b      	lsrs	r3, r3, #6
 8001898:	2200      	movs	r2, #0
 800189a:	63bb      	str	r3, [r7, #56]	; 0x38
 800189c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800189e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018a4:	633b      	str	r3, [r7, #48]	; 0x30
 80018a6:	2300      	movs	r3, #0
 80018a8:	637b      	str	r3, [r7, #52]	; 0x34
 80018aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018ae:	4622      	mov	r2, r4
 80018b0:	462b      	mov	r3, r5
 80018b2:	f04f 0000 	mov.w	r0, #0
 80018b6:	f04f 0100 	mov.w	r1, #0
 80018ba:	0159      	lsls	r1, r3, #5
 80018bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018c0:	0150      	lsls	r0, r2, #5
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4621      	mov	r1, r4
 80018c8:	1a51      	subs	r1, r2, r1
 80018ca:	6139      	str	r1, [r7, #16]
 80018cc:	4629      	mov	r1, r5
 80018ce:	eb63 0301 	sbc.w	r3, r3, r1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018e0:	4659      	mov	r1, fp
 80018e2:	018b      	lsls	r3, r1, #6
 80018e4:	4651      	mov	r1, sl
 80018e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ea:	4651      	mov	r1, sl
 80018ec:	018a      	lsls	r2, r1, #6
 80018ee:	4651      	mov	r1, sl
 80018f0:	ebb2 0801 	subs.w	r8, r2, r1
 80018f4:	4659      	mov	r1, fp
 80018f6:	eb63 0901 	sbc.w	r9, r3, r1
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001906:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800190a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800190e:	4690      	mov	r8, r2
 8001910:	4699      	mov	r9, r3
 8001912:	4623      	mov	r3, r4
 8001914:	eb18 0303 	adds.w	r3, r8, r3
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	462b      	mov	r3, r5
 800191c:	eb49 0303 	adc.w	r3, r9, r3
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800192e:	4629      	mov	r1, r5
 8001930:	024b      	lsls	r3, r1, #9
 8001932:	4621      	mov	r1, r4
 8001934:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001938:	4621      	mov	r1, r4
 800193a:	024a      	lsls	r2, r1, #9
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001942:	2200      	movs	r2, #0
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
 8001946:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001948:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800194c:	f7fe fc90 	bl	8000270 <__aeabi_uldivmod>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4613      	mov	r3, r2
 8001956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001958:	e058      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195a:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x200>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	099b      	lsrs	r3, r3, #6
 8001960:	2200      	movs	r2, #0
 8001962:	4618      	mov	r0, r3
 8001964:	4611      	mov	r1, r2
 8001966:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800196a:	623b      	str	r3, [r7, #32]
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
 8001970:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001974:	4642      	mov	r2, r8
 8001976:	464b      	mov	r3, r9
 8001978:	f04f 0000 	mov.w	r0, #0
 800197c:	f04f 0100 	mov.w	r1, #0
 8001980:	0159      	lsls	r1, r3, #5
 8001982:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001986:	0150      	lsls	r0, r2, #5
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4641      	mov	r1, r8
 800198e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001992:	4649      	mov	r1, r9
 8001994:	eb63 0b01 	sbc.w	fp, r3, r1
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019ac:	ebb2 040a 	subs.w	r4, r2, sl
 80019b0:	eb63 050b 	sbc.w	r5, r3, fp
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	00eb      	lsls	r3, r5, #3
 80019be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019c2:	00e2      	lsls	r2, r4, #3
 80019c4:	4614      	mov	r4, r2
 80019c6:	461d      	mov	r5, r3
 80019c8:	4643      	mov	r3, r8
 80019ca:	18e3      	adds	r3, r4, r3
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	464b      	mov	r3, r9
 80019d0:	eb45 0303 	adc.w	r3, r5, r3
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019e2:	4629      	mov	r1, r5
 80019e4:	028b      	lsls	r3, r1, #10
 80019e6:	4621      	mov	r1, r4
 80019e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019ec:	4621      	mov	r1, r4
 80019ee:	028a      	lsls	r2, r1, #10
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f6:	2200      	movs	r2, #0
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	61fa      	str	r2, [r7, #28]
 80019fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a00:	f7fe fc36 	bl	8000270 <__aeabi_uldivmod>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4613      	mov	r3, r2
 8001a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	0c1b      	lsrs	r3, r3, #16
 8001a12:	f003 0303 	and.w	r3, r3, #3
 8001a16:	3301      	adds	r3, #1
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001a1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a26:	e002      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3750      	adds	r7, #80	; 0x50
 8001a34:	46bd      	mov	sp, r7
 8001a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	00f42400 	.word	0x00f42400
 8001a44:	007a1200 	.word	0x007a1200

08001a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000000 	.word	0x20000000

08001a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a64:	f7ff fff0 	bl	8001a48 <HAL_RCC_GetHCLKFreq>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	0a9b      	lsrs	r3, r3, #10
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	4903      	ldr	r1, [pc, #12]	; (8001a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a76:	5ccb      	ldrb	r3, [r1, r3]
 8001a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	08003014 	.word	0x08003014

08001a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a8c:	f7ff ffdc 	bl	8001a48 <HAL_RCC_GetHCLKFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	0b5b      	lsrs	r3, r3, #13
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4903      	ldr	r1, [pc, #12]	; (8001aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	08003014 	.word	0x08003014

08001ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e041      	b.n	8001b46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d106      	bne.n	8001adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7fe fec6 	bl	8000868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3304      	adds	r3, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	4610      	mov	r0, r2
 8001af0:	f000 f896 	bl	8001c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d001      	beq.n	8001b68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e046      	b.n	8001bf6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a23      	ldr	r2, [pc, #140]	; (8001c04 <HAL_TIM_Base_Start+0xb4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d022      	beq.n	8001bc0 <HAL_TIM_Base_Start+0x70>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b82:	d01d      	beq.n	8001bc0 <HAL_TIM_Base_Start+0x70>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a1f      	ldr	r2, [pc, #124]	; (8001c08 <HAL_TIM_Base_Start+0xb8>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d018      	beq.n	8001bc0 <HAL_TIM_Base_Start+0x70>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a1e      	ldr	r2, [pc, #120]	; (8001c0c <HAL_TIM_Base_Start+0xbc>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d013      	beq.n	8001bc0 <HAL_TIM_Base_Start+0x70>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <HAL_TIM_Base_Start+0xc0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d00e      	beq.n	8001bc0 <HAL_TIM_Base_Start+0x70>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a1b      	ldr	r2, [pc, #108]	; (8001c14 <HAL_TIM_Base_Start+0xc4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d009      	beq.n	8001bc0 <HAL_TIM_Base_Start+0x70>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <HAL_TIM_Base_Start+0xc8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d004      	beq.n	8001bc0 <HAL_TIM_Base_Start+0x70>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a18      	ldr	r2, [pc, #96]	; (8001c1c <HAL_TIM_Base_Start+0xcc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d111      	bne.n	8001be4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d010      	beq.n	8001bf4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0201 	orr.w	r2, r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be2:	e007      	b.n	8001bf4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40010000 	.word	0x40010000
 8001c08:	40000400 	.word	0x40000400
 8001c0c:	40000800 	.word	0x40000800
 8001c10:	40000c00 	.word	0x40000c00
 8001c14:	40010400 	.word	0x40010400
 8001c18:	40014000 	.word	0x40014000
 8001c1c:	40001800 	.word	0x40001800

08001c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a46      	ldr	r2, [pc, #280]	; (8001d4c <TIM_Base_SetConfig+0x12c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d013      	beq.n	8001c60 <TIM_Base_SetConfig+0x40>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c3e:	d00f      	beq.n	8001c60 <TIM_Base_SetConfig+0x40>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a43      	ldr	r2, [pc, #268]	; (8001d50 <TIM_Base_SetConfig+0x130>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d00b      	beq.n	8001c60 <TIM_Base_SetConfig+0x40>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a42      	ldr	r2, [pc, #264]	; (8001d54 <TIM_Base_SetConfig+0x134>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d007      	beq.n	8001c60 <TIM_Base_SetConfig+0x40>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a41      	ldr	r2, [pc, #260]	; (8001d58 <TIM_Base_SetConfig+0x138>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d003      	beq.n	8001c60 <TIM_Base_SetConfig+0x40>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a40      	ldr	r2, [pc, #256]	; (8001d5c <TIM_Base_SetConfig+0x13c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d108      	bne.n	8001c72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a35      	ldr	r2, [pc, #212]	; (8001d4c <TIM_Base_SetConfig+0x12c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d02b      	beq.n	8001cd2 <TIM_Base_SetConfig+0xb2>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c80:	d027      	beq.n	8001cd2 <TIM_Base_SetConfig+0xb2>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a32      	ldr	r2, [pc, #200]	; (8001d50 <TIM_Base_SetConfig+0x130>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d023      	beq.n	8001cd2 <TIM_Base_SetConfig+0xb2>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a31      	ldr	r2, [pc, #196]	; (8001d54 <TIM_Base_SetConfig+0x134>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d01f      	beq.n	8001cd2 <TIM_Base_SetConfig+0xb2>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a30      	ldr	r2, [pc, #192]	; (8001d58 <TIM_Base_SetConfig+0x138>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d01b      	beq.n	8001cd2 <TIM_Base_SetConfig+0xb2>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a2f      	ldr	r2, [pc, #188]	; (8001d5c <TIM_Base_SetConfig+0x13c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d017      	beq.n	8001cd2 <TIM_Base_SetConfig+0xb2>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a2e      	ldr	r2, [pc, #184]	; (8001d60 <TIM_Base_SetConfig+0x140>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d013      	beq.n	8001cd2 <TIM_Base_SetConfig+0xb2>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a2d      	ldr	r2, [pc, #180]	; (8001d64 <TIM_Base_SetConfig+0x144>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00f      	beq.n	8001cd2 <TIM_Base_SetConfig+0xb2>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a2c      	ldr	r2, [pc, #176]	; (8001d68 <TIM_Base_SetConfig+0x148>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d00b      	beq.n	8001cd2 <TIM_Base_SetConfig+0xb2>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a2b      	ldr	r2, [pc, #172]	; (8001d6c <TIM_Base_SetConfig+0x14c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d007      	beq.n	8001cd2 <TIM_Base_SetConfig+0xb2>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a2a      	ldr	r2, [pc, #168]	; (8001d70 <TIM_Base_SetConfig+0x150>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d003      	beq.n	8001cd2 <TIM_Base_SetConfig+0xb2>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a29      	ldr	r2, [pc, #164]	; (8001d74 <TIM_Base_SetConfig+0x154>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d108      	bne.n	8001ce4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a10      	ldr	r2, [pc, #64]	; (8001d4c <TIM_Base_SetConfig+0x12c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d003      	beq.n	8001d18 <TIM_Base_SetConfig+0xf8>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <TIM_Base_SetConfig+0x13c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d103      	bne.n	8001d20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d105      	bne.n	8001d3e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f023 0201 	bic.w	r2, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	611a      	str	r2, [r3, #16]
  }
}
 8001d3e:	bf00      	nop
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40010000 	.word	0x40010000
 8001d50:	40000400 	.word	0x40000400
 8001d54:	40000800 	.word	0x40000800
 8001d58:	40000c00 	.word	0x40000c00
 8001d5c:	40010400 	.word	0x40010400
 8001d60:	40014000 	.word	0x40014000
 8001d64:	40014400 	.word	0x40014400
 8001d68:	40014800 	.word	0x40014800
 8001d6c:	40001800 	.word	0x40001800
 8001d70:	40001c00 	.word	0x40001c00
 8001d74:	40002000 	.word	0x40002000

08001d78 <std>:
 8001d78:	2300      	movs	r3, #0
 8001d7a:	b510      	push	{r4, lr}
 8001d7c:	4604      	mov	r4, r0
 8001d7e:	e9c0 3300 	strd	r3, r3, [r0]
 8001d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d86:	6083      	str	r3, [r0, #8]
 8001d88:	8181      	strh	r1, [r0, #12]
 8001d8a:	6643      	str	r3, [r0, #100]	; 0x64
 8001d8c:	81c2      	strh	r2, [r0, #14]
 8001d8e:	6183      	str	r3, [r0, #24]
 8001d90:	4619      	mov	r1, r3
 8001d92:	2208      	movs	r2, #8
 8001d94:	305c      	adds	r0, #92	; 0x5c
 8001d96:	f000 f926 	bl	8001fe6 <memset>
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <std+0x58>)
 8001d9c:	6263      	str	r3, [r4, #36]	; 0x24
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <std+0x5c>)
 8001da0:	62a3      	str	r3, [r4, #40]	; 0x28
 8001da2:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <std+0x60>)
 8001da4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <std+0x64>)
 8001da8:	6323      	str	r3, [r4, #48]	; 0x30
 8001daa:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <std+0x68>)
 8001dac:	6224      	str	r4, [r4, #32]
 8001dae:	429c      	cmp	r4, r3
 8001db0:	d006      	beq.n	8001dc0 <std+0x48>
 8001db2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001db6:	4294      	cmp	r4, r2
 8001db8:	d002      	beq.n	8001dc0 <std+0x48>
 8001dba:	33d0      	adds	r3, #208	; 0xd0
 8001dbc:	429c      	cmp	r4, r3
 8001dbe:	d105      	bne.n	8001dcc <std+0x54>
 8001dc0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001dc8:	f000 b986 	b.w	80020d8 <__retarget_lock_init_recursive>
 8001dcc:	bd10      	pop	{r4, pc}
 8001dce:	bf00      	nop
 8001dd0:	08001f61 	.word	0x08001f61
 8001dd4:	08001f83 	.word	0x08001f83
 8001dd8:	08001fbb 	.word	0x08001fbb
 8001ddc:	08001fdf 	.word	0x08001fdf
 8001de0:	200000d4 	.word	0x200000d4

08001de4 <stdio_exit_handler>:
 8001de4:	4a02      	ldr	r2, [pc, #8]	; (8001df0 <stdio_exit_handler+0xc>)
 8001de6:	4903      	ldr	r1, [pc, #12]	; (8001df4 <stdio_exit_handler+0x10>)
 8001de8:	4803      	ldr	r0, [pc, #12]	; (8001df8 <stdio_exit_handler+0x14>)
 8001dea:	f000 b869 	b.w	8001ec0 <_fwalk_sglue>
 8001dee:	bf00      	nop
 8001df0:	2000000c 	.word	0x2000000c
 8001df4:	08002c35 	.word	0x08002c35
 8001df8:	20000018 	.word	0x20000018

08001dfc <cleanup_stdio>:
 8001dfc:	6841      	ldr	r1, [r0, #4]
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <cleanup_stdio+0x34>)
 8001e00:	4299      	cmp	r1, r3
 8001e02:	b510      	push	{r4, lr}
 8001e04:	4604      	mov	r4, r0
 8001e06:	d001      	beq.n	8001e0c <cleanup_stdio+0x10>
 8001e08:	f000 ff14 	bl	8002c34 <_fflush_r>
 8001e0c:	68a1      	ldr	r1, [r4, #8]
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <cleanup_stdio+0x38>)
 8001e10:	4299      	cmp	r1, r3
 8001e12:	d002      	beq.n	8001e1a <cleanup_stdio+0x1e>
 8001e14:	4620      	mov	r0, r4
 8001e16:	f000 ff0d 	bl	8002c34 <_fflush_r>
 8001e1a:	68e1      	ldr	r1, [r4, #12]
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <cleanup_stdio+0x3c>)
 8001e1e:	4299      	cmp	r1, r3
 8001e20:	d004      	beq.n	8001e2c <cleanup_stdio+0x30>
 8001e22:	4620      	mov	r0, r4
 8001e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e28:	f000 bf04 	b.w	8002c34 <_fflush_r>
 8001e2c:	bd10      	pop	{r4, pc}
 8001e2e:	bf00      	nop
 8001e30:	200000d4 	.word	0x200000d4
 8001e34:	2000013c 	.word	0x2000013c
 8001e38:	200001a4 	.word	0x200001a4

08001e3c <global_stdio_init.part.0>:
 8001e3c:	b510      	push	{r4, lr}
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <global_stdio_init.part.0+0x30>)
 8001e40:	4c0b      	ldr	r4, [pc, #44]	; (8001e70 <global_stdio_init.part.0+0x34>)
 8001e42:	4a0c      	ldr	r2, [pc, #48]	; (8001e74 <global_stdio_init.part.0+0x38>)
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	4620      	mov	r0, r4
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2104      	movs	r1, #4
 8001e4c:	f7ff ff94 	bl	8001d78 <std>
 8001e50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001e54:	2201      	movs	r2, #1
 8001e56:	2109      	movs	r1, #9
 8001e58:	f7ff ff8e 	bl	8001d78 <std>
 8001e5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001e60:	2202      	movs	r2, #2
 8001e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e66:	2112      	movs	r1, #18
 8001e68:	f7ff bf86 	b.w	8001d78 <std>
 8001e6c:	2000020c 	.word	0x2000020c
 8001e70:	200000d4 	.word	0x200000d4
 8001e74:	08001de5 	.word	0x08001de5

08001e78 <__sfp_lock_acquire>:
 8001e78:	4801      	ldr	r0, [pc, #4]	; (8001e80 <__sfp_lock_acquire+0x8>)
 8001e7a:	f000 b92e 	b.w	80020da <__retarget_lock_acquire_recursive>
 8001e7e:	bf00      	nop
 8001e80:	20000215 	.word	0x20000215

08001e84 <__sfp_lock_release>:
 8001e84:	4801      	ldr	r0, [pc, #4]	; (8001e8c <__sfp_lock_release+0x8>)
 8001e86:	f000 b929 	b.w	80020dc <__retarget_lock_release_recursive>
 8001e8a:	bf00      	nop
 8001e8c:	20000215 	.word	0x20000215

08001e90 <__sinit>:
 8001e90:	b510      	push	{r4, lr}
 8001e92:	4604      	mov	r4, r0
 8001e94:	f7ff fff0 	bl	8001e78 <__sfp_lock_acquire>
 8001e98:	6a23      	ldr	r3, [r4, #32]
 8001e9a:	b11b      	cbz	r3, 8001ea4 <__sinit+0x14>
 8001e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ea0:	f7ff bff0 	b.w	8001e84 <__sfp_lock_release>
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <__sinit+0x28>)
 8001ea6:	6223      	str	r3, [r4, #32]
 8001ea8:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <__sinit+0x2c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f5      	bne.n	8001e9c <__sinit+0xc>
 8001eb0:	f7ff ffc4 	bl	8001e3c <global_stdio_init.part.0>
 8001eb4:	e7f2      	b.n	8001e9c <__sinit+0xc>
 8001eb6:	bf00      	nop
 8001eb8:	08001dfd 	.word	0x08001dfd
 8001ebc:	2000020c 	.word	0x2000020c

08001ec0 <_fwalk_sglue>:
 8001ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ec4:	4607      	mov	r7, r0
 8001ec6:	4688      	mov	r8, r1
 8001ec8:	4614      	mov	r4, r2
 8001eca:	2600      	movs	r6, #0
 8001ecc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001ed0:	f1b9 0901 	subs.w	r9, r9, #1
 8001ed4:	d505      	bpl.n	8001ee2 <_fwalk_sglue+0x22>
 8001ed6:	6824      	ldr	r4, [r4, #0]
 8001ed8:	2c00      	cmp	r4, #0
 8001eda:	d1f7      	bne.n	8001ecc <_fwalk_sglue+0xc>
 8001edc:	4630      	mov	r0, r6
 8001ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ee2:	89ab      	ldrh	r3, [r5, #12]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d907      	bls.n	8001ef8 <_fwalk_sglue+0x38>
 8001ee8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001eec:	3301      	adds	r3, #1
 8001eee:	d003      	beq.n	8001ef8 <_fwalk_sglue+0x38>
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	4638      	mov	r0, r7
 8001ef4:	47c0      	blx	r8
 8001ef6:	4306      	orrs	r6, r0
 8001ef8:	3568      	adds	r5, #104	; 0x68
 8001efa:	e7e9      	b.n	8001ed0 <_fwalk_sglue+0x10>

08001efc <iprintf>:
 8001efc:	b40f      	push	{r0, r1, r2, r3}
 8001efe:	b507      	push	{r0, r1, r2, lr}
 8001f00:	4906      	ldr	r1, [pc, #24]	; (8001f1c <iprintf+0x20>)
 8001f02:	ab04      	add	r3, sp, #16
 8001f04:	6808      	ldr	r0, [r1, #0]
 8001f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f0a:	6881      	ldr	r1, [r0, #8]
 8001f0c:	9301      	str	r3, [sp, #4]
 8001f0e:	f000 fb61 	bl	80025d4 <_vfiprintf_r>
 8001f12:	b003      	add	sp, #12
 8001f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f18:	b004      	add	sp, #16
 8001f1a:	4770      	bx	lr
 8001f1c:	20000064 	.word	0x20000064

08001f20 <siprintf>:
 8001f20:	b40e      	push	{r1, r2, r3}
 8001f22:	b500      	push	{lr}
 8001f24:	b09c      	sub	sp, #112	; 0x70
 8001f26:	ab1d      	add	r3, sp, #116	; 0x74
 8001f28:	9002      	str	r0, [sp, #8]
 8001f2a:	9006      	str	r0, [sp, #24]
 8001f2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001f30:	4809      	ldr	r0, [pc, #36]	; (8001f58 <siprintf+0x38>)
 8001f32:	9107      	str	r1, [sp, #28]
 8001f34:	9104      	str	r1, [sp, #16]
 8001f36:	4909      	ldr	r1, [pc, #36]	; (8001f5c <siprintf+0x3c>)
 8001f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f3c:	9105      	str	r1, [sp, #20]
 8001f3e:	6800      	ldr	r0, [r0, #0]
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	a902      	add	r1, sp, #8
 8001f44:	f000 fa1e 	bl	8002384 <_svfiprintf_r>
 8001f48:	9b02      	ldr	r3, [sp, #8]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
 8001f4e:	b01c      	add	sp, #112	; 0x70
 8001f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f54:	b003      	add	sp, #12
 8001f56:	4770      	bx	lr
 8001f58:	20000064 	.word	0x20000064
 8001f5c:	ffff0208 	.word	0xffff0208

08001f60 <__sread>:
 8001f60:	b510      	push	{r4, lr}
 8001f62:	460c      	mov	r4, r1
 8001f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f68:	f000 f868 	bl	800203c <_read_r>
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	bfab      	itete	ge
 8001f70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001f72:	89a3      	ldrhlt	r3, [r4, #12]
 8001f74:	181b      	addge	r3, r3, r0
 8001f76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001f7a:	bfac      	ite	ge
 8001f7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8001f7e:	81a3      	strhlt	r3, [r4, #12]
 8001f80:	bd10      	pop	{r4, pc}

08001f82 <__swrite>:
 8001f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f86:	461f      	mov	r7, r3
 8001f88:	898b      	ldrh	r3, [r1, #12]
 8001f8a:	05db      	lsls	r3, r3, #23
 8001f8c:	4605      	mov	r5, r0
 8001f8e:	460c      	mov	r4, r1
 8001f90:	4616      	mov	r6, r2
 8001f92:	d505      	bpl.n	8001fa0 <__swrite+0x1e>
 8001f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f98:	2302      	movs	r3, #2
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f000 f83c 	bl	8002018 <_lseek_r>
 8001fa0:	89a3      	ldrh	r3, [r4, #12]
 8001fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001faa:	81a3      	strh	r3, [r4, #12]
 8001fac:	4632      	mov	r2, r6
 8001fae:	463b      	mov	r3, r7
 8001fb0:	4628      	mov	r0, r5
 8001fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fb6:	f000 b853 	b.w	8002060 <_write_r>

08001fba <__sseek>:
 8001fba:	b510      	push	{r4, lr}
 8001fbc:	460c      	mov	r4, r1
 8001fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fc2:	f000 f829 	bl	8002018 <_lseek_r>
 8001fc6:	1c43      	adds	r3, r0, #1
 8001fc8:	89a3      	ldrh	r3, [r4, #12]
 8001fca:	bf15      	itete	ne
 8001fcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8001fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001fd6:	81a3      	strheq	r3, [r4, #12]
 8001fd8:	bf18      	it	ne
 8001fda:	81a3      	strhne	r3, [r4, #12]
 8001fdc:	bd10      	pop	{r4, pc}

08001fde <__sclose>:
 8001fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fe2:	f000 b809 	b.w	8001ff8 <_close_r>

08001fe6 <memset>:
 8001fe6:	4402      	add	r2, r0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d100      	bne.n	8001ff0 <memset+0xa>
 8001fee:	4770      	bx	lr
 8001ff0:	f803 1b01 	strb.w	r1, [r3], #1
 8001ff4:	e7f9      	b.n	8001fea <memset+0x4>
	...

08001ff8 <_close_r>:
 8001ff8:	b538      	push	{r3, r4, r5, lr}
 8001ffa:	4d06      	ldr	r5, [pc, #24]	; (8002014 <_close_r+0x1c>)
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	4604      	mov	r4, r0
 8002000:	4608      	mov	r0, r1
 8002002:	602b      	str	r3, [r5, #0]
 8002004:	f7fe fcb1 	bl	800096a <_close>
 8002008:	1c43      	adds	r3, r0, #1
 800200a:	d102      	bne.n	8002012 <_close_r+0x1a>
 800200c:	682b      	ldr	r3, [r5, #0]
 800200e:	b103      	cbz	r3, 8002012 <_close_r+0x1a>
 8002010:	6023      	str	r3, [r4, #0]
 8002012:	bd38      	pop	{r3, r4, r5, pc}
 8002014:	20000210 	.word	0x20000210

08002018 <_lseek_r>:
 8002018:	b538      	push	{r3, r4, r5, lr}
 800201a:	4d07      	ldr	r5, [pc, #28]	; (8002038 <_lseek_r+0x20>)
 800201c:	4604      	mov	r4, r0
 800201e:	4608      	mov	r0, r1
 8002020:	4611      	mov	r1, r2
 8002022:	2200      	movs	r2, #0
 8002024:	602a      	str	r2, [r5, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	f7fe fcc6 	bl	80009b8 <_lseek>
 800202c:	1c43      	adds	r3, r0, #1
 800202e:	d102      	bne.n	8002036 <_lseek_r+0x1e>
 8002030:	682b      	ldr	r3, [r5, #0]
 8002032:	b103      	cbz	r3, 8002036 <_lseek_r+0x1e>
 8002034:	6023      	str	r3, [r4, #0]
 8002036:	bd38      	pop	{r3, r4, r5, pc}
 8002038:	20000210 	.word	0x20000210

0800203c <_read_r>:
 800203c:	b538      	push	{r3, r4, r5, lr}
 800203e:	4d07      	ldr	r5, [pc, #28]	; (800205c <_read_r+0x20>)
 8002040:	4604      	mov	r4, r0
 8002042:	4608      	mov	r0, r1
 8002044:	4611      	mov	r1, r2
 8002046:	2200      	movs	r2, #0
 8002048:	602a      	str	r2, [r5, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	f7fe fc54 	bl	80008f8 <_read>
 8002050:	1c43      	adds	r3, r0, #1
 8002052:	d102      	bne.n	800205a <_read_r+0x1e>
 8002054:	682b      	ldr	r3, [r5, #0]
 8002056:	b103      	cbz	r3, 800205a <_read_r+0x1e>
 8002058:	6023      	str	r3, [r4, #0]
 800205a:	bd38      	pop	{r3, r4, r5, pc}
 800205c:	20000210 	.word	0x20000210

08002060 <_write_r>:
 8002060:	b538      	push	{r3, r4, r5, lr}
 8002062:	4d07      	ldr	r5, [pc, #28]	; (8002080 <_write_r+0x20>)
 8002064:	4604      	mov	r4, r0
 8002066:	4608      	mov	r0, r1
 8002068:	4611      	mov	r1, r2
 800206a:	2200      	movs	r2, #0
 800206c:	602a      	str	r2, [r5, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	f7fe fc5f 	bl	8000932 <_write>
 8002074:	1c43      	adds	r3, r0, #1
 8002076:	d102      	bne.n	800207e <_write_r+0x1e>
 8002078:	682b      	ldr	r3, [r5, #0]
 800207a:	b103      	cbz	r3, 800207e <_write_r+0x1e>
 800207c:	6023      	str	r3, [r4, #0]
 800207e:	bd38      	pop	{r3, r4, r5, pc}
 8002080:	20000210 	.word	0x20000210

08002084 <__errno>:
 8002084:	4b01      	ldr	r3, [pc, #4]	; (800208c <__errno+0x8>)
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000064 	.word	0x20000064

08002090 <__libc_init_array>:
 8002090:	b570      	push	{r4, r5, r6, lr}
 8002092:	4d0d      	ldr	r5, [pc, #52]	; (80020c8 <__libc_init_array+0x38>)
 8002094:	4c0d      	ldr	r4, [pc, #52]	; (80020cc <__libc_init_array+0x3c>)
 8002096:	1b64      	subs	r4, r4, r5
 8002098:	10a4      	asrs	r4, r4, #2
 800209a:	2600      	movs	r6, #0
 800209c:	42a6      	cmp	r6, r4
 800209e:	d109      	bne.n	80020b4 <__libc_init_array+0x24>
 80020a0:	4d0b      	ldr	r5, [pc, #44]	; (80020d0 <__libc_init_array+0x40>)
 80020a2:	4c0c      	ldr	r4, [pc, #48]	; (80020d4 <__libc_init_array+0x44>)
 80020a4:	f000 ff78 	bl	8002f98 <_init>
 80020a8:	1b64      	subs	r4, r4, r5
 80020aa:	10a4      	asrs	r4, r4, #2
 80020ac:	2600      	movs	r6, #0
 80020ae:	42a6      	cmp	r6, r4
 80020b0:	d105      	bne.n	80020be <__libc_init_array+0x2e>
 80020b2:	bd70      	pop	{r4, r5, r6, pc}
 80020b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020b8:	4798      	blx	r3
 80020ba:	3601      	adds	r6, #1
 80020bc:	e7ee      	b.n	800209c <__libc_init_array+0xc>
 80020be:	f855 3b04 	ldr.w	r3, [r5], #4
 80020c2:	4798      	blx	r3
 80020c4:	3601      	adds	r6, #1
 80020c6:	e7f2      	b.n	80020ae <__libc_init_array+0x1e>
 80020c8:	08003058 	.word	0x08003058
 80020cc:	08003058 	.word	0x08003058
 80020d0:	08003058 	.word	0x08003058
 80020d4:	0800305c 	.word	0x0800305c

080020d8 <__retarget_lock_init_recursive>:
 80020d8:	4770      	bx	lr

080020da <__retarget_lock_acquire_recursive>:
 80020da:	4770      	bx	lr

080020dc <__retarget_lock_release_recursive>:
 80020dc:	4770      	bx	lr
	...

080020e0 <_free_r>:
 80020e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80020e2:	2900      	cmp	r1, #0
 80020e4:	d044      	beq.n	8002170 <_free_r+0x90>
 80020e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020ea:	9001      	str	r0, [sp, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f1a1 0404 	sub.w	r4, r1, #4
 80020f2:	bfb8      	it	lt
 80020f4:	18e4      	addlt	r4, r4, r3
 80020f6:	f000 f8df 	bl	80022b8 <__malloc_lock>
 80020fa:	4a1e      	ldr	r2, [pc, #120]	; (8002174 <_free_r+0x94>)
 80020fc:	9801      	ldr	r0, [sp, #4]
 80020fe:	6813      	ldr	r3, [r2, #0]
 8002100:	b933      	cbnz	r3, 8002110 <_free_r+0x30>
 8002102:	6063      	str	r3, [r4, #4]
 8002104:	6014      	str	r4, [r2, #0]
 8002106:	b003      	add	sp, #12
 8002108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800210c:	f000 b8da 	b.w	80022c4 <__malloc_unlock>
 8002110:	42a3      	cmp	r3, r4
 8002112:	d908      	bls.n	8002126 <_free_r+0x46>
 8002114:	6825      	ldr	r5, [r4, #0]
 8002116:	1961      	adds	r1, r4, r5
 8002118:	428b      	cmp	r3, r1
 800211a:	bf01      	itttt	eq
 800211c:	6819      	ldreq	r1, [r3, #0]
 800211e:	685b      	ldreq	r3, [r3, #4]
 8002120:	1949      	addeq	r1, r1, r5
 8002122:	6021      	streq	r1, [r4, #0]
 8002124:	e7ed      	b.n	8002102 <_free_r+0x22>
 8002126:	461a      	mov	r2, r3
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	b10b      	cbz	r3, 8002130 <_free_r+0x50>
 800212c:	42a3      	cmp	r3, r4
 800212e:	d9fa      	bls.n	8002126 <_free_r+0x46>
 8002130:	6811      	ldr	r1, [r2, #0]
 8002132:	1855      	adds	r5, r2, r1
 8002134:	42a5      	cmp	r5, r4
 8002136:	d10b      	bne.n	8002150 <_free_r+0x70>
 8002138:	6824      	ldr	r4, [r4, #0]
 800213a:	4421      	add	r1, r4
 800213c:	1854      	adds	r4, r2, r1
 800213e:	42a3      	cmp	r3, r4
 8002140:	6011      	str	r1, [r2, #0]
 8002142:	d1e0      	bne.n	8002106 <_free_r+0x26>
 8002144:	681c      	ldr	r4, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	6053      	str	r3, [r2, #4]
 800214a:	440c      	add	r4, r1
 800214c:	6014      	str	r4, [r2, #0]
 800214e:	e7da      	b.n	8002106 <_free_r+0x26>
 8002150:	d902      	bls.n	8002158 <_free_r+0x78>
 8002152:	230c      	movs	r3, #12
 8002154:	6003      	str	r3, [r0, #0]
 8002156:	e7d6      	b.n	8002106 <_free_r+0x26>
 8002158:	6825      	ldr	r5, [r4, #0]
 800215a:	1961      	adds	r1, r4, r5
 800215c:	428b      	cmp	r3, r1
 800215e:	bf04      	itt	eq
 8002160:	6819      	ldreq	r1, [r3, #0]
 8002162:	685b      	ldreq	r3, [r3, #4]
 8002164:	6063      	str	r3, [r4, #4]
 8002166:	bf04      	itt	eq
 8002168:	1949      	addeq	r1, r1, r5
 800216a:	6021      	streq	r1, [r4, #0]
 800216c:	6054      	str	r4, [r2, #4]
 800216e:	e7ca      	b.n	8002106 <_free_r+0x26>
 8002170:	b003      	add	sp, #12
 8002172:	bd30      	pop	{r4, r5, pc}
 8002174:	20000218 	.word	0x20000218

08002178 <sbrk_aligned>:
 8002178:	b570      	push	{r4, r5, r6, lr}
 800217a:	4e0e      	ldr	r6, [pc, #56]	; (80021b4 <sbrk_aligned+0x3c>)
 800217c:	460c      	mov	r4, r1
 800217e:	6831      	ldr	r1, [r6, #0]
 8002180:	4605      	mov	r5, r0
 8002182:	b911      	cbnz	r1, 800218a <sbrk_aligned+0x12>
 8002184:	f000 fe2e 	bl	8002de4 <_sbrk_r>
 8002188:	6030      	str	r0, [r6, #0]
 800218a:	4621      	mov	r1, r4
 800218c:	4628      	mov	r0, r5
 800218e:	f000 fe29 	bl	8002de4 <_sbrk_r>
 8002192:	1c43      	adds	r3, r0, #1
 8002194:	d00a      	beq.n	80021ac <sbrk_aligned+0x34>
 8002196:	1cc4      	adds	r4, r0, #3
 8002198:	f024 0403 	bic.w	r4, r4, #3
 800219c:	42a0      	cmp	r0, r4
 800219e:	d007      	beq.n	80021b0 <sbrk_aligned+0x38>
 80021a0:	1a21      	subs	r1, r4, r0
 80021a2:	4628      	mov	r0, r5
 80021a4:	f000 fe1e 	bl	8002de4 <_sbrk_r>
 80021a8:	3001      	adds	r0, #1
 80021aa:	d101      	bne.n	80021b0 <sbrk_aligned+0x38>
 80021ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80021b0:	4620      	mov	r0, r4
 80021b2:	bd70      	pop	{r4, r5, r6, pc}
 80021b4:	2000021c 	.word	0x2000021c

080021b8 <_malloc_r>:
 80021b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021bc:	1ccd      	adds	r5, r1, #3
 80021be:	f025 0503 	bic.w	r5, r5, #3
 80021c2:	3508      	adds	r5, #8
 80021c4:	2d0c      	cmp	r5, #12
 80021c6:	bf38      	it	cc
 80021c8:	250c      	movcc	r5, #12
 80021ca:	2d00      	cmp	r5, #0
 80021cc:	4607      	mov	r7, r0
 80021ce:	db01      	blt.n	80021d4 <_malloc_r+0x1c>
 80021d0:	42a9      	cmp	r1, r5
 80021d2:	d905      	bls.n	80021e0 <_malloc_r+0x28>
 80021d4:	230c      	movs	r3, #12
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	2600      	movs	r6, #0
 80021da:	4630      	mov	r0, r6
 80021dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80022b4 <_malloc_r+0xfc>
 80021e4:	f000 f868 	bl	80022b8 <__malloc_lock>
 80021e8:	f8d8 3000 	ldr.w	r3, [r8]
 80021ec:	461c      	mov	r4, r3
 80021ee:	bb5c      	cbnz	r4, 8002248 <_malloc_r+0x90>
 80021f0:	4629      	mov	r1, r5
 80021f2:	4638      	mov	r0, r7
 80021f4:	f7ff ffc0 	bl	8002178 <sbrk_aligned>
 80021f8:	1c43      	adds	r3, r0, #1
 80021fa:	4604      	mov	r4, r0
 80021fc:	d155      	bne.n	80022aa <_malloc_r+0xf2>
 80021fe:	f8d8 4000 	ldr.w	r4, [r8]
 8002202:	4626      	mov	r6, r4
 8002204:	2e00      	cmp	r6, #0
 8002206:	d145      	bne.n	8002294 <_malloc_r+0xdc>
 8002208:	2c00      	cmp	r4, #0
 800220a:	d048      	beq.n	800229e <_malloc_r+0xe6>
 800220c:	6823      	ldr	r3, [r4, #0]
 800220e:	4631      	mov	r1, r6
 8002210:	4638      	mov	r0, r7
 8002212:	eb04 0903 	add.w	r9, r4, r3
 8002216:	f000 fde5 	bl	8002de4 <_sbrk_r>
 800221a:	4581      	cmp	r9, r0
 800221c:	d13f      	bne.n	800229e <_malloc_r+0xe6>
 800221e:	6821      	ldr	r1, [r4, #0]
 8002220:	1a6d      	subs	r5, r5, r1
 8002222:	4629      	mov	r1, r5
 8002224:	4638      	mov	r0, r7
 8002226:	f7ff ffa7 	bl	8002178 <sbrk_aligned>
 800222a:	3001      	adds	r0, #1
 800222c:	d037      	beq.n	800229e <_malloc_r+0xe6>
 800222e:	6823      	ldr	r3, [r4, #0]
 8002230:	442b      	add	r3, r5
 8002232:	6023      	str	r3, [r4, #0]
 8002234:	f8d8 3000 	ldr.w	r3, [r8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d038      	beq.n	80022ae <_malloc_r+0xf6>
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	42a2      	cmp	r2, r4
 8002240:	d12b      	bne.n	800229a <_malloc_r+0xe2>
 8002242:	2200      	movs	r2, #0
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	e00f      	b.n	8002268 <_malloc_r+0xb0>
 8002248:	6822      	ldr	r2, [r4, #0]
 800224a:	1b52      	subs	r2, r2, r5
 800224c:	d41f      	bmi.n	800228e <_malloc_r+0xd6>
 800224e:	2a0b      	cmp	r2, #11
 8002250:	d917      	bls.n	8002282 <_malloc_r+0xca>
 8002252:	1961      	adds	r1, r4, r5
 8002254:	42a3      	cmp	r3, r4
 8002256:	6025      	str	r5, [r4, #0]
 8002258:	bf18      	it	ne
 800225a:	6059      	strne	r1, [r3, #4]
 800225c:	6863      	ldr	r3, [r4, #4]
 800225e:	bf08      	it	eq
 8002260:	f8c8 1000 	streq.w	r1, [r8]
 8002264:	5162      	str	r2, [r4, r5]
 8002266:	604b      	str	r3, [r1, #4]
 8002268:	4638      	mov	r0, r7
 800226a:	f104 060b 	add.w	r6, r4, #11
 800226e:	f000 f829 	bl	80022c4 <__malloc_unlock>
 8002272:	f026 0607 	bic.w	r6, r6, #7
 8002276:	1d23      	adds	r3, r4, #4
 8002278:	1af2      	subs	r2, r6, r3
 800227a:	d0ae      	beq.n	80021da <_malloc_r+0x22>
 800227c:	1b9b      	subs	r3, r3, r6
 800227e:	50a3      	str	r3, [r4, r2]
 8002280:	e7ab      	b.n	80021da <_malloc_r+0x22>
 8002282:	42a3      	cmp	r3, r4
 8002284:	6862      	ldr	r2, [r4, #4]
 8002286:	d1dd      	bne.n	8002244 <_malloc_r+0x8c>
 8002288:	f8c8 2000 	str.w	r2, [r8]
 800228c:	e7ec      	b.n	8002268 <_malloc_r+0xb0>
 800228e:	4623      	mov	r3, r4
 8002290:	6864      	ldr	r4, [r4, #4]
 8002292:	e7ac      	b.n	80021ee <_malloc_r+0x36>
 8002294:	4634      	mov	r4, r6
 8002296:	6876      	ldr	r6, [r6, #4]
 8002298:	e7b4      	b.n	8002204 <_malloc_r+0x4c>
 800229a:	4613      	mov	r3, r2
 800229c:	e7cc      	b.n	8002238 <_malloc_r+0x80>
 800229e:	230c      	movs	r3, #12
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	4638      	mov	r0, r7
 80022a4:	f000 f80e 	bl	80022c4 <__malloc_unlock>
 80022a8:	e797      	b.n	80021da <_malloc_r+0x22>
 80022aa:	6025      	str	r5, [r4, #0]
 80022ac:	e7dc      	b.n	8002268 <_malloc_r+0xb0>
 80022ae:	605b      	str	r3, [r3, #4]
 80022b0:	deff      	udf	#255	; 0xff
 80022b2:	bf00      	nop
 80022b4:	20000218 	.word	0x20000218

080022b8 <__malloc_lock>:
 80022b8:	4801      	ldr	r0, [pc, #4]	; (80022c0 <__malloc_lock+0x8>)
 80022ba:	f7ff bf0e 	b.w	80020da <__retarget_lock_acquire_recursive>
 80022be:	bf00      	nop
 80022c0:	20000214 	.word	0x20000214

080022c4 <__malloc_unlock>:
 80022c4:	4801      	ldr	r0, [pc, #4]	; (80022cc <__malloc_unlock+0x8>)
 80022c6:	f7ff bf09 	b.w	80020dc <__retarget_lock_release_recursive>
 80022ca:	bf00      	nop
 80022cc:	20000214 	.word	0x20000214

080022d0 <__ssputs_r>:
 80022d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022d4:	688e      	ldr	r6, [r1, #8]
 80022d6:	461f      	mov	r7, r3
 80022d8:	42be      	cmp	r6, r7
 80022da:	680b      	ldr	r3, [r1, #0]
 80022dc:	4682      	mov	sl, r0
 80022de:	460c      	mov	r4, r1
 80022e0:	4690      	mov	r8, r2
 80022e2:	d82c      	bhi.n	800233e <__ssputs_r+0x6e>
 80022e4:	898a      	ldrh	r2, [r1, #12]
 80022e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80022ea:	d026      	beq.n	800233a <__ssputs_r+0x6a>
 80022ec:	6965      	ldr	r5, [r4, #20]
 80022ee:	6909      	ldr	r1, [r1, #16]
 80022f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80022f4:	eba3 0901 	sub.w	r9, r3, r1
 80022f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80022fc:	1c7b      	adds	r3, r7, #1
 80022fe:	444b      	add	r3, r9
 8002300:	106d      	asrs	r5, r5, #1
 8002302:	429d      	cmp	r5, r3
 8002304:	bf38      	it	cc
 8002306:	461d      	movcc	r5, r3
 8002308:	0553      	lsls	r3, r2, #21
 800230a:	d527      	bpl.n	800235c <__ssputs_r+0x8c>
 800230c:	4629      	mov	r1, r5
 800230e:	f7ff ff53 	bl	80021b8 <_malloc_r>
 8002312:	4606      	mov	r6, r0
 8002314:	b360      	cbz	r0, 8002370 <__ssputs_r+0xa0>
 8002316:	6921      	ldr	r1, [r4, #16]
 8002318:	464a      	mov	r2, r9
 800231a:	f000 fd73 	bl	8002e04 <memcpy>
 800231e:	89a3      	ldrh	r3, [r4, #12]
 8002320:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002328:	81a3      	strh	r3, [r4, #12]
 800232a:	6126      	str	r6, [r4, #16]
 800232c:	6165      	str	r5, [r4, #20]
 800232e:	444e      	add	r6, r9
 8002330:	eba5 0509 	sub.w	r5, r5, r9
 8002334:	6026      	str	r6, [r4, #0]
 8002336:	60a5      	str	r5, [r4, #8]
 8002338:	463e      	mov	r6, r7
 800233a:	42be      	cmp	r6, r7
 800233c:	d900      	bls.n	8002340 <__ssputs_r+0x70>
 800233e:	463e      	mov	r6, r7
 8002340:	6820      	ldr	r0, [r4, #0]
 8002342:	4632      	mov	r2, r6
 8002344:	4641      	mov	r1, r8
 8002346:	f000 fd33 	bl	8002db0 <memmove>
 800234a:	68a3      	ldr	r3, [r4, #8]
 800234c:	1b9b      	subs	r3, r3, r6
 800234e:	60a3      	str	r3, [r4, #8]
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	4433      	add	r3, r6
 8002354:	6023      	str	r3, [r4, #0]
 8002356:	2000      	movs	r0, #0
 8002358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800235c:	462a      	mov	r2, r5
 800235e:	f000 fd5f 	bl	8002e20 <_realloc_r>
 8002362:	4606      	mov	r6, r0
 8002364:	2800      	cmp	r0, #0
 8002366:	d1e0      	bne.n	800232a <__ssputs_r+0x5a>
 8002368:	6921      	ldr	r1, [r4, #16]
 800236a:	4650      	mov	r0, sl
 800236c:	f7ff feb8 	bl	80020e0 <_free_r>
 8002370:	230c      	movs	r3, #12
 8002372:	f8ca 3000 	str.w	r3, [sl]
 8002376:	89a3      	ldrh	r3, [r4, #12]
 8002378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800237c:	81a3      	strh	r3, [r4, #12]
 800237e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002382:	e7e9      	b.n	8002358 <__ssputs_r+0x88>

08002384 <_svfiprintf_r>:
 8002384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002388:	4698      	mov	r8, r3
 800238a:	898b      	ldrh	r3, [r1, #12]
 800238c:	061b      	lsls	r3, r3, #24
 800238e:	b09d      	sub	sp, #116	; 0x74
 8002390:	4607      	mov	r7, r0
 8002392:	460d      	mov	r5, r1
 8002394:	4614      	mov	r4, r2
 8002396:	d50e      	bpl.n	80023b6 <_svfiprintf_r+0x32>
 8002398:	690b      	ldr	r3, [r1, #16]
 800239a:	b963      	cbnz	r3, 80023b6 <_svfiprintf_r+0x32>
 800239c:	2140      	movs	r1, #64	; 0x40
 800239e:	f7ff ff0b 	bl	80021b8 <_malloc_r>
 80023a2:	6028      	str	r0, [r5, #0]
 80023a4:	6128      	str	r0, [r5, #16]
 80023a6:	b920      	cbnz	r0, 80023b2 <_svfiprintf_r+0x2e>
 80023a8:	230c      	movs	r3, #12
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023b0:	e0d0      	b.n	8002554 <_svfiprintf_r+0x1d0>
 80023b2:	2340      	movs	r3, #64	; 0x40
 80023b4:	616b      	str	r3, [r5, #20]
 80023b6:	2300      	movs	r3, #0
 80023b8:	9309      	str	r3, [sp, #36]	; 0x24
 80023ba:	2320      	movs	r3, #32
 80023bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80023c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80023c4:	2330      	movs	r3, #48	; 0x30
 80023c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800256c <_svfiprintf_r+0x1e8>
 80023ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80023ce:	f04f 0901 	mov.w	r9, #1
 80023d2:	4623      	mov	r3, r4
 80023d4:	469a      	mov	sl, r3
 80023d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80023da:	b10a      	cbz	r2, 80023e0 <_svfiprintf_r+0x5c>
 80023dc:	2a25      	cmp	r2, #37	; 0x25
 80023de:	d1f9      	bne.n	80023d4 <_svfiprintf_r+0x50>
 80023e0:	ebba 0b04 	subs.w	fp, sl, r4
 80023e4:	d00b      	beq.n	80023fe <_svfiprintf_r+0x7a>
 80023e6:	465b      	mov	r3, fp
 80023e8:	4622      	mov	r2, r4
 80023ea:	4629      	mov	r1, r5
 80023ec:	4638      	mov	r0, r7
 80023ee:	f7ff ff6f 	bl	80022d0 <__ssputs_r>
 80023f2:	3001      	adds	r0, #1
 80023f4:	f000 80a9 	beq.w	800254a <_svfiprintf_r+0x1c6>
 80023f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023fa:	445a      	add	r2, fp
 80023fc:	9209      	str	r2, [sp, #36]	; 0x24
 80023fe:	f89a 3000 	ldrb.w	r3, [sl]
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 80a1 	beq.w	800254a <_svfiprintf_r+0x1c6>
 8002408:	2300      	movs	r3, #0
 800240a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800240e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002412:	f10a 0a01 	add.w	sl, sl, #1
 8002416:	9304      	str	r3, [sp, #16]
 8002418:	9307      	str	r3, [sp, #28]
 800241a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800241e:	931a      	str	r3, [sp, #104]	; 0x68
 8002420:	4654      	mov	r4, sl
 8002422:	2205      	movs	r2, #5
 8002424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002428:	4850      	ldr	r0, [pc, #320]	; (800256c <_svfiprintf_r+0x1e8>)
 800242a:	f7fd fed1 	bl	80001d0 <memchr>
 800242e:	9a04      	ldr	r2, [sp, #16]
 8002430:	b9d8      	cbnz	r0, 800246a <_svfiprintf_r+0xe6>
 8002432:	06d0      	lsls	r0, r2, #27
 8002434:	bf44      	itt	mi
 8002436:	2320      	movmi	r3, #32
 8002438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800243c:	0711      	lsls	r1, r2, #28
 800243e:	bf44      	itt	mi
 8002440:	232b      	movmi	r3, #43	; 0x2b
 8002442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002446:	f89a 3000 	ldrb.w	r3, [sl]
 800244a:	2b2a      	cmp	r3, #42	; 0x2a
 800244c:	d015      	beq.n	800247a <_svfiprintf_r+0xf6>
 800244e:	9a07      	ldr	r2, [sp, #28]
 8002450:	4654      	mov	r4, sl
 8002452:	2000      	movs	r0, #0
 8002454:	f04f 0c0a 	mov.w	ip, #10
 8002458:	4621      	mov	r1, r4
 800245a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800245e:	3b30      	subs	r3, #48	; 0x30
 8002460:	2b09      	cmp	r3, #9
 8002462:	d94d      	bls.n	8002500 <_svfiprintf_r+0x17c>
 8002464:	b1b0      	cbz	r0, 8002494 <_svfiprintf_r+0x110>
 8002466:	9207      	str	r2, [sp, #28]
 8002468:	e014      	b.n	8002494 <_svfiprintf_r+0x110>
 800246a:	eba0 0308 	sub.w	r3, r0, r8
 800246e:	fa09 f303 	lsl.w	r3, r9, r3
 8002472:	4313      	orrs	r3, r2
 8002474:	9304      	str	r3, [sp, #16]
 8002476:	46a2      	mov	sl, r4
 8002478:	e7d2      	b.n	8002420 <_svfiprintf_r+0x9c>
 800247a:	9b03      	ldr	r3, [sp, #12]
 800247c:	1d19      	adds	r1, r3, #4
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	9103      	str	r1, [sp, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	bfbb      	ittet	lt
 8002486:	425b      	neglt	r3, r3
 8002488:	f042 0202 	orrlt.w	r2, r2, #2
 800248c:	9307      	strge	r3, [sp, #28]
 800248e:	9307      	strlt	r3, [sp, #28]
 8002490:	bfb8      	it	lt
 8002492:	9204      	strlt	r2, [sp, #16]
 8002494:	7823      	ldrb	r3, [r4, #0]
 8002496:	2b2e      	cmp	r3, #46	; 0x2e
 8002498:	d10c      	bne.n	80024b4 <_svfiprintf_r+0x130>
 800249a:	7863      	ldrb	r3, [r4, #1]
 800249c:	2b2a      	cmp	r3, #42	; 0x2a
 800249e:	d134      	bne.n	800250a <_svfiprintf_r+0x186>
 80024a0:	9b03      	ldr	r3, [sp, #12]
 80024a2:	1d1a      	adds	r2, r3, #4
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	9203      	str	r2, [sp, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	bfb8      	it	lt
 80024ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80024b0:	3402      	adds	r4, #2
 80024b2:	9305      	str	r3, [sp, #20]
 80024b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800257c <_svfiprintf_r+0x1f8>
 80024b8:	7821      	ldrb	r1, [r4, #0]
 80024ba:	2203      	movs	r2, #3
 80024bc:	4650      	mov	r0, sl
 80024be:	f7fd fe87 	bl	80001d0 <memchr>
 80024c2:	b138      	cbz	r0, 80024d4 <_svfiprintf_r+0x150>
 80024c4:	9b04      	ldr	r3, [sp, #16]
 80024c6:	eba0 000a 	sub.w	r0, r0, sl
 80024ca:	2240      	movs	r2, #64	; 0x40
 80024cc:	4082      	lsls	r2, r0
 80024ce:	4313      	orrs	r3, r2
 80024d0:	3401      	adds	r4, #1
 80024d2:	9304      	str	r3, [sp, #16]
 80024d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024d8:	4825      	ldr	r0, [pc, #148]	; (8002570 <_svfiprintf_r+0x1ec>)
 80024da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80024de:	2206      	movs	r2, #6
 80024e0:	f7fd fe76 	bl	80001d0 <memchr>
 80024e4:	2800      	cmp	r0, #0
 80024e6:	d038      	beq.n	800255a <_svfiprintf_r+0x1d6>
 80024e8:	4b22      	ldr	r3, [pc, #136]	; (8002574 <_svfiprintf_r+0x1f0>)
 80024ea:	bb1b      	cbnz	r3, 8002534 <_svfiprintf_r+0x1b0>
 80024ec:	9b03      	ldr	r3, [sp, #12]
 80024ee:	3307      	adds	r3, #7
 80024f0:	f023 0307 	bic.w	r3, r3, #7
 80024f4:	3308      	adds	r3, #8
 80024f6:	9303      	str	r3, [sp, #12]
 80024f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024fa:	4433      	add	r3, r6
 80024fc:	9309      	str	r3, [sp, #36]	; 0x24
 80024fe:	e768      	b.n	80023d2 <_svfiprintf_r+0x4e>
 8002500:	fb0c 3202 	mla	r2, ip, r2, r3
 8002504:	460c      	mov	r4, r1
 8002506:	2001      	movs	r0, #1
 8002508:	e7a6      	b.n	8002458 <_svfiprintf_r+0xd4>
 800250a:	2300      	movs	r3, #0
 800250c:	3401      	adds	r4, #1
 800250e:	9305      	str	r3, [sp, #20]
 8002510:	4619      	mov	r1, r3
 8002512:	f04f 0c0a 	mov.w	ip, #10
 8002516:	4620      	mov	r0, r4
 8002518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800251c:	3a30      	subs	r2, #48	; 0x30
 800251e:	2a09      	cmp	r2, #9
 8002520:	d903      	bls.n	800252a <_svfiprintf_r+0x1a6>
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0c6      	beq.n	80024b4 <_svfiprintf_r+0x130>
 8002526:	9105      	str	r1, [sp, #20]
 8002528:	e7c4      	b.n	80024b4 <_svfiprintf_r+0x130>
 800252a:	fb0c 2101 	mla	r1, ip, r1, r2
 800252e:	4604      	mov	r4, r0
 8002530:	2301      	movs	r3, #1
 8002532:	e7f0      	b.n	8002516 <_svfiprintf_r+0x192>
 8002534:	ab03      	add	r3, sp, #12
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	462a      	mov	r2, r5
 800253a:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <_svfiprintf_r+0x1f4>)
 800253c:	a904      	add	r1, sp, #16
 800253e:	4638      	mov	r0, r7
 8002540:	f3af 8000 	nop.w
 8002544:	1c42      	adds	r2, r0, #1
 8002546:	4606      	mov	r6, r0
 8002548:	d1d6      	bne.n	80024f8 <_svfiprintf_r+0x174>
 800254a:	89ab      	ldrh	r3, [r5, #12]
 800254c:	065b      	lsls	r3, r3, #25
 800254e:	f53f af2d 	bmi.w	80023ac <_svfiprintf_r+0x28>
 8002552:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002554:	b01d      	add	sp, #116	; 0x74
 8002556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800255a:	ab03      	add	r3, sp, #12
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	462a      	mov	r2, r5
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <_svfiprintf_r+0x1f4>)
 8002562:	a904      	add	r1, sp, #16
 8002564:	4638      	mov	r0, r7
 8002566:	f000 f9bd 	bl	80028e4 <_printf_i>
 800256a:	e7eb      	b.n	8002544 <_svfiprintf_r+0x1c0>
 800256c:	0800301c 	.word	0x0800301c
 8002570:	08003026 	.word	0x08003026
 8002574:	00000000 	.word	0x00000000
 8002578:	080022d1 	.word	0x080022d1
 800257c:	08003022 	.word	0x08003022

08002580 <__sfputc_r>:
 8002580:	6893      	ldr	r3, [r2, #8]
 8002582:	3b01      	subs	r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	b410      	push	{r4}
 8002588:	6093      	str	r3, [r2, #8]
 800258a:	da08      	bge.n	800259e <__sfputc_r+0x1e>
 800258c:	6994      	ldr	r4, [r2, #24]
 800258e:	42a3      	cmp	r3, r4
 8002590:	db01      	blt.n	8002596 <__sfputc_r+0x16>
 8002592:	290a      	cmp	r1, #10
 8002594:	d103      	bne.n	800259e <__sfputc_r+0x1e>
 8002596:	f85d 4b04 	ldr.w	r4, [sp], #4
 800259a:	f000 bb73 	b.w	8002c84 <__swbuf_r>
 800259e:	6813      	ldr	r3, [r2, #0]
 80025a0:	1c58      	adds	r0, r3, #1
 80025a2:	6010      	str	r0, [r2, #0]
 80025a4:	7019      	strb	r1, [r3, #0]
 80025a6:	4608      	mov	r0, r1
 80025a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <__sfputs_r>:
 80025ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025b0:	4606      	mov	r6, r0
 80025b2:	460f      	mov	r7, r1
 80025b4:	4614      	mov	r4, r2
 80025b6:	18d5      	adds	r5, r2, r3
 80025b8:	42ac      	cmp	r4, r5
 80025ba:	d101      	bne.n	80025c0 <__sfputs_r+0x12>
 80025bc:	2000      	movs	r0, #0
 80025be:	e007      	b.n	80025d0 <__sfputs_r+0x22>
 80025c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025c4:	463a      	mov	r2, r7
 80025c6:	4630      	mov	r0, r6
 80025c8:	f7ff ffda 	bl	8002580 <__sfputc_r>
 80025cc:	1c43      	adds	r3, r0, #1
 80025ce:	d1f3      	bne.n	80025b8 <__sfputs_r+0xa>
 80025d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080025d4 <_vfiprintf_r>:
 80025d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025d8:	460d      	mov	r5, r1
 80025da:	b09d      	sub	sp, #116	; 0x74
 80025dc:	4614      	mov	r4, r2
 80025de:	4698      	mov	r8, r3
 80025e0:	4606      	mov	r6, r0
 80025e2:	b118      	cbz	r0, 80025ec <_vfiprintf_r+0x18>
 80025e4:	6a03      	ldr	r3, [r0, #32]
 80025e6:	b90b      	cbnz	r3, 80025ec <_vfiprintf_r+0x18>
 80025e8:	f7ff fc52 	bl	8001e90 <__sinit>
 80025ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80025ee:	07d9      	lsls	r1, r3, #31
 80025f0:	d405      	bmi.n	80025fe <_vfiprintf_r+0x2a>
 80025f2:	89ab      	ldrh	r3, [r5, #12]
 80025f4:	059a      	lsls	r2, r3, #22
 80025f6:	d402      	bmi.n	80025fe <_vfiprintf_r+0x2a>
 80025f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80025fa:	f7ff fd6e 	bl	80020da <__retarget_lock_acquire_recursive>
 80025fe:	89ab      	ldrh	r3, [r5, #12]
 8002600:	071b      	lsls	r3, r3, #28
 8002602:	d501      	bpl.n	8002608 <_vfiprintf_r+0x34>
 8002604:	692b      	ldr	r3, [r5, #16]
 8002606:	b99b      	cbnz	r3, 8002630 <_vfiprintf_r+0x5c>
 8002608:	4629      	mov	r1, r5
 800260a:	4630      	mov	r0, r6
 800260c:	f000 fb78 	bl	8002d00 <__swsetup_r>
 8002610:	b170      	cbz	r0, 8002630 <_vfiprintf_r+0x5c>
 8002612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002614:	07dc      	lsls	r4, r3, #31
 8002616:	d504      	bpl.n	8002622 <_vfiprintf_r+0x4e>
 8002618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800261c:	b01d      	add	sp, #116	; 0x74
 800261e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002622:	89ab      	ldrh	r3, [r5, #12]
 8002624:	0598      	lsls	r0, r3, #22
 8002626:	d4f7      	bmi.n	8002618 <_vfiprintf_r+0x44>
 8002628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800262a:	f7ff fd57 	bl	80020dc <__retarget_lock_release_recursive>
 800262e:	e7f3      	b.n	8002618 <_vfiprintf_r+0x44>
 8002630:	2300      	movs	r3, #0
 8002632:	9309      	str	r3, [sp, #36]	; 0x24
 8002634:	2320      	movs	r3, #32
 8002636:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800263a:	f8cd 800c 	str.w	r8, [sp, #12]
 800263e:	2330      	movs	r3, #48	; 0x30
 8002640:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80027f4 <_vfiprintf_r+0x220>
 8002644:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002648:	f04f 0901 	mov.w	r9, #1
 800264c:	4623      	mov	r3, r4
 800264e:	469a      	mov	sl, r3
 8002650:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002654:	b10a      	cbz	r2, 800265a <_vfiprintf_r+0x86>
 8002656:	2a25      	cmp	r2, #37	; 0x25
 8002658:	d1f9      	bne.n	800264e <_vfiprintf_r+0x7a>
 800265a:	ebba 0b04 	subs.w	fp, sl, r4
 800265e:	d00b      	beq.n	8002678 <_vfiprintf_r+0xa4>
 8002660:	465b      	mov	r3, fp
 8002662:	4622      	mov	r2, r4
 8002664:	4629      	mov	r1, r5
 8002666:	4630      	mov	r0, r6
 8002668:	f7ff ffa1 	bl	80025ae <__sfputs_r>
 800266c:	3001      	adds	r0, #1
 800266e:	f000 80a9 	beq.w	80027c4 <_vfiprintf_r+0x1f0>
 8002672:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002674:	445a      	add	r2, fp
 8002676:	9209      	str	r2, [sp, #36]	; 0x24
 8002678:	f89a 3000 	ldrb.w	r3, [sl]
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80a1 	beq.w	80027c4 <_vfiprintf_r+0x1f0>
 8002682:	2300      	movs	r3, #0
 8002684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800268c:	f10a 0a01 	add.w	sl, sl, #1
 8002690:	9304      	str	r3, [sp, #16]
 8002692:	9307      	str	r3, [sp, #28]
 8002694:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002698:	931a      	str	r3, [sp, #104]	; 0x68
 800269a:	4654      	mov	r4, sl
 800269c:	2205      	movs	r2, #5
 800269e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026a2:	4854      	ldr	r0, [pc, #336]	; (80027f4 <_vfiprintf_r+0x220>)
 80026a4:	f7fd fd94 	bl	80001d0 <memchr>
 80026a8:	9a04      	ldr	r2, [sp, #16]
 80026aa:	b9d8      	cbnz	r0, 80026e4 <_vfiprintf_r+0x110>
 80026ac:	06d1      	lsls	r1, r2, #27
 80026ae:	bf44      	itt	mi
 80026b0:	2320      	movmi	r3, #32
 80026b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026b6:	0713      	lsls	r3, r2, #28
 80026b8:	bf44      	itt	mi
 80026ba:	232b      	movmi	r3, #43	; 0x2b
 80026bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026c0:	f89a 3000 	ldrb.w	r3, [sl]
 80026c4:	2b2a      	cmp	r3, #42	; 0x2a
 80026c6:	d015      	beq.n	80026f4 <_vfiprintf_r+0x120>
 80026c8:	9a07      	ldr	r2, [sp, #28]
 80026ca:	4654      	mov	r4, sl
 80026cc:	2000      	movs	r0, #0
 80026ce:	f04f 0c0a 	mov.w	ip, #10
 80026d2:	4621      	mov	r1, r4
 80026d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026d8:	3b30      	subs	r3, #48	; 0x30
 80026da:	2b09      	cmp	r3, #9
 80026dc:	d94d      	bls.n	800277a <_vfiprintf_r+0x1a6>
 80026de:	b1b0      	cbz	r0, 800270e <_vfiprintf_r+0x13a>
 80026e0:	9207      	str	r2, [sp, #28]
 80026e2:	e014      	b.n	800270e <_vfiprintf_r+0x13a>
 80026e4:	eba0 0308 	sub.w	r3, r0, r8
 80026e8:	fa09 f303 	lsl.w	r3, r9, r3
 80026ec:	4313      	orrs	r3, r2
 80026ee:	9304      	str	r3, [sp, #16]
 80026f0:	46a2      	mov	sl, r4
 80026f2:	e7d2      	b.n	800269a <_vfiprintf_r+0xc6>
 80026f4:	9b03      	ldr	r3, [sp, #12]
 80026f6:	1d19      	adds	r1, r3, #4
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	9103      	str	r1, [sp, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bfbb      	ittet	lt
 8002700:	425b      	neglt	r3, r3
 8002702:	f042 0202 	orrlt.w	r2, r2, #2
 8002706:	9307      	strge	r3, [sp, #28]
 8002708:	9307      	strlt	r3, [sp, #28]
 800270a:	bfb8      	it	lt
 800270c:	9204      	strlt	r2, [sp, #16]
 800270e:	7823      	ldrb	r3, [r4, #0]
 8002710:	2b2e      	cmp	r3, #46	; 0x2e
 8002712:	d10c      	bne.n	800272e <_vfiprintf_r+0x15a>
 8002714:	7863      	ldrb	r3, [r4, #1]
 8002716:	2b2a      	cmp	r3, #42	; 0x2a
 8002718:	d134      	bne.n	8002784 <_vfiprintf_r+0x1b0>
 800271a:	9b03      	ldr	r3, [sp, #12]
 800271c:	1d1a      	adds	r2, r3, #4
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	9203      	str	r2, [sp, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	bfb8      	it	lt
 8002726:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800272a:	3402      	adds	r4, #2
 800272c:	9305      	str	r3, [sp, #20]
 800272e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002804 <_vfiprintf_r+0x230>
 8002732:	7821      	ldrb	r1, [r4, #0]
 8002734:	2203      	movs	r2, #3
 8002736:	4650      	mov	r0, sl
 8002738:	f7fd fd4a 	bl	80001d0 <memchr>
 800273c:	b138      	cbz	r0, 800274e <_vfiprintf_r+0x17a>
 800273e:	9b04      	ldr	r3, [sp, #16]
 8002740:	eba0 000a 	sub.w	r0, r0, sl
 8002744:	2240      	movs	r2, #64	; 0x40
 8002746:	4082      	lsls	r2, r0
 8002748:	4313      	orrs	r3, r2
 800274a:	3401      	adds	r4, #1
 800274c:	9304      	str	r3, [sp, #16]
 800274e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002752:	4829      	ldr	r0, [pc, #164]	; (80027f8 <_vfiprintf_r+0x224>)
 8002754:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002758:	2206      	movs	r2, #6
 800275a:	f7fd fd39 	bl	80001d0 <memchr>
 800275e:	2800      	cmp	r0, #0
 8002760:	d03f      	beq.n	80027e2 <_vfiprintf_r+0x20e>
 8002762:	4b26      	ldr	r3, [pc, #152]	; (80027fc <_vfiprintf_r+0x228>)
 8002764:	bb1b      	cbnz	r3, 80027ae <_vfiprintf_r+0x1da>
 8002766:	9b03      	ldr	r3, [sp, #12]
 8002768:	3307      	adds	r3, #7
 800276a:	f023 0307 	bic.w	r3, r3, #7
 800276e:	3308      	adds	r3, #8
 8002770:	9303      	str	r3, [sp, #12]
 8002772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002774:	443b      	add	r3, r7
 8002776:	9309      	str	r3, [sp, #36]	; 0x24
 8002778:	e768      	b.n	800264c <_vfiprintf_r+0x78>
 800277a:	fb0c 3202 	mla	r2, ip, r2, r3
 800277e:	460c      	mov	r4, r1
 8002780:	2001      	movs	r0, #1
 8002782:	e7a6      	b.n	80026d2 <_vfiprintf_r+0xfe>
 8002784:	2300      	movs	r3, #0
 8002786:	3401      	adds	r4, #1
 8002788:	9305      	str	r3, [sp, #20]
 800278a:	4619      	mov	r1, r3
 800278c:	f04f 0c0a 	mov.w	ip, #10
 8002790:	4620      	mov	r0, r4
 8002792:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002796:	3a30      	subs	r2, #48	; 0x30
 8002798:	2a09      	cmp	r2, #9
 800279a:	d903      	bls.n	80027a4 <_vfiprintf_r+0x1d0>
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0c6      	beq.n	800272e <_vfiprintf_r+0x15a>
 80027a0:	9105      	str	r1, [sp, #20]
 80027a2:	e7c4      	b.n	800272e <_vfiprintf_r+0x15a>
 80027a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80027a8:	4604      	mov	r4, r0
 80027aa:	2301      	movs	r3, #1
 80027ac:	e7f0      	b.n	8002790 <_vfiprintf_r+0x1bc>
 80027ae:	ab03      	add	r3, sp, #12
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	462a      	mov	r2, r5
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <_vfiprintf_r+0x22c>)
 80027b6:	a904      	add	r1, sp, #16
 80027b8:	4630      	mov	r0, r6
 80027ba:	f3af 8000 	nop.w
 80027be:	4607      	mov	r7, r0
 80027c0:	1c78      	adds	r0, r7, #1
 80027c2:	d1d6      	bne.n	8002772 <_vfiprintf_r+0x19e>
 80027c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027c6:	07d9      	lsls	r1, r3, #31
 80027c8:	d405      	bmi.n	80027d6 <_vfiprintf_r+0x202>
 80027ca:	89ab      	ldrh	r3, [r5, #12]
 80027cc:	059a      	lsls	r2, r3, #22
 80027ce:	d402      	bmi.n	80027d6 <_vfiprintf_r+0x202>
 80027d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027d2:	f7ff fc83 	bl	80020dc <__retarget_lock_release_recursive>
 80027d6:	89ab      	ldrh	r3, [r5, #12]
 80027d8:	065b      	lsls	r3, r3, #25
 80027da:	f53f af1d 	bmi.w	8002618 <_vfiprintf_r+0x44>
 80027de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027e0:	e71c      	b.n	800261c <_vfiprintf_r+0x48>
 80027e2:	ab03      	add	r3, sp, #12
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	462a      	mov	r2, r5
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <_vfiprintf_r+0x22c>)
 80027ea:	a904      	add	r1, sp, #16
 80027ec:	4630      	mov	r0, r6
 80027ee:	f000 f879 	bl	80028e4 <_printf_i>
 80027f2:	e7e4      	b.n	80027be <_vfiprintf_r+0x1ea>
 80027f4:	0800301c 	.word	0x0800301c
 80027f8:	08003026 	.word	0x08003026
 80027fc:	00000000 	.word	0x00000000
 8002800:	080025af 	.word	0x080025af
 8002804:	08003022 	.word	0x08003022

08002808 <_printf_common>:
 8002808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800280c:	4616      	mov	r6, r2
 800280e:	4699      	mov	r9, r3
 8002810:	688a      	ldr	r2, [r1, #8]
 8002812:	690b      	ldr	r3, [r1, #16]
 8002814:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002818:	4293      	cmp	r3, r2
 800281a:	bfb8      	it	lt
 800281c:	4613      	movlt	r3, r2
 800281e:	6033      	str	r3, [r6, #0]
 8002820:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002824:	4607      	mov	r7, r0
 8002826:	460c      	mov	r4, r1
 8002828:	b10a      	cbz	r2, 800282e <_printf_common+0x26>
 800282a:	3301      	adds	r3, #1
 800282c:	6033      	str	r3, [r6, #0]
 800282e:	6823      	ldr	r3, [r4, #0]
 8002830:	0699      	lsls	r1, r3, #26
 8002832:	bf42      	ittt	mi
 8002834:	6833      	ldrmi	r3, [r6, #0]
 8002836:	3302      	addmi	r3, #2
 8002838:	6033      	strmi	r3, [r6, #0]
 800283a:	6825      	ldr	r5, [r4, #0]
 800283c:	f015 0506 	ands.w	r5, r5, #6
 8002840:	d106      	bne.n	8002850 <_printf_common+0x48>
 8002842:	f104 0a19 	add.w	sl, r4, #25
 8002846:	68e3      	ldr	r3, [r4, #12]
 8002848:	6832      	ldr	r2, [r6, #0]
 800284a:	1a9b      	subs	r3, r3, r2
 800284c:	42ab      	cmp	r3, r5
 800284e:	dc26      	bgt.n	800289e <_printf_common+0x96>
 8002850:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002854:	1e13      	subs	r3, r2, #0
 8002856:	6822      	ldr	r2, [r4, #0]
 8002858:	bf18      	it	ne
 800285a:	2301      	movne	r3, #1
 800285c:	0692      	lsls	r2, r2, #26
 800285e:	d42b      	bmi.n	80028b8 <_printf_common+0xb0>
 8002860:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002864:	4649      	mov	r1, r9
 8002866:	4638      	mov	r0, r7
 8002868:	47c0      	blx	r8
 800286a:	3001      	adds	r0, #1
 800286c:	d01e      	beq.n	80028ac <_printf_common+0xa4>
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	6922      	ldr	r2, [r4, #16]
 8002872:	f003 0306 	and.w	r3, r3, #6
 8002876:	2b04      	cmp	r3, #4
 8002878:	bf02      	ittt	eq
 800287a:	68e5      	ldreq	r5, [r4, #12]
 800287c:	6833      	ldreq	r3, [r6, #0]
 800287e:	1aed      	subeq	r5, r5, r3
 8002880:	68a3      	ldr	r3, [r4, #8]
 8002882:	bf0c      	ite	eq
 8002884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002888:	2500      	movne	r5, #0
 800288a:	4293      	cmp	r3, r2
 800288c:	bfc4      	itt	gt
 800288e:	1a9b      	subgt	r3, r3, r2
 8002890:	18ed      	addgt	r5, r5, r3
 8002892:	2600      	movs	r6, #0
 8002894:	341a      	adds	r4, #26
 8002896:	42b5      	cmp	r5, r6
 8002898:	d11a      	bne.n	80028d0 <_printf_common+0xc8>
 800289a:	2000      	movs	r0, #0
 800289c:	e008      	b.n	80028b0 <_printf_common+0xa8>
 800289e:	2301      	movs	r3, #1
 80028a0:	4652      	mov	r2, sl
 80028a2:	4649      	mov	r1, r9
 80028a4:	4638      	mov	r0, r7
 80028a6:	47c0      	blx	r8
 80028a8:	3001      	adds	r0, #1
 80028aa:	d103      	bne.n	80028b4 <_printf_common+0xac>
 80028ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028b4:	3501      	adds	r5, #1
 80028b6:	e7c6      	b.n	8002846 <_printf_common+0x3e>
 80028b8:	18e1      	adds	r1, r4, r3
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	2030      	movs	r0, #48	; 0x30
 80028be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028c2:	4422      	add	r2, r4
 80028c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028cc:	3302      	adds	r3, #2
 80028ce:	e7c7      	b.n	8002860 <_printf_common+0x58>
 80028d0:	2301      	movs	r3, #1
 80028d2:	4622      	mov	r2, r4
 80028d4:	4649      	mov	r1, r9
 80028d6:	4638      	mov	r0, r7
 80028d8:	47c0      	blx	r8
 80028da:	3001      	adds	r0, #1
 80028dc:	d0e6      	beq.n	80028ac <_printf_common+0xa4>
 80028de:	3601      	adds	r6, #1
 80028e0:	e7d9      	b.n	8002896 <_printf_common+0x8e>
	...

080028e4 <_printf_i>:
 80028e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028e8:	7e0f      	ldrb	r7, [r1, #24]
 80028ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80028ec:	2f78      	cmp	r7, #120	; 0x78
 80028ee:	4691      	mov	r9, r2
 80028f0:	4680      	mov	r8, r0
 80028f2:	460c      	mov	r4, r1
 80028f4:	469a      	mov	sl, r3
 80028f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80028fa:	d807      	bhi.n	800290c <_printf_i+0x28>
 80028fc:	2f62      	cmp	r7, #98	; 0x62
 80028fe:	d80a      	bhi.n	8002916 <_printf_i+0x32>
 8002900:	2f00      	cmp	r7, #0
 8002902:	f000 80d4 	beq.w	8002aae <_printf_i+0x1ca>
 8002906:	2f58      	cmp	r7, #88	; 0x58
 8002908:	f000 80c0 	beq.w	8002a8c <_printf_i+0x1a8>
 800290c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002910:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002914:	e03a      	b.n	800298c <_printf_i+0xa8>
 8002916:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800291a:	2b15      	cmp	r3, #21
 800291c:	d8f6      	bhi.n	800290c <_printf_i+0x28>
 800291e:	a101      	add	r1, pc, #4	; (adr r1, 8002924 <_printf_i+0x40>)
 8002920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002924:	0800297d 	.word	0x0800297d
 8002928:	08002991 	.word	0x08002991
 800292c:	0800290d 	.word	0x0800290d
 8002930:	0800290d 	.word	0x0800290d
 8002934:	0800290d 	.word	0x0800290d
 8002938:	0800290d 	.word	0x0800290d
 800293c:	08002991 	.word	0x08002991
 8002940:	0800290d 	.word	0x0800290d
 8002944:	0800290d 	.word	0x0800290d
 8002948:	0800290d 	.word	0x0800290d
 800294c:	0800290d 	.word	0x0800290d
 8002950:	08002a95 	.word	0x08002a95
 8002954:	080029bd 	.word	0x080029bd
 8002958:	08002a4f 	.word	0x08002a4f
 800295c:	0800290d 	.word	0x0800290d
 8002960:	0800290d 	.word	0x0800290d
 8002964:	08002ab7 	.word	0x08002ab7
 8002968:	0800290d 	.word	0x0800290d
 800296c:	080029bd 	.word	0x080029bd
 8002970:	0800290d 	.word	0x0800290d
 8002974:	0800290d 	.word	0x0800290d
 8002978:	08002a57 	.word	0x08002a57
 800297c:	682b      	ldr	r3, [r5, #0]
 800297e:	1d1a      	adds	r2, r3, #4
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	602a      	str	r2, [r5, #0]
 8002984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800298c:	2301      	movs	r3, #1
 800298e:	e09f      	b.n	8002ad0 <_printf_i+0x1ec>
 8002990:	6820      	ldr	r0, [r4, #0]
 8002992:	682b      	ldr	r3, [r5, #0]
 8002994:	0607      	lsls	r7, r0, #24
 8002996:	f103 0104 	add.w	r1, r3, #4
 800299a:	6029      	str	r1, [r5, #0]
 800299c:	d501      	bpl.n	80029a2 <_printf_i+0xbe>
 800299e:	681e      	ldr	r6, [r3, #0]
 80029a0:	e003      	b.n	80029aa <_printf_i+0xc6>
 80029a2:	0646      	lsls	r6, r0, #25
 80029a4:	d5fb      	bpl.n	800299e <_printf_i+0xba>
 80029a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80029aa:	2e00      	cmp	r6, #0
 80029ac:	da03      	bge.n	80029b6 <_printf_i+0xd2>
 80029ae:	232d      	movs	r3, #45	; 0x2d
 80029b0:	4276      	negs	r6, r6
 80029b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029b6:	485a      	ldr	r0, [pc, #360]	; (8002b20 <_printf_i+0x23c>)
 80029b8:	230a      	movs	r3, #10
 80029ba:	e012      	b.n	80029e2 <_printf_i+0xfe>
 80029bc:	682b      	ldr	r3, [r5, #0]
 80029be:	6820      	ldr	r0, [r4, #0]
 80029c0:	1d19      	adds	r1, r3, #4
 80029c2:	6029      	str	r1, [r5, #0]
 80029c4:	0605      	lsls	r5, r0, #24
 80029c6:	d501      	bpl.n	80029cc <_printf_i+0xe8>
 80029c8:	681e      	ldr	r6, [r3, #0]
 80029ca:	e002      	b.n	80029d2 <_printf_i+0xee>
 80029cc:	0641      	lsls	r1, r0, #25
 80029ce:	d5fb      	bpl.n	80029c8 <_printf_i+0xe4>
 80029d0:	881e      	ldrh	r6, [r3, #0]
 80029d2:	4853      	ldr	r0, [pc, #332]	; (8002b20 <_printf_i+0x23c>)
 80029d4:	2f6f      	cmp	r7, #111	; 0x6f
 80029d6:	bf0c      	ite	eq
 80029d8:	2308      	moveq	r3, #8
 80029da:	230a      	movne	r3, #10
 80029dc:	2100      	movs	r1, #0
 80029de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029e2:	6865      	ldr	r5, [r4, #4]
 80029e4:	60a5      	str	r5, [r4, #8]
 80029e6:	2d00      	cmp	r5, #0
 80029e8:	bfa2      	ittt	ge
 80029ea:	6821      	ldrge	r1, [r4, #0]
 80029ec:	f021 0104 	bicge.w	r1, r1, #4
 80029f0:	6021      	strge	r1, [r4, #0]
 80029f2:	b90e      	cbnz	r6, 80029f8 <_printf_i+0x114>
 80029f4:	2d00      	cmp	r5, #0
 80029f6:	d04b      	beq.n	8002a90 <_printf_i+0x1ac>
 80029f8:	4615      	mov	r5, r2
 80029fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80029fe:	fb03 6711 	mls	r7, r3, r1, r6
 8002a02:	5dc7      	ldrb	r7, [r0, r7]
 8002a04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002a08:	4637      	mov	r7, r6
 8002a0a:	42bb      	cmp	r3, r7
 8002a0c:	460e      	mov	r6, r1
 8002a0e:	d9f4      	bls.n	80029fa <_printf_i+0x116>
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d10b      	bne.n	8002a2c <_printf_i+0x148>
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	07de      	lsls	r6, r3, #31
 8002a18:	d508      	bpl.n	8002a2c <_printf_i+0x148>
 8002a1a:	6923      	ldr	r3, [r4, #16]
 8002a1c:	6861      	ldr	r1, [r4, #4]
 8002a1e:	4299      	cmp	r1, r3
 8002a20:	bfde      	ittt	le
 8002a22:	2330      	movle	r3, #48	; 0x30
 8002a24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a28:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002a2c:	1b52      	subs	r2, r2, r5
 8002a2e:	6122      	str	r2, [r4, #16]
 8002a30:	f8cd a000 	str.w	sl, [sp]
 8002a34:	464b      	mov	r3, r9
 8002a36:	aa03      	add	r2, sp, #12
 8002a38:	4621      	mov	r1, r4
 8002a3a:	4640      	mov	r0, r8
 8002a3c:	f7ff fee4 	bl	8002808 <_printf_common>
 8002a40:	3001      	adds	r0, #1
 8002a42:	d14a      	bne.n	8002ada <_printf_i+0x1f6>
 8002a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a48:	b004      	add	sp, #16
 8002a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	f043 0320 	orr.w	r3, r3, #32
 8002a54:	6023      	str	r3, [r4, #0]
 8002a56:	4833      	ldr	r0, [pc, #204]	; (8002b24 <_printf_i+0x240>)
 8002a58:	2778      	movs	r7, #120	; 0x78
 8002a5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	6829      	ldr	r1, [r5, #0]
 8002a62:	061f      	lsls	r7, r3, #24
 8002a64:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a68:	d402      	bmi.n	8002a70 <_printf_i+0x18c>
 8002a6a:	065f      	lsls	r7, r3, #25
 8002a6c:	bf48      	it	mi
 8002a6e:	b2b6      	uxthmi	r6, r6
 8002a70:	07df      	lsls	r7, r3, #31
 8002a72:	bf48      	it	mi
 8002a74:	f043 0320 	orrmi.w	r3, r3, #32
 8002a78:	6029      	str	r1, [r5, #0]
 8002a7a:	bf48      	it	mi
 8002a7c:	6023      	strmi	r3, [r4, #0]
 8002a7e:	b91e      	cbnz	r6, 8002a88 <_printf_i+0x1a4>
 8002a80:	6823      	ldr	r3, [r4, #0]
 8002a82:	f023 0320 	bic.w	r3, r3, #32
 8002a86:	6023      	str	r3, [r4, #0]
 8002a88:	2310      	movs	r3, #16
 8002a8a:	e7a7      	b.n	80029dc <_printf_i+0xf8>
 8002a8c:	4824      	ldr	r0, [pc, #144]	; (8002b20 <_printf_i+0x23c>)
 8002a8e:	e7e4      	b.n	8002a5a <_printf_i+0x176>
 8002a90:	4615      	mov	r5, r2
 8002a92:	e7bd      	b.n	8002a10 <_printf_i+0x12c>
 8002a94:	682b      	ldr	r3, [r5, #0]
 8002a96:	6826      	ldr	r6, [r4, #0]
 8002a98:	6961      	ldr	r1, [r4, #20]
 8002a9a:	1d18      	adds	r0, r3, #4
 8002a9c:	6028      	str	r0, [r5, #0]
 8002a9e:	0635      	lsls	r5, r6, #24
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	d501      	bpl.n	8002aa8 <_printf_i+0x1c4>
 8002aa4:	6019      	str	r1, [r3, #0]
 8002aa6:	e002      	b.n	8002aae <_printf_i+0x1ca>
 8002aa8:	0670      	lsls	r0, r6, #25
 8002aaa:	d5fb      	bpl.n	8002aa4 <_printf_i+0x1c0>
 8002aac:	8019      	strh	r1, [r3, #0]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	6123      	str	r3, [r4, #16]
 8002ab2:	4615      	mov	r5, r2
 8002ab4:	e7bc      	b.n	8002a30 <_printf_i+0x14c>
 8002ab6:	682b      	ldr	r3, [r5, #0]
 8002ab8:	1d1a      	adds	r2, r3, #4
 8002aba:	602a      	str	r2, [r5, #0]
 8002abc:	681d      	ldr	r5, [r3, #0]
 8002abe:	6862      	ldr	r2, [r4, #4]
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4628      	mov	r0, r5
 8002ac4:	f7fd fb84 	bl	80001d0 <memchr>
 8002ac8:	b108      	cbz	r0, 8002ace <_printf_i+0x1ea>
 8002aca:	1b40      	subs	r0, r0, r5
 8002acc:	6060      	str	r0, [r4, #4]
 8002ace:	6863      	ldr	r3, [r4, #4]
 8002ad0:	6123      	str	r3, [r4, #16]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ad8:	e7aa      	b.n	8002a30 <_printf_i+0x14c>
 8002ada:	6923      	ldr	r3, [r4, #16]
 8002adc:	462a      	mov	r2, r5
 8002ade:	4649      	mov	r1, r9
 8002ae0:	4640      	mov	r0, r8
 8002ae2:	47d0      	blx	sl
 8002ae4:	3001      	adds	r0, #1
 8002ae6:	d0ad      	beq.n	8002a44 <_printf_i+0x160>
 8002ae8:	6823      	ldr	r3, [r4, #0]
 8002aea:	079b      	lsls	r3, r3, #30
 8002aec:	d413      	bmi.n	8002b16 <_printf_i+0x232>
 8002aee:	68e0      	ldr	r0, [r4, #12]
 8002af0:	9b03      	ldr	r3, [sp, #12]
 8002af2:	4298      	cmp	r0, r3
 8002af4:	bfb8      	it	lt
 8002af6:	4618      	movlt	r0, r3
 8002af8:	e7a6      	b.n	8002a48 <_printf_i+0x164>
 8002afa:	2301      	movs	r3, #1
 8002afc:	4632      	mov	r2, r6
 8002afe:	4649      	mov	r1, r9
 8002b00:	4640      	mov	r0, r8
 8002b02:	47d0      	blx	sl
 8002b04:	3001      	adds	r0, #1
 8002b06:	d09d      	beq.n	8002a44 <_printf_i+0x160>
 8002b08:	3501      	adds	r5, #1
 8002b0a:	68e3      	ldr	r3, [r4, #12]
 8002b0c:	9903      	ldr	r1, [sp, #12]
 8002b0e:	1a5b      	subs	r3, r3, r1
 8002b10:	42ab      	cmp	r3, r5
 8002b12:	dcf2      	bgt.n	8002afa <_printf_i+0x216>
 8002b14:	e7eb      	b.n	8002aee <_printf_i+0x20a>
 8002b16:	2500      	movs	r5, #0
 8002b18:	f104 0619 	add.w	r6, r4, #25
 8002b1c:	e7f5      	b.n	8002b0a <_printf_i+0x226>
 8002b1e:	bf00      	nop
 8002b20:	0800302d 	.word	0x0800302d
 8002b24:	0800303e 	.word	0x0800303e

08002b28 <__sflush_r>:
 8002b28:	898a      	ldrh	r2, [r1, #12]
 8002b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b2e:	4605      	mov	r5, r0
 8002b30:	0710      	lsls	r0, r2, #28
 8002b32:	460c      	mov	r4, r1
 8002b34:	d458      	bmi.n	8002be8 <__sflush_r+0xc0>
 8002b36:	684b      	ldr	r3, [r1, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	dc05      	bgt.n	8002b48 <__sflush_r+0x20>
 8002b3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	dc02      	bgt.n	8002b48 <__sflush_r+0x20>
 8002b42:	2000      	movs	r0, #0
 8002b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b4a:	2e00      	cmp	r6, #0
 8002b4c:	d0f9      	beq.n	8002b42 <__sflush_r+0x1a>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002b54:	682f      	ldr	r7, [r5, #0]
 8002b56:	6a21      	ldr	r1, [r4, #32]
 8002b58:	602b      	str	r3, [r5, #0]
 8002b5a:	d032      	beq.n	8002bc2 <__sflush_r+0x9a>
 8002b5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b5e:	89a3      	ldrh	r3, [r4, #12]
 8002b60:	075a      	lsls	r2, r3, #29
 8002b62:	d505      	bpl.n	8002b70 <__sflush_r+0x48>
 8002b64:	6863      	ldr	r3, [r4, #4]
 8002b66:	1ac0      	subs	r0, r0, r3
 8002b68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b6a:	b10b      	cbz	r3, 8002b70 <__sflush_r+0x48>
 8002b6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b6e:	1ac0      	subs	r0, r0, r3
 8002b70:	2300      	movs	r3, #0
 8002b72:	4602      	mov	r2, r0
 8002b74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b76:	6a21      	ldr	r1, [r4, #32]
 8002b78:	4628      	mov	r0, r5
 8002b7a:	47b0      	blx	r6
 8002b7c:	1c43      	adds	r3, r0, #1
 8002b7e:	89a3      	ldrh	r3, [r4, #12]
 8002b80:	d106      	bne.n	8002b90 <__sflush_r+0x68>
 8002b82:	6829      	ldr	r1, [r5, #0]
 8002b84:	291d      	cmp	r1, #29
 8002b86:	d82b      	bhi.n	8002be0 <__sflush_r+0xb8>
 8002b88:	4a29      	ldr	r2, [pc, #164]	; (8002c30 <__sflush_r+0x108>)
 8002b8a:	410a      	asrs	r2, r1
 8002b8c:	07d6      	lsls	r6, r2, #31
 8002b8e:	d427      	bmi.n	8002be0 <__sflush_r+0xb8>
 8002b90:	2200      	movs	r2, #0
 8002b92:	6062      	str	r2, [r4, #4]
 8002b94:	04d9      	lsls	r1, r3, #19
 8002b96:	6922      	ldr	r2, [r4, #16]
 8002b98:	6022      	str	r2, [r4, #0]
 8002b9a:	d504      	bpl.n	8002ba6 <__sflush_r+0x7e>
 8002b9c:	1c42      	adds	r2, r0, #1
 8002b9e:	d101      	bne.n	8002ba4 <__sflush_r+0x7c>
 8002ba0:	682b      	ldr	r3, [r5, #0]
 8002ba2:	b903      	cbnz	r3, 8002ba6 <__sflush_r+0x7e>
 8002ba4:	6560      	str	r0, [r4, #84]	; 0x54
 8002ba6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ba8:	602f      	str	r7, [r5, #0]
 8002baa:	2900      	cmp	r1, #0
 8002bac:	d0c9      	beq.n	8002b42 <__sflush_r+0x1a>
 8002bae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bb2:	4299      	cmp	r1, r3
 8002bb4:	d002      	beq.n	8002bbc <__sflush_r+0x94>
 8002bb6:	4628      	mov	r0, r5
 8002bb8:	f7ff fa92 	bl	80020e0 <_free_r>
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	6360      	str	r0, [r4, #52]	; 0x34
 8002bc0:	e7c0      	b.n	8002b44 <__sflush_r+0x1c>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	4628      	mov	r0, r5
 8002bc6:	47b0      	blx	r6
 8002bc8:	1c41      	adds	r1, r0, #1
 8002bca:	d1c8      	bne.n	8002b5e <__sflush_r+0x36>
 8002bcc:	682b      	ldr	r3, [r5, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0c5      	beq.n	8002b5e <__sflush_r+0x36>
 8002bd2:	2b1d      	cmp	r3, #29
 8002bd4:	d001      	beq.n	8002bda <__sflush_r+0xb2>
 8002bd6:	2b16      	cmp	r3, #22
 8002bd8:	d101      	bne.n	8002bde <__sflush_r+0xb6>
 8002bda:	602f      	str	r7, [r5, #0]
 8002bdc:	e7b1      	b.n	8002b42 <__sflush_r+0x1a>
 8002bde:	89a3      	ldrh	r3, [r4, #12]
 8002be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002be4:	81a3      	strh	r3, [r4, #12]
 8002be6:	e7ad      	b.n	8002b44 <__sflush_r+0x1c>
 8002be8:	690f      	ldr	r7, [r1, #16]
 8002bea:	2f00      	cmp	r7, #0
 8002bec:	d0a9      	beq.n	8002b42 <__sflush_r+0x1a>
 8002bee:	0793      	lsls	r3, r2, #30
 8002bf0:	680e      	ldr	r6, [r1, #0]
 8002bf2:	bf08      	it	eq
 8002bf4:	694b      	ldreq	r3, [r1, #20]
 8002bf6:	600f      	str	r7, [r1, #0]
 8002bf8:	bf18      	it	ne
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	eba6 0807 	sub.w	r8, r6, r7
 8002c00:	608b      	str	r3, [r1, #8]
 8002c02:	f1b8 0f00 	cmp.w	r8, #0
 8002c06:	dd9c      	ble.n	8002b42 <__sflush_r+0x1a>
 8002c08:	6a21      	ldr	r1, [r4, #32]
 8002c0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c0c:	4643      	mov	r3, r8
 8002c0e:	463a      	mov	r2, r7
 8002c10:	4628      	mov	r0, r5
 8002c12:	47b0      	blx	r6
 8002c14:	2800      	cmp	r0, #0
 8002c16:	dc06      	bgt.n	8002c26 <__sflush_r+0xfe>
 8002c18:	89a3      	ldrh	r3, [r4, #12]
 8002c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c1e:	81a3      	strh	r3, [r4, #12]
 8002c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c24:	e78e      	b.n	8002b44 <__sflush_r+0x1c>
 8002c26:	4407      	add	r7, r0
 8002c28:	eba8 0800 	sub.w	r8, r8, r0
 8002c2c:	e7e9      	b.n	8002c02 <__sflush_r+0xda>
 8002c2e:	bf00      	nop
 8002c30:	dfbffffe 	.word	0xdfbffffe

08002c34 <_fflush_r>:
 8002c34:	b538      	push	{r3, r4, r5, lr}
 8002c36:	690b      	ldr	r3, [r1, #16]
 8002c38:	4605      	mov	r5, r0
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	b913      	cbnz	r3, 8002c44 <_fflush_r+0x10>
 8002c3e:	2500      	movs	r5, #0
 8002c40:	4628      	mov	r0, r5
 8002c42:	bd38      	pop	{r3, r4, r5, pc}
 8002c44:	b118      	cbz	r0, 8002c4e <_fflush_r+0x1a>
 8002c46:	6a03      	ldr	r3, [r0, #32]
 8002c48:	b90b      	cbnz	r3, 8002c4e <_fflush_r+0x1a>
 8002c4a:	f7ff f921 	bl	8001e90 <__sinit>
 8002c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f3      	beq.n	8002c3e <_fflush_r+0xa>
 8002c56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002c58:	07d0      	lsls	r0, r2, #31
 8002c5a:	d404      	bmi.n	8002c66 <_fflush_r+0x32>
 8002c5c:	0599      	lsls	r1, r3, #22
 8002c5e:	d402      	bmi.n	8002c66 <_fflush_r+0x32>
 8002c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c62:	f7ff fa3a 	bl	80020da <__retarget_lock_acquire_recursive>
 8002c66:	4628      	mov	r0, r5
 8002c68:	4621      	mov	r1, r4
 8002c6a:	f7ff ff5d 	bl	8002b28 <__sflush_r>
 8002c6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c70:	07da      	lsls	r2, r3, #31
 8002c72:	4605      	mov	r5, r0
 8002c74:	d4e4      	bmi.n	8002c40 <_fflush_r+0xc>
 8002c76:	89a3      	ldrh	r3, [r4, #12]
 8002c78:	059b      	lsls	r3, r3, #22
 8002c7a:	d4e1      	bmi.n	8002c40 <_fflush_r+0xc>
 8002c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c7e:	f7ff fa2d 	bl	80020dc <__retarget_lock_release_recursive>
 8002c82:	e7dd      	b.n	8002c40 <_fflush_r+0xc>

08002c84 <__swbuf_r>:
 8002c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c86:	460e      	mov	r6, r1
 8002c88:	4614      	mov	r4, r2
 8002c8a:	4605      	mov	r5, r0
 8002c8c:	b118      	cbz	r0, 8002c96 <__swbuf_r+0x12>
 8002c8e:	6a03      	ldr	r3, [r0, #32]
 8002c90:	b90b      	cbnz	r3, 8002c96 <__swbuf_r+0x12>
 8002c92:	f7ff f8fd 	bl	8001e90 <__sinit>
 8002c96:	69a3      	ldr	r3, [r4, #24]
 8002c98:	60a3      	str	r3, [r4, #8]
 8002c9a:	89a3      	ldrh	r3, [r4, #12]
 8002c9c:	071a      	lsls	r2, r3, #28
 8002c9e:	d525      	bpl.n	8002cec <__swbuf_r+0x68>
 8002ca0:	6923      	ldr	r3, [r4, #16]
 8002ca2:	b31b      	cbz	r3, 8002cec <__swbuf_r+0x68>
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	6922      	ldr	r2, [r4, #16]
 8002ca8:	1a98      	subs	r0, r3, r2
 8002caa:	6963      	ldr	r3, [r4, #20]
 8002cac:	b2f6      	uxtb	r6, r6
 8002cae:	4283      	cmp	r3, r0
 8002cb0:	4637      	mov	r7, r6
 8002cb2:	dc04      	bgt.n	8002cbe <__swbuf_r+0x3a>
 8002cb4:	4621      	mov	r1, r4
 8002cb6:	4628      	mov	r0, r5
 8002cb8:	f7ff ffbc 	bl	8002c34 <_fflush_r>
 8002cbc:	b9e0      	cbnz	r0, 8002cf8 <__swbuf_r+0x74>
 8002cbe:	68a3      	ldr	r3, [r4, #8]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	60a3      	str	r3, [r4, #8]
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	6022      	str	r2, [r4, #0]
 8002cca:	701e      	strb	r6, [r3, #0]
 8002ccc:	6962      	ldr	r2, [r4, #20]
 8002cce:	1c43      	adds	r3, r0, #1
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d004      	beq.n	8002cde <__swbuf_r+0x5a>
 8002cd4:	89a3      	ldrh	r3, [r4, #12]
 8002cd6:	07db      	lsls	r3, r3, #31
 8002cd8:	d506      	bpl.n	8002ce8 <__swbuf_r+0x64>
 8002cda:	2e0a      	cmp	r6, #10
 8002cdc:	d104      	bne.n	8002ce8 <__swbuf_r+0x64>
 8002cde:	4621      	mov	r1, r4
 8002ce0:	4628      	mov	r0, r5
 8002ce2:	f7ff ffa7 	bl	8002c34 <_fflush_r>
 8002ce6:	b938      	cbnz	r0, 8002cf8 <__swbuf_r+0x74>
 8002ce8:	4638      	mov	r0, r7
 8002cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cec:	4621      	mov	r1, r4
 8002cee:	4628      	mov	r0, r5
 8002cf0:	f000 f806 	bl	8002d00 <__swsetup_r>
 8002cf4:	2800      	cmp	r0, #0
 8002cf6:	d0d5      	beq.n	8002ca4 <__swbuf_r+0x20>
 8002cf8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002cfc:	e7f4      	b.n	8002ce8 <__swbuf_r+0x64>
	...

08002d00 <__swsetup_r>:
 8002d00:	b538      	push	{r3, r4, r5, lr}
 8002d02:	4b2a      	ldr	r3, [pc, #168]	; (8002dac <__swsetup_r+0xac>)
 8002d04:	4605      	mov	r5, r0
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	460c      	mov	r4, r1
 8002d0a:	b118      	cbz	r0, 8002d14 <__swsetup_r+0x14>
 8002d0c:	6a03      	ldr	r3, [r0, #32]
 8002d0e:	b90b      	cbnz	r3, 8002d14 <__swsetup_r+0x14>
 8002d10:	f7ff f8be 	bl	8001e90 <__sinit>
 8002d14:	89a3      	ldrh	r3, [r4, #12]
 8002d16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d1a:	0718      	lsls	r0, r3, #28
 8002d1c:	d422      	bmi.n	8002d64 <__swsetup_r+0x64>
 8002d1e:	06d9      	lsls	r1, r3, #27
 8002d20:	d407      	bmi.n	8002d32 <__swsetup_r+0x32>
 8002d22:	2309      	movs	r3, #9
 8002d24:	602b      	str	r3, [r5, #0]
 8002d26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002d2a:	81a3      	strh	r3, [r4, #12]
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d30:	e034      	b.n	8002d9c <__swsetup_r+0x9c>
 8002d32:	0758      	lsls	r0, r3, #29
 8002d34:	d512      	bpl.n	8002d5c <__swsetup_r+0x5c>
 8002d36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d38:	b141      	cbz	r1, 8002d4c <__swsetup_r+0x4c>
 8002d3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d3e:	4299      	cmp	r1, r3
 8002d40:	d002      	beq.n	8002d48 <__swsetup_r+0x48>
 8002d42:	4628      	mov	r0, r5
 8002d44:	f7ff f9cc 	bl	80020e0 <_free_r>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	6363      	str	r3, [r4, #52]	; 0x34
 8002d4c:	89a3      	ldrh	r3, [r4, #12]
 8002d4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002d52:	81a3      	strh	r3, [r4, #12]
 8002d54:	2300      	movs	r3, #0
 8002d56:	6063      	str	r3, [r4, #4]
 8002d58:	6923      	ldr	r3, [r4, #16]
 8002d5a:	6023      	str	r3, [r4, #0]
 8002d5c:	89a3      	ldrh	r3, [r4, #12]
 8002d5e:	f043 0308 	orr.w	r3, r3, #8
 8002d62:	81a3      	strh	r3, [r4, #12]
 8002d64:	6923      	ldr	r3, [r4, #16]
 8002d66:	b94b      	cbnz	r3, 8002d7c <__swsetup_r+0x7c>
 8002d68:	89a3      	ldrh	r3, [r4, #12]
 8002d6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d72:	d003      	beq.n	8002d7c <__swsetup_r+0x7c>
 8002d74:	4621      	mov	r1, r4
 8002d76:	4628      	mov	r0, r5
 8002d78:	f000 f8a7 	bl	8002eca <__smakebuf_r>
 8002d7c:	89a0      	ldrh	r0, [r4, #12]
 8002d7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d82:	f010 0301 	ands.w	r3, r0, #1
 8002d86:	d00a      	beq.n	8002d9e <__swsetup_r+0x9e>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60a3      	str	r3, [r4, #8]
 8002d8c:	6963      	ldr	r3, [r4, #20]
 8002d8e:	425b      	negs	r3, r3
 8002d90:	61a3      	str	r3, [r4, #24]
 8002d92:	6923      	ldr	r3, [r4, #16]
 8002d94:	b943      	cbnz	r3, 8002da8 <__swsetup_r+0xa8>
 8002d96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002d9a:	d1c4      	bne.n	8002d26 <__swsetup_r+0x26>
 8002d9c:	bd38      	pop	{r3, r4, r5, pc}
 8002d9e:	0781      	lsls	r1, r0, #30
 8002da0:	bf58      	it	pl
 8002da2:	6963      	ldrpl	r3, [r4, #20]
 8002da4:	60a3      	str	r3, [r4, #8]
 8002da6:	e7f4      	b.n	8002d92 <__swsetup_r+0x92>
 8002da8:	2000      	movs	r0, #0
 8002daa:	e7f7      	b.n	8002d9c <__swsetup_r+0x9c>
 8002dac:	20000064 	.word	0x20000064

08002db0 <memmove>:
 8002db0:	4288      	cmp	r0, r1
 8002db2:	b510      	push	{r4, lr}
 8002db4:	eb01 0402 	add.w	r4, r1, r2
 8002db8:	d902      	bls.n	8002dc0 <memmove+0x10>
 8002dba:	4284      	cmp	r4, r0
 8002dbc:	4623      	mov	r3, r4
 8002dbe:	d807      	bhi.n	8002dd0 <memmove+0x20>
 8002dc0:	1e43      	subs	r3, r0, #1
 8002dc2:	42a1      	cmp	r1, r4
 8002dc4:	d008      	beq.n	8002dd8 <memmove+0x28>
 8002dc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002dca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002dce:	e7f8      	b.n	8002dc2 <memmove+0x12>
 8002dd0:	4402      	add	r2, r0
 8002dd2:	4601      	mov	r1, r0
 8002dd4:	428a      	cmp	r2, r1
 8002dd6:	d100      	bne.n	8002dda <memmove+0x2a>
 8002dd8:	bd10      	pop	{r4, pc}
 8002dda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002dde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002de2:	e7f7      	b.n	8002dd4 <memmove+0x24>

08002de4 <_sbrk_r>:
 8002de4:	b538      	push	{r3, r4, r5, lr}
 8002de6:	4d06      	ldr	r5, [pc, #24]	; (8002e00 <_sbrk_r+0x1c>)
 8002de8:	2300      	movs	r3, #0
 8002dea:	4604      	mov	r4, r0
 8002dec:	4608      	mov	r0, r1
 8002dee:	602b      	str	r3, [r5, #0]
 8002df0:	f7fd fdf0 	bl	80009d4 <_sbrk>
 8002df4:	1c43      	adds	r3, r0, #1
 8002df6:	d102      	bne.n	8002dfe <_sbrk_r+0x1a>
 8002df8:	682b      	ldr	r3, [r5, #0]
 8002dfa:	b103      	cbz	r3, 8002dfe <_sbrk_r+0x1a>
 8002dfc:	6023      	str	r3, [r4, #0]
 8002dfe:	bd38      	pop	{r3, r4, r5, pc}
 8002e00:	20000210 	.word	0x20000210

08002e04 <memcpy>:
 8002e04:	440a      	add	r2, r1
 8002e06:	4291      	cmp	r1, r2
 8002e08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002e0c:	d100      	bne.n	8002e10 <memcpy+0xc>
 8002e0e:	4770      	bx	lr
 8002e10:	b510      	push	{r4, lr}
 8002e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e1a:	4291      	cmp	r1, r2
 8002e1c:	d1f9      	bne.n	8002e12 <memcpy+0xe>
 8002e1e:	bd10      	pop	{r4, pc}

08002e20 <_realloc_r>:
 8002e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e24:	4680      	mov	r8, r0
 8002e26:	4614      	mov	r4, r2
 8002e28:	460e      	mov	r6, r1
 8002e2a:	b921      	cbnz	r1, 8002e36 <_realloc_r+0x16>
 8002e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e30:	4611      	mov	r1, r2
 8002e32:	f7ff b9c1 	b.w	80021b8 <_malloc_r>
 8002e36:	b92a      	cbnz	r2, 8002e44 <_realloc_r+0x24>
 8002e38:	f7ff f952 	bl	80020e0 <_free_r>
 8002e3c:	4625      	mov	r5, r4
 8002e3e:	4628      	mov	r0, r5
 8002e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e44:	f000 f8a0 	bl	8002f88 <_malloc_usable_size_r>
 8002e48:	4284      	cmp	r4, r0
 8002e4a:	4607      	mov	r7, r0
 8002e4c:	d802      	bhi.n	8002e54 <_realloc_r+0x34>
 8002e4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002e52:	d812      	bhi.n	8002e7a <_realloc_r+0x5a>
 8002e54:	4621      	mov	r1, r4
 8002e56:	4640      	mov	r0, r8
 8002e58:	f7ff f9ae 	bl	80021b8 <_malloc_r>
 8002e5c:	4605      	mov	r5, r0
 8002e5e:	2800      	cmp	r0, #0
 8002e60:	d0ed      	beq.n	8002e3e <_realloc_r+0x1e>
 8002e62:	42bc      	cmp	r4, r7
 8002e64:	4622      	mov	r2, r4
 8002e66:	4631      	mov	r1, r6
 8002e68:	bf28      	it	cs
 8002e6a:	463a      	movcs	r2, r7
 8002e6c:	f7ff ffca 	bl	8002e04 <memcpy>
 8002e70:	4631      	mov	r1, r6
 8002e72:	4640      	mov	r0, r8
 8002e74:	f7ff f934 	bl	80020e0 <_free_r>
 8002e78:	e7e1      	b.n	8002e3e <_realloc_r+0x1e>
 8002e7a:	4635      	mov	r5, r6
 8002e7c:	e7df      	b.n	8002e3e <_realloc_r+0x1e>

08002e7e <__swhatbuf_r>:
 8002e7e:	b570      	push	{r4, r5, r6, lr}
 8002e80:	460c      	mov	r4, r1
 8002e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e86:	2900      	cmp	r1, #0
 8002e88:	b096      	sub	sp, #88	; 0x58
 8002e8a:	4615      	mov	r5, r2
 8002e8c:	461e      	mov	r6, r3
 8002e8e:	da0d      	bge.n	8002eac <__swhatbuf_r+0x2e>
 8002e90:	89a3      	ldrh	r3, [r4, #12]
 8002e92:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002e96:	f04f 0100 	mov.w	r1, #0
 8002e9a:	bf0c      	ite	eq
 8002e9c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002ea0:	2340      	movne	r3, #64	; 0x40
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	6031      	str	r1, [r6, #0]
 8002ea6:	602b      	str	r3, [r5, #0]
 8002ea8:	b016      	add	sp, #88	; 0x58
 8002eaa:	bd70      	pop	{r4, r5, r6, pc}
 8002eac:	466a      	mov	r2, sp
 8002eae:	f000 f849 	bl	8002f44 <_fstat_r>
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	dbec      	blt.n	8002e90 <__swhatbuf_r+0x12>
 8002eb6:	9901      	ldr	r1, [sp, #4]
 8002eb8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002ebc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002ec0:	4259      	negs	r1, r3
 8002ec2:	4159      	adcs	r1, r3
 8002ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ec8:	e7eb      	b.n	8002ea2 <__swhatbuf_r+0x24>

08002eca <__smakebuf_r>:
 8002eca:	898b      	ldrh	r3, [r1, #12]
 8002ecc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ece:	079d      	lsls	r5, r3, #30
 8002ed0:	4606      	mov	r6, r0
 8002ed2:	460c      	mov	r4, r1
 8002ed4:	d507      	bpl.n	8002ee6 <__smakebuf_r+0x1c>
 8002ed6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002eda:	6023      	str	r3, [r4, #0]
 8002edc:	6123      	str	r3, [r4, #16]
 8002ede:	2301      	movs	r3, #1
 8002ee0:	6163      	str	r3, [r4, #20]
 8002ee2:	b002      	add	sp, #8
 8002ee4:	bd70      	pop	{r4, r5, r6, pc}
 8002ee6:	ab01      	add	r3, sp, #4
 8002ee8:	466a      	mov	r2, sp
 8002eea:	f7ff ffc8 	bl	8002e7e <__swhatbuf_r>
 8002eee:	9900      	ldr	r1, [sp, #0]
 8002ef0:	4605      	mov	r5, r0
 8002ef2:	4630      	mov	r0, r6
 8002ef4:	f7ff f960 	bl	80021b8 <_malloc_r>
 8002ef8:	b948      	cbnz	r0, 8002f0e <__smakebuf_r+0x44>
 8002efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002efe:	059a      	lsls	r2, r3, #22
 8002f00:	d4ef      	bmi.n	8002ee2 <__smakebuf_r+0x18>
 8002f02:	f023 0303 	bic.w	r3, r3, #3
 8002f06:	f043 0302 	orr.w	r3, r3, #2
 8002f0a:	81a3      	strh	r3, [r4, #12]
 8002f0c:	e7e3      	b.n	8002ed6 <__smakebuf_r+0xc>
 8002f0e:	89a3      	ldrh	r3, [r4, #12]
 8002f10:	6020      	str	r0, [r4, #0]
 8002f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f16:	81a3      	strh	r3, [r4, #12]
 8002f18:	9b00      	ldr	r3, [sp, #0]
 8002f1a:	6163      	str	r3, [r4, #20]
 8002f1c:	9b01      	ldr	r3, [sp, #4]
 8002f1e:	6120      	str	r0, [r4, #16]
 8002f20:	b15b      	cbz	r3, 8002f3a <__smakebuf_r+0x70>
 8002f22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f26:	4630      	mov	r0, r6
 8002f28:	f000 f81e 	bl	8002f68 <_isatty_r>
 8002f2c:	b128      	cbz	r0, 8002f3a <__smakebuf_r+0x70>
 8002f2e:	89a3      	ldrh	r3, [r4, #12]
 8002f30:	f023 0303 	bic.w	r3, r3, #3
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	81a3      	strh	r3, [r4, #12]
 8002f3a:	89a3      	ldrh	r3, [r4, #12]
 8002f3c:	431d      	orrs	r5, r3
 8002f3e:	81a5      	strh	r5, [r4, #12]
 8002f40:	e7cf      	b.n	8002ee2 <__smakebuf_r+0x18>
	...

08002f44 <_fstat_r>:
 8002f44:	b538      	push	{r3, r4, r5, lr}
 8002f46:	4d07      	ldr	r5, [pc, #28]	; (8002f64 <_fstat_r+0x20>)
 8002f48:	2300      	movs	r3, #0
 8002f4a:	4604      	mov	r4, r0
 8002f4c:	4608      	mov	r0, r1
 8002f4e:	4611      	mov	r1, r2
 8002f50:	602b      	str	r3, [r5, #0]
 8002f52:	f7fd fd16 	bl	8000982 <_fstat>
 8002f56:	1c43      	adds	r3, r0, #1
 8002f58:	d102      	bne.n	8002f60 <_fstat_r+0x1c>
 8002f5a:	682b      	ldr	r3, [r5, #0]
 8002f5c:	b103      	cbz	r3, 8002f60 <_fstat_r+0x1c>
 8002f5e:	6023      	str	r3, [r4, #0]
 8002f60:	bd38      	pop	{r3, r4, r5, pc}
 8002f62:	bf00      	nop
 8002f64:	20000210 	.word	0x20000210

08002f68 <_isatty_r>:
 8002f68:	b538      	push	{r3, r4, r5, lr}
 8002f6a:	4d06      	ldr	r5, [pc, #24]	; (8002f84 <_isatty_r+0x1c>)
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	4604      	mov	r4, r0
 8002f70:	4608      	mov	r0, r1
 8002f72:	602b      	str	r3, [r5, #0]
 8002f74:	f7fd fd15 	bl	80009a2 <_isatty>
 8002f78:	1c43      	adds	r3, r0, #1
 8002f7a:	d102      	bne.n	8002f82 <_isatty_r+0x1a>
 8002f7c:	682b      	ldr	r3, [r5, #0]
 8002f7e:	b103      	cbz	r3, 8002f82 <_isatty_r+0x1a>
 8002f80:	6023      	str	r3, [r4, #0]
 8002f82:	bd38      	pop	{r3, r4, r5, pc}
 8002f84:	20000210 	.word	0x20000210

08002f88 <_malloc_usable_size_r>:
 8002f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f8c:	1f18      	subs	r0, r3, #4
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	bfbc      	itt	lt
 8002f92:	580b      	ldrlt	r3, [r1, r0]
 8002f94:	18c0      	addlt	r0, r0, r3
 8002f96:	4770      	bx	lr

08002f98 <_init>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	bf00      	nop
 8002f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9e:	bc08      	pop	{r3}
 8002fa0:	469e      	mov	lr, r3
 8002fa2:	4770      	bx	lr

08002fa4 <_fini>:
 8002fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa6:	bf00      	nop
 8002fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002faa:	bc08      	pop	{r3}
 8002fac:	469e      	mov	lr, r3
 8002fae:	4770      	bx	lr
