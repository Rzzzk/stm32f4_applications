
007_TIM6_basic_timer_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003090  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003220  08003220  00013220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032c0  080032c0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080032c0  080032c0  000132c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032c8  080032c8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032cc  080032cc  000132cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080032d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000001cc  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000234  20000234  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   000090a7  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001803  00000000  00000000  00029182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a00  00000000  00000000  0002a988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007aa  00000000  00000000  0002b388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002201e  00000000  00000000  0002bb32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000aeb2  00000000  00000000  0004db50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ceb1d  00000000  00000000  00058a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003294  00000000  00000000  00127520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  0012a7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003208 	.word	0x08003208

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003208 	.word	0x08003208

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <SysTick_Handler>:

extern TIM_HandleTypeDef timer6_hn;


void SysTick_Handler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000570:	f000 faf8 	bl	8000b64 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000574:	f000 fc44 	bl	8000e00 <HAL_SYSTICK_IRQHandler>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}

0800057c <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&timer6_hn);
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <TIM6_DAC_IRQHandler+0x10>)
 8000582:	f001 fb59 	bl	8001c38 <HAL_TIM_IRQHandler>
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000098 	.word	0x20000098

08000590 <main>:


/**********************************************  [main]  *****************************************/

int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	/*Application initializations*/
	MAIN_Init();
 8000594:	f000 f81a 	bl	80005cc <MAIN_Init>

	HAL_TIM_Base_Start_IT(&timer6_hn);
 8000598:	4801      	ldr	r0, [pc, #4]	; (80005a0 <main+0x10>)
 800059a:	f001 fadd 	bl	8001b58 <HAL_TIM_Base_Start_IT>

	while(1)
 800059e:	e7fe      	b.n	800059e <main+0xe>
 80005a0:	20000098 	.word	0x20000098

080005a4 <HAL_TIM_PeriodElapsedCallback>:
	return 0;
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(RED_LED_PORT, led.Pin);
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	4619      	mov	r1, r3
 80005b4:	4804      	ldr	r0, [pc, #16]	; (80005c8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80005b6:	f000 fdcd 	bl	8001154 <HAL_GPIO_TogglePin>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000084 	.word	0x20000084
 80005c8:	40020c00 	.word	0x40020c00

080005cc <MAIN_Init>:

/*************************************************************************************************/
void MAIN_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	// HAL Initializations
	HAL_Init();
 80005d0:	f000 fa76 	bl	8000ac0 <HAL_Init>

	// System Clock Configurations
	SystemClock_Config();
 80005d4:	f000 f808 	bl	80005e8 <SystemClock_Config>

	// Peripherals High Level Initializations

	PrintSystemClockInfo();
 80005d8:	f000 f852 	bl	8000680 <PrintSystemClockInfo>

	TIMER6_Init();
 80005dc:	f000 f8ae 	bl	800073c <TIMER6_Init>

	LED_Init();
 80005e0:	f000 f8ca 	bl	8000778 <LED_Init>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <SystemClock_Config>:


void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b092      	sub	sp, #72	; 0x48
 80005ec:	af00      	add	r7, sp, #0

	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0318 	add.w	r3, r7, #24
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fe2d 	bl	8002256 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]


	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060a:	2302      	movs	r3, #2
 800060c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000612:	2310      	movs	r3, #16
 8000614:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000616:	2301      	movs	r3, #1
 8000618:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fdb2 	bl	8001188 <HAL_RCC_OscConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x46>
	{
		Error_Handler();
 800062a:	f000 f8bf 	bl	80007ac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK |\
 800062e:	230f      	movs	r3, #15
 8000630:	607b      	str	r3, [r7, #4]
			RCC_CLOCKTYPE_HCLK   |\
			RCC_CLOCKTYPE_PCLK1  |\
			RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000644:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f001 f814 	bl	8001678 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000656:	f000 f8a9 	bl	80007ac <Error_Handler>
	}

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800065a:	f001 f9f9 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 800065e:	4603      	mov	r3, r0
 8000660:	4a06      	ldr	r2, [pc, #24]	; (800067c <SystemClock_Config+0x94>)
 8000662:	fba2 2303 	umull	r2, r3, r2, r3
 8000666:	099b      	lsrs	r3, r3, #6
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fba0 	bl	8000dae <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800066e:	2004      	movs	r0, #4
 8000670:	f000 fbaa 	bl	8000dc8 <HAL_SYSTICK_CLKSourceConfig>
}
 8000674:	bf00      	nop
 8000676:	3748      	adds	r7, #72	; 0x48
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	10624dd3 	.word	0x10624dd3

08000680 <PrintSystemClockInfo>:



void PrintSystemClockInfo(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b09a      	sub	sp, #104	; 0x68
 8000684:	af00      	add	r7, sp, #0
	char clock[100];

	memset(clock,0,sizeof(clock));
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2264      	movs	r2, #100	; 0x64
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f001 fde2 	bl	8002256 <memset>
	sprintf(clock ,"SYSCLK : %ld  \r\n", HAL_RCC_GetSysClockFreq());
 8000692:	f001 f8d7 	bl	8001844 <HAL_RCC_GetSysClockFreq>
 8000696:	4602      	mov	r2, r0
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4923      	ldr	r1, [pc, #140]	; (8000728 <PrintSystemClockInfo+0xa8>)
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fd77 	bl	8002190 <siprintf>
	printf("%s",clock);
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	4821      	ldr	r0, [pc, #132]	; (800072c <PrintSystemClockInfo+0xac>)
 80006a8:	f001 fd60 	bl	800216c <iprintf>

	memset(clock,0,sizeof(clock));
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2264      	movs	r2, #100	; 0x64
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 fdcf 	bl	8002256 <memset>
	sprintf(clock ,"HCLK   : %ld  \r\n", HAL_RCC_GetHCLKFreq());
 80006b8:	f001 f9ca 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 80006bc:	4602      	mov	r2, r0
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	491b      	ldr	r1, [pc, #108]	; (8000730 <PrintSystemClockInfo+0xb0>)
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fd64 	bl	8002190 <siprintf>
	printf("%s",clock);
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	4619      	mov	r1, r3
 80006cc:	4817      	ldr	r0, [pc, #92]	; (800072c <PrintSystemClockInfo+0xac>)
 80006ce:	f001 fd4d 	bl	800216c <iprintf>

	memset(clock,0,sizeof(clock));
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2264      	movs	r2, #100	; 0x64
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 fdbc 	bl	8002256 <memset>
	sprintf(clock ,"PCLK1  : %ld  \r\n", HAL_RCC_GetPCLK1Freq());
 80006de:	f001 f9c3 	bl	8001a68 <HAL_RCC_GetPCLK1Freq>
 80006e2:	4602      	mov	r2, r0
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4913      	ldr	r1, [pc, #76]	; (8000734 <PrintSystemClockInfo+0xb4>)
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 fd51 	bl	8002190 <siprintf>
	printf("%s",clock);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	4619      	mov	r1, r3
 80006f2:	480e      	ldr	r0, [pc, #56]	; (800072c <PrintSystemClockInfo+0xac>)
 80006f4:	f001 fd3a 	bl	800216c <iprintf>

	memset(clock,0,sizeof(clock));
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2264      	movs	r2, #100	; 0x64
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fda9 	bl	8002256 <memset>
	sprintf(clock ,"PCLK2  : %ld  \r\n", HAL_RCC_GetPCLK2Freq());
 8000704:	f001 f9c4 	bl	8001a90 <HAL_RCC_GetPCLK2Freq>
 8000708:	4602      	mov	r2, r0
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	490a      	ldr	r1, [pc, #40]	; (8000738 <PrintSystemClockInfo+0xb8>)
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fd3e 	bl	8002190 <siprintf>
	printf("%s",clock);
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <PrintSystemClockInfo+0xac>)
 800071a:	f001 fd27 	bl	800216c <iprintf>
}
 800071e:	bf00      	nop
 8000720:	3768      	adds	r7, #104	; 0x68
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	08003220 	.word	0x08003220
 800072c:	08003234 	.word	0x08003234
 8000730:	08003238 	.word	0x08003238
 8000734:	0800324c 	.word	0x0800324c
 8000738:	08003260 	.word	0x08003260

0800073c <TIMER6_Init>:

void TIMER6_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	timer6_hn.Instance = TIM6;
 8000740:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <TIMER6_Init+0x34>)
 8000742:	4a0c      	ldr	r2, [pc, #48]	; (8000774 <TIMER6_Init+0x38>)
 8000744:	601a      	str	r2, [r3, #0]

	timer6_hn.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <TIMER6_Init+0x34>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
	timer6_hn.Init.Prescaler         = 24;
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <TIMER6_Init+0x34>)
 800074e:	2218      	movs	r2, #24
 8000750:	605a      	str	r2, [r3, #4]
	timer6_hn.Init.Period            = 64000-1;
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <TIMER6_Init+0x34>)
 8000754:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000758:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&timer6_hn) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <TIMER6_Init+0x34>)
 800075c:	f001 f9ac 	bl	8001ab8 <HAL_TIM_Base_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <TIMER6_Init+0x2e>
	{
		Error_Handler();
 8000766:	f000 f821 	bl	80007ac <Error_Handler>
	}
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000098 	.word	0x20000098
 8000774:	40001000 	.word	0x40001000

08000778 <LED_Init>:


void LED_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	led.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <LED_Init+0x2c>)
 800077e:	2201      	movs	r2, #1
 8000780:	605a      	str	r2, [r3, #4]
	led.Pin = RED_LED_PIN;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <LED_Init+0x2c>)
 8000784:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000788:	601a      	str	r2, [r3, #0]
	led.Speed = GPIO_SPEED_FAST;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <LED_Init+0x2c>)
 800078c:	2202      	movs	r2, #2
 800078e:	60da      	str	r2, [r3, #12]
	led.Pull = GPIO_NOPULL;
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <LED_Init+0x2c>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]

	HAL_GPIO_Init(RED_LED_PORT, &led);
 8000796:	4903      	ldr	r1, [pc, #12]	; (80007a4 <LED_Init+0x2c>)
 8000798:	4803      	ldr	r0, [pc, #12]	; (80007a8 <LED_Init+0x30>)
 800079a:	f000 fb3f 	bl	8000e1c <HAL_GPIO_Init>
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000084 	.word	0x20000084
 80007a8:	40020c00 	.word	0x40020c00

080007ac <Error_Handler>:

void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	while(1);
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x4>
	...

080007b4 <HAL_MspInit>:
/*
 * LOW LEVEL PROCESSOR INITIALIZATION
 */

void HAL_MspInit(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
	/*
	 * 1. configure the priority group of the processor
	 */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ba:	2003      	movs	r0, #3
 80007bc:	f000 fac2 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>

	/*
	 * 2. Enable the required system exceptions
	 */
	SCB->SHCSR |= 0x7 << 16; //enable memMan, usage fault and bus fault
 80007c0:	4b29      	ldr	r3, [pc, #164]	; (8000868 <HAL_MspInit+0xb4>)
 80007c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c4:	4a28      	ldr	r2, [pc, #160]	; (8000868 <HAL_MspInit+0xb4>)
 80007c6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80007ca:	6253      	str	r3, [r2, #36]	; 0x24


	/*
	 * 3. configure the priority of system exception
	 */
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2100      	movs	r1, #0
 80007d0:	f06f 000b 	mvn.w	r0, #11
 80007d4:	f000 fac1 	bl	8000d5a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2100      	movs	r1, #0
 80007dc:	f06f 000a 	mvn.w	r0, #10
 80007e0:	f000 fabb 	bl	8000d5a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2100      	movs	r1, #0
 80007e8:	f06f 0009 	mvn.w	r0, #9
 80007ec:	f000 fab5 	bl	8000d5a <HAL_NVIC_SetPriority>


	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <HAL_MspInit+0xb8>)
 80007f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f8:	4a1c      	ldr	r2, [pc, #112]	; (800086c <HAL_MspInit+0xb8>)
 80007fa:	f043 0301 	orr.w	r3, r3, #1
 80007fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <HAL_MspInit+0xb8>)
 8000802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <HAL_MspInit+0xb8>)
 8000812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000814:	4a15      	ldr	r2, [pc, #84]	; (800086c <HAL_MspInit+0xb8>)
 8000816:	f043 0302 	orr.w	r3, r3, #2
 800081a:	6313      	str	r3, [r2, #48]	; 0x30
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <HAL_MspInit+0xb8>)
 800081e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000820:	f003 0302 	and.w	r3, r3, #2
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <HAL_MspInit+0xb8>)
 800082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000830:	4a0e      	ldr	r2, [pc, #56]	; (800086c <HAL_MspInit+0xb8>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	6313      	str	r3, [r2, #48]	; 0x30
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <HAL_MspInit+0xb8>)
 800083a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083c:	f003 0304 	and.w	r3, r3, #4
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <HAL_MspInit+0xb8>)
 800084a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084c:	4a07      	ldr	r2, [pc, #28]	; (800086c <HAL_MspInit+0xb8>)
 800084e:	f043 0308 	orr.w	r3, r3, #8
 8000852:	6313      	str	r3, [r2, #48]	; 0x30
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <HAL_MspInit+0xb8>)
 8000856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000858:	f003 0308 	and.w	r3, r3, #8
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	683b      	ldr	r3, [r7, #0]
}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	e000ed00 	.word	0xe000ed00
 800086c:	40023800 	.word	0x40023800

08000870 <HAL_TIM_Base_MspInit>:

/*
 * LOW LEVEL PERIPHERALS INITIALIZATION
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	__HAL_RCC_TIM6_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <HAL_TIM_Base_MspInit+0x3c>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <HAL_TIM_Base_MspInit+0x3c>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	6413      	str	r3, [r2, #64]	; 0x40
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <HAL_TIM_Base_MspInit+0x3c>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	f003 0310 	and.w	r3, r3, #16
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]

	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000894:	2036      	movs	r0, #54	; 0x36
 8000896:	f000 fa7c 	bl	8000d92 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	210f      	movs	r1, #15
 800089e:	2036      	movs	r0, #54	; 0x36
 80008a0:	f000 fa5b 	bl	8000d5a <HAL_NVIC_SetPriority>
}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800

080008b0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <ITM_SendChar+0x48>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <ITM_SendChar+0x48>)
 80008c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008c4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <ITM_SendChar+0x4c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a0c      	ldr	r2, [pc, #48]	; (80008fc <ITM_SendChar+0x4c>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80008d2:	bf00      	nop
 80008d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f8      	beq.n	80008d4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80008e2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	6013      	str	r3, [r2, #0]
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000edfc 	.word	0xe000edfc
 80008fc:	e0000e00 	.word	0xe0000e00

08000900 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	e00a      	b.n	8000928 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000912:	f3af 8000 	nop.w
 8000916:	4601      	mov	r1, r0
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	1c5a      	adds	r2, r3, #1
 800091c:	60ba      	str	r2, [r7, #8]
 800091e:	b2ca      	uxtb	r2, r1
 8000920:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	3301      	adds	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697a      	ldr	r2, [r7, #20]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	429a      	cmp	r2, r3
 800092e:	dbf0      	blt.n	8000912 <_read+0x12>
  }

  return len;
 8000930:	687b      	ldr	r3, [r7, #4]
}
 8000932:	4618      	mov	r0, r3
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	60f8      	str	r0, [r7, #12]
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	e009      	b.n	8000960 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	60ba      	str	r2, [r7, #8]
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ffab 	bl	80008b0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	3301      	adds	r3, #1
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	429a      	cmp	r2, r3
 8000966:	dbf1      	blt.n	800094c <_write+0x12>
  }
  return len;
 8000968:	687b      	ldr	r3, [r7, #4]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <_close>:

int _close(int file)
{
 8000972:	b480      	push	{r7}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800097a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800097e:	4618      	mov	r0, r3
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800099a:	605a      	str	r2, [r3, #4]
  return 0;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <_isatty>:

int _isatty(int file)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
	...

080009dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e4:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <_sbrk+0x5c>)
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <_sbrk+0x60>)
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d102      	bne.n	80009fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <_sbrk+0x64>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <_sbrk+0x68>)
 80009fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d207      	bcs.n	8000a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a0c:	f001 fc72 	bl	80022f4 <__errno>
 8000a10:	4603      	mov	r3, r0
 8000a12:	220c      	movs	r2, #12
 8000a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a1a:	e009      	b.n	8000a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <_sbrk+0x64>)
 8000a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20020000 	.word	0x20020000
 8000a3c:	00000400 	.word	0x00000400
 8000a40:	200000e0 	.word	0x200000e0
 8000a44:	20000238 	.word	0x20000238

08000a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a70:	f7ff ffea 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a76:	490d      	ldr	r1, [pc, #52]	; (8000aac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a8c:	4c0a      	ldr	r4, [pc, #40]	; (8000ab8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f001 fc31 	bl	8002300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9e:	f7ff fd77 	bl	8000590 <main>
  bx  lr    
 8000aa2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000aa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ab0:	080032d0 	.word	0x080032d0
  ldr r2, =_sbss
 8000ab4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ab8:	20000234 	.word	0x20000234

08000abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC_IRQHandler>
	...

08000ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <HAL_Init+0x40>)
 8000aca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <HAL_Init+0x40>)
 8000ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <HAL_Init+0x40>)
 8000ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae8:	2003      	movs	r0, #3
 8000aea:	f000 f92b 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 f808 	bl	8000b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af4:	f7ff fe5e 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023c00 	.word	0x40023c00

08000b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_InitTick+0x54>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_InitTick+0x58>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	4619      	mov	r1, r3
 8000b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f943 	bl	8000dae <HAL_SYSTICK_Config>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e00e      	b.n	8000b50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b0f      	cmp	r3, #15
 8000b36:	d80a      	bhi.n	8000b4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b40:	f000 f90b 	bl	8000d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b44:	4a06      	ldr	r2, [pc, #24]	; (8000b60 <HAL_InitTick+0x5c>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e000      	b.n	8000b50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000004 	.word	0x20000004

08000b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x20>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_IncTick+0x24>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <HAL_IncTick+0x24>)
 8000b76:	6013      	str	r3, [r2, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008
 8000b88:	200000e4 	.word	0x200000e4

08000b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <HAL_GetTick+0x14>)
 8000b92:	681b      	ldr	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	200000e4 	.word	0x200000e4

08000ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	f003 0307 	and.w	r3, r3, #7
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db0b      	blt.n	8000c32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f003 021f 	and.w	r2, r3, #31
 8000c20:	4907      	ldr	r1, [pc, #28]	; (8000c40 <__NVIC_EnableIRQ+0x38>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	095b      	lsrs	r3, r3, #5
 8000c28:	2001      	movs	r0, #1
 8000c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	; (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	; (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
         );
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	; 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d10:	d301      	bcc.n	8000d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00f      	b.n	8000d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <SysTick_Config+0x40>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1e:	210f      	movs	r1, #15
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d24:	f7ff ff8e 	bl	8000c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <SysTick_Config+0x40>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2e:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <SysTick_Config+0x40>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	e000e010 	.word	0xe000e010

08000d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ff29 	bl	8000ba4 <__NVIC_SetPriorityGrouping>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6c:	f7ff ff3e 	bl	8000bec <__NVIC_GetPriorityGrouping>
 8000d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	68b9      	ldr	r1, [r7, #8]
 8000d76:	6978      	ldr	r0, [r7, #20]
 8000d78:	f7ff ff8e 	bl	8000c98 <NVIC_EncodePriority>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff5d 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff31 	bl	8000c08 <__NVIC_EnableIRQ>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffa2 	bl	8000d00 <SysTick_Config>
 8000dbc:	4603      	mov	r3, r0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	d106      	bne.n	8000de4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000de2:	e005      	b.n	8000df0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000dea:	f023 0304 	bic.w	r3, r3, #4
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e010 	.word	0xe000e010

08000e00 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000e04:	f000 f802 	bl	8000e0c <HAL_SYSTICK_Callback>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	; 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
 8000e36:	e16b      	b.n	8001110 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	f040 815a 	bne.w	800110a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d005      	beq.n	8000e6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d130      	bne.n	8000ed0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	2203      	movs	r2, #3
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	68da      	ldr	r2, [r3, #12]
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	091b      	lsrs	r3, r3, #4
 8000eba:	f003 0201 	and.w	r2, r3, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b03      	cmp	r3, #3
 8000eda:	d017      	beq.n	8000f0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d123      	bne.n	8000f60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	08da      	lsrs	r2, r3, #3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3208      	adds	r2, #8
 8000f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	691a      	ldr	r2, [r3, #16]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	08da      	lsrs	r2, r3, #3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3208      	adds	r2, #8
 8000f5a:	69b9      	ldr	r1, [r7, #24]
 8000f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0203 	and.w	r2, r3, #3
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 80b4 	beq.w	800110a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b60      	ldr	r3, [pc, #384]	; (8001128 <HAL_GPIO_Init+0x30c>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	4a5f      	ldr	r2, [pc, #380]	; (8001128 <HAL_GPIO_Init+0x30c>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb2:	4b5d      	ldr	r3, [pc, #372]	; (8001128 <HAL_GPIO_Init+0x30c>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fbe:	4a5b      	ldr	r2, [pc, #364]	; (800112c <HAL_GPIO_Init+0x310>)
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	089b      	lsrs	r3, r3, #2
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a52      	ldr	r2, [pc, #328]	; (8001130 <HAL_GPIO_Init+0x314>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d02b      	beq.n	8001042 <HAL_GPIO_Init+0x226>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a51      	ldr	r2, [pc, #324]	; (8001134 <HAL_GPIO_Init+0x318>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d025      	beq.n	800103e <HAL_GPIO_Init+0x222>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a50      	ldr	r2, [pc, #320]	; (8001138 <HAL_GPIO_Init+0x31c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d01f      	beq.n	800103a <HAL_GPIO_Init+0x21e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4f      	ldr	r2, [pc, #316]	; (800113c <HAL_GPIO_Init+0x320>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d019      	beq.n	8001036 <HAL_GPIO_Init+0x21a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4e      	ldr	r2, [pc, #312]	; (8001140 <HAL_GPIO_Init+0x324>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d013      	beq.n	8001032 <HAL_GPIO_Init+0x216>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4d      	ldr	r2, [pc, #308]	; (8001144 <HAL_GPIO_Init+0x328>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d00d      	beq.n	800102e <HAL_GPIO_Init+0x212>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4c      	ldr	r2, [pc, #304]	; (8001148 <HAL_GPIO_Init+0x32c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d007      	beq.n	800102a <HAL_GPIO_Init+0x20e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4b      	ldr	r2, [pc, #300]	; (800114c <HAL_GPIO_Init+0x330>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d101      	bne.n	8001026 <HAL_GPIO_Init+0x20a>
 8001022:	2307      	movs	r3, #7
 8001024:	e00e      	b.n	8001044 <HAL_GPIO_Init+0x228>
 8001026:	2308      	movs	r3, #8
 8001028:	e00c      	b.n	8001044 <HAL_GPIO_Init+0x228>
 800102a:	2306      	movs	r3, #6
 800102c:	e00a      	b.n	8001044 <HAL_GPIO_Init+0x228>
 800102e:	2305      	movs	r3, #5
 8001030:	e008      	b.n	8001044 <HAL_GPIO_Init+0x228>
 8001032:	2304      	movs	r3, #4
 8001034:	e006      	b.n	8001044 <HAL_GPIO_Init+0x228>
 8001036:	2303      	movs	r3, #3
 8001038:	e004      	b.n	8001044 <HAL_GPIO_Init+0x228>
 800103a:	2302      	movs	r3, #2
 800103c:	e002      	b.n	8001044 <HAL_GPIO_Init+0x228>
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <HAL_GPIO_Init+0x228>
 8001042:	2300      	movs	r3, #0
 8001044:	69fa      	ldr	r2, [r7, #28]
 8001046:	f002 0203 	and.w	r2, r2, #3
 800104a:	0092      	lsls	r2, r2, #2
 800104c:	4093      	lsls	r3, r2
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001054:	4935      	ldr	r1, [pc, #212]	; (800112c <HAL_GPIO_Init+0x310>)
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	089b      	lsrs	r3, r3, #2
 800105a:	3302      	adds	r3, #2
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001062:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <HAL_GPIO_Init+0x334>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001086:	4a32      	ldr	r2, [pc, #200]	; (8001150 <HAL_GPIO_Init+0x334>)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800108c:	4b30      	ldr	r3, [pc, #192]	; (8001150 <HAL_GPIO_Init+0x334>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b0:	4a27      	ldr	r2, [pc, #156]	; (8001150 <HAL_GPIO_Init+0x334>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010b6:	4b26      	ldr	r3, [pc, #152]	; (8001150 <HAL_GPIO_Init+0x334>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010da:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <HAL_GPIO_Init+0x334>)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <HAL_GPIO_Init+0x334>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001104:	4a12      	ldr	r2, [pc, #72]	; (8001150 <HAL_GPIO_Init+0x334>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3301      	adds	r3, #1
 800110e:	61fb      	str	r3, [r7, #28]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	2b0f      	cmp	r3, #15
 8001114:	f67f ae90 	bls.w	8000e38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40013800 	.word	0x40013800
 8001130:	40020000 	.word	0x40020000
 8001134:	40020400 	.word	0x40020400
 8001138:	40020800 	.word	0x40020800
 800113c:	40020c00 	.word	0x40020c00
 8001140:	40021000 	.word	0x40021000
 8001144:	40021400 	.word	0x40021400
 8001148:	40021800 	.word	0x40021800
 800114c:	40021c00 	.word	0x40021c00
 8001150:	40013c00 	.word	0x40013c00

08001154 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4013      	ands	r3, r2
 800116c:	041a      	lsls	r2, r3, #16
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43d9      	mvns	r1, r3
 8001172:	887b      	ldrh	r3, [r7, #2]
 8001174:	400b      	ands	r3, r1
 8001176:	431a      	orrs	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	619a      	str	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e267      	b.n	800166a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d075      	beq.n	8001292 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 030c 	and.w	r3, r3, #12
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	d00c      	beq.n	80011cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011b2:	4b85      	ldr	r3, [pc, #532]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80011ba:	2b08      	cmp	r3, #8
 80011bc:	d112      	bne.n	80011e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011be:	4b82      	ldr	r3, [pc, #520]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011ca:	d10b      	bne.n	80011e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011cc:	4b7e      	ldr	r3, [pc, #504]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d05b      	beq.n	8001290 <HAL_RCC_OscConfig+0x108>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d157      	bne.n	8001290 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e242      	b.n	800166a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ec:	d106      	bne.n	80011fc <HAL_RCC_OscConfig+0x74>
 80011ee:	4b76      	ldr	r3, [pc, #472]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a75      	ldr	r2, [pc, #468]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 80011f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e01d      	b.n	8001238 <HAL_RCC_OscConfig+0xb0>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001204:	d10c      	bne.n	8001220 <HAL_RCC_OscConfig+0x98>
 8001206:	4b70      	ldr	r3, [pc, #448]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a6f      	ldr	r2, [pc, #444]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 800120c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	4b6d      	ldr	r3, [pc, #436]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a6c      	ldr	r2, [pc, #432]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 8001218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e00b      	b.n	8001238 <HAL_RCC_OscConfig+0xb0>
 8001220:	4b69      	ldr	r3, [pc, #420]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a68      	ldr	r2, [pc, #416]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 8001226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b66      	ldr	r3, [pc, #408]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a65      	ldr	r2, [pc, #404]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 8001232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d013      	beq.n	8001268 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001240:	f7ff fca4 	bl	8000b8c <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001248:	f7ff fca0 	bl	8000b8c <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b64      	cmp	r3, #100	; 0x64
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e207      	b.n	800166a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125a:	4b5b      	ldr	r3, [pc, #364]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f0      	beq.n	8001248 <HAL_RCC_OscConfig+0xc0>
 8001266:	e014      	b.n	8001292 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fc90 	bl	8000b8c <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001270:	f7ff fc8c 	bl	8000b8c <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	; 0x64
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e1f3      	b.n	800166a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001282:	4b51      	ldr	r3, [pc, #324]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0xe8>
 800128e:	e000      	b.n	8001292 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d063      	beq.n	8001366 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800129e:	4b4a      	ldr	r3, [pc, #296]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00b      	beq.n	80012c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012aa:	4b47      	ldr	r3, [pc, #284]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d11c      	bne.n	80012f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b6:	4b44      	ldr	r3, [pc, #272]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d116      	bne.n	80012f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c2:	4b41      	ldr	r3, [pc, #260]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <HAL_RCC_OscConfig+0x152>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d001      	beq.n	80012da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e1c7      	b.n	800166a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012da:	4b3b      	ldr	r3, [pc, #236]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	4937      	ldr	r1, [pc, #220]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ee:	e03a      	b.n	8001366 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d020      	beq.n	800133a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f8:	4b34      	ldr	r3, [pc, #208]	; (80013cc <HAL_RCC_OscConfig+0x244>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fe:	f7ff fc45 	bl	8000b8c <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001306:	f7ff fc41 	bl	8000b8c <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e1a8      	b.n	800166a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001318:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001324:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	4925      	ldr	r1, [pc, #148]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 8001334:	4313      	orrs	r3, r2
 8001336:	600b      	str	r3, [r1, #0]
 8001338:	e015      	b.n	8001366 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133a:	4b24      	ldr	r3, [pc, #144]	; (80013cc <HAL_RCC_OscConfig+0x244>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff fc24 	bl	8000b8c <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001348:	f7ff fc20 	bl	8000b8c <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e187      	b.n	800166a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d036      	beq.n	80013e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d016      	beq.n	80013a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_RCC_OscConfig+0x248>)
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001380:	f7ff fc04 	bl	8000b8c <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001388:	f7ff fc00 	bl	8000b8c <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e167      	b.n	800166a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <HAL_RCC_OscConfig+0x240>)
 800139c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x200>
 80013a6:	e01b      	b.n	80013e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <HAL_RCC_OscConfig+0x248>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ae:	f7ff fbed 	bl	8000b8c <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b4:	e00e      	b.n	80013d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b6:	f7ff fbe9 	bl	8000b8c <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d907      	bls.n	80013d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e150      	b.n	800166a <HAL_RCC_OscConfig+0x4e2>
 80013c8:	40023800 	.word	0x40023800
 80013cc:	42470000 	.word	0x42470000
 80013d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d4:	4b88      	ldr	r3, [pc, #544]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 80013d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1ea      	bne.n	80013b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 8097 	beq.w	800151c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f2:	4b81      	ldr	r3, [pc, #516]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10f      	bne.n	800141e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	4b7d      	ldr	r3, [pc, #500]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a7c      	ldr	r2, [pc, #496]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 8001408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	4b7a      	ldr	r3, [pc, #488]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800141a:	2301      	movs	r3, #1
 800141c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141e:	4b77      	ldr	r3, [pc, #476]	; (80015fc <HAL_RCC_OscConfig+0x474>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001426:	2b00      	cmp	r3, #0
 8001428:	d118      	bne.n	800145c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142a:	4b74      	ldr	r3, [pc, #464]	; (80015fc <HAL_RCC_OscConfig+0x474>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a73      	ldr	r2, [pc, #460]	; (80015fc <HAL_RCC_OscConfig+0x474>)
 8001430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001436:	f7ff fba9 	bl	8000b8c <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143e:	f7ff fba5 	bl	8000b8c <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e10c      	b.n	800166a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001450:	4b6a      	ldr	r3, [pc, #424]	; (80015fc <HAL_RCC_OscConfig+0x474>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d106      	bne.n	8001472 <HAL_RCC_OscConfig+0x2ea>
 8001464:	4b64      	ldr	r3, [pc, #400]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 8001466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001468:	4a63      	ldr	r2, [pc, #396]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6713      	str	r3, [r2, #112]	; 0x70
 8001470:	e01c      	b.n	80014ac <HAL_RCC_OscConfig+0x324>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b05      	cmp	r3, #5
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0x30c>
 800147a:	4b5f      	ldr	r3, [pc, #380]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 800147c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147e:	4a5e      	ldr	r2, [pc, #376]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	6713      	str	r3, [r2, #112]	; 0x70
 8001486:	4b5c      	ldr	r3, [pc, #368]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 8001488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148a:	4a5b      	ldr	r2, [pc, #364]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6713      	str	r3, [r2, #112]	; 0x70
 8001492:	e00b      	b.n	80014ac <HAL_RCC_OscConfig+0x324>
 8001494:	4b58      	ldr	r3, [pc, #352]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 8001496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001498:	4a57      	ldr	r2, [pc, #348]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 800149a:	f023 0301 	bic.w	r3, r3, #1
 800149e:	6713      	str	r3, [r2, #112]	; 0x70
 80014a0:	4b55      	ldr	r3, [pc, #340]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 80014a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a4:	4a54      	ldr	r2, [pc, #336]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 80014a6:	f023 0304 	bic.w	r3, r3, #4
 80014aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d015      	beq.n	80014e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b4:	f7ff fb6a 	bl	8000b8c <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ba:	e00a      	b.n	80014d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014bc:	f7ff fb66 	bl	8000b8c <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e0cb      	b.n	800166a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d2:	4b49      	ldr	r3, [pc, #292]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 80014d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0ee      	beq.n	80014bc <HAL_RCC_OscConfig+0x334>
 80014de:	e014      	b.n	800150a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e0:	f7ff fb54 	bl	8000b8c <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e6:	e00a      	b.n	80014fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e8:	f7ff fb50 	bl	8000b8c <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e0b5      	b.n	800166a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014fe:	4b3e      	ldr	r3, [pc, #248]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 8001500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1ee      	bne.n	80014e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800150a:	7dfb      	ldrb	r3, [r7, #23]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d105      	bne.n	800151c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001510:	4b39      	ldr	r3, [pc, #228]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	4a38      	ldr	r2, [pc, #224]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 8001516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800151a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80a1 	beq.w	8001668 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001526:	4b34      	ldr	r3, [pc, #208]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b08      	cmp	r3, #8
 8001530:	d05c      	beq.n	80015ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d141      	bne.n	80015be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153a:	4b31      	ldr	r3, [pc, #196]	; (8001600 <HAL_RCC_OscConfig+0x478>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fb24 	bl	8000b8c <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001548:	f7ff fb20 	bl	8000b8c <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e087      	b.n	800166a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155a:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69da      	ldr	r2, [r3, #28]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	019b      	lsls	r3, r3, #6
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157c:	085b      	lsrs	r3, r3, #1
 800157e:	3b01      	subs	r3, #1
 8001580:	041b      	lsls	r3, r3, #16
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001588:	061b      	lsls	r3, r3, #24
 800158a:	491b      	ldr	r1, [pc, #108]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 800158c:	4313      	orrs	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_RCC_OscConfig+0x478>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7ff faf9 	bl	8000b8c <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800159e:	f7ff faf5 	bl	8000b8c <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e05c      	b.n	800166a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x416>
 80015bc:	e054      	b.n	8001668 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_RCC_OscConfig+0x478>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff fae2 	bl	8000b8c <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015cc:	f7ff fade 	bl	8000b8c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e045      	b.n	800166a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_RCC_OscConfig+0x470>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x444>
 80015ea:	e03d      	b.n	8001668 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d107      	bne.n	8001604 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e038      	b.n	800166a <HAL_RCC_OscConfig+0x4e2>
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40007000 	.word	0x40007000
 8001600:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <HAL_RCC_OscConfig+0x4ec>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d028      	beq.n	8001664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800161c:	429a      	cmp	r2, r3
 800161e:	d121      	bne.n	8001664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162a:	429a      	cmp	r2, r3
 800162c:	d11a      	bne.n	8001664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001634:	4013      	ands	r3, r2
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800163a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800163c:	4293      	cmp	r3, r2
 800163e:	d111      	bne.n	8001664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	085b      	lsrs	r3, r3, #1
 800164c:	3b01      	subs	r3, #1
 800164e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001650:	429a      	cmp	r2, r3
 8001652:	d107      	bne.n	8001664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001660:	429a      	cmp	r2, r3
 8001662:	d001      	beq.n	8001668 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800

08001678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0cc      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800168c:	4b68      	ldr	r3, [pc, #416]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0307 	and.w	r3, r3, #7
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d90c      	bls.n	80016b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169a:	4b65      	ldr	r3, [pc, #404]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a2:	4b63      	ldr	r3, [pc, #396]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0b8      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d020      	beq.n	8001702 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016cc:	4b59      	ldr	r3, [pc, #356]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4a58      	ldr	r2, [pc, #352]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e4:	4b53      	ldr	r3, [pc, #332]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	4a52      	ldr	r2, [pc, #328]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f0:	4b50      	ldr	r3, [pc, #320]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	494d      	ldr	r1, [pc, #308]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d044      	beq.n	8001798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d107      	bne.n	8001726 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d119      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e07f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d003      	beq.n	8001736 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001732:	2b03      	cmp	r3, #3
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001736:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d109      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e06f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001746:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e067      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001756:	4b37      	ldr	r3, [pc, #220]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f023 0203 	bic.w	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4934      	ldr	r1, [pc, #208]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	4313      	orrs	r3, r2
 8001766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001768:	f7ff fa10 	bl	8000b8c <HAL_GetTick>
 800176c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	e00a      	b.n	8001786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001770:	f7ff fa0c 	bl	8000b8c <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3288 	movw	r2, #5000	; 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e04f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 020c 	and.w	r2, r3, #12
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	429a      	cmp	r2, r3
 8001796:	d1eb      	bne.n	8001770 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001798:	4b25      	ldr	r3, [pc, #148]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d20c      	bcs.n	80017c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b22      	ldr	r3, [pc, #136]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e032      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d008      	beq.n	80017de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	4916      	ldr	r1, [pc, #88]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	490e      	ldr	r1, [pc, #56]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017fe:	f000 f821 	bl	8001844 <HAL_RCC_GetSysClockFreq>
 8001802:	4602      	mov	r2, r0
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	490a      	ldr	r1, [pc, #40]	; (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	5ccb      	ldrb	r3, [r1, r3]
 8001812:	fa22 f303 	lsr.w	r3, r2, r3
 8001816:	4a09      	ldr	r2, [pc, #36]	; (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1c8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff f970 	bl	8000b04 <HAL_InitTick>

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023c00 	.word	0x40023c00
 8001834:	40023800 	.word	0x40023800
 8001838:	08003274 	.word	0x08003274
 800183c:	20000000 	.word	0x20000000
 8001840:	20000004 	.word	0x20000004

08001844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001848:	b094      	sub	sp, #80	; 0x50
 800184a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800185c:	4b79      	ldr	r3, [pc, #484]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x200>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	2b08      	cmp	r3, #8
 8001866:	d00d      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0x40>
 8001868:	2b08      	cmp	r3, #8
 800186a:	f200 80e1 	bhi.w	8001a30 <HAL_RCC_GetSysClockFreq+0x1ec>
 800186e:	2b00      	cmp	r3, #0
 8001870:	d002      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0x34>
 8001872:	2b04      	cmp	r3, #4
 8001874:	d003      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x3a>
 8001876:	e0db      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001878:	4b73      	ldr	r3, [pc, #460]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x204>)
 800187a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800187c:	e0db      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800187e:	4b73      	ldr	r3, [pc, #460]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x208>)
 8001880:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001882:	e0d8      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001884:	4b6f      	ldr	r3, [pc, #444]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800188c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800188e:	4b6d      	ldr	r3, [pc, #436]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d063      	beq.n	8001962 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189a:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x200>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	099b      	lsrs	r3, r3, #6
 80018a0:	2200      	movs	r2, #0
 80018a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80018a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
 80018ae:	2300      	movs	r3, #0
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
 80018b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018b6:	4622      	mov	r2, r4
 80018b8:	462b      	mov	r3, r5
 80018ba:	f04f 0000 	mov.w	r0, #0
 80018be:	f04f 0100 	mov.w	r1, #0
 80018c2:	0159      	lsls	r1, r3, #5
 80018c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018c8:	0150      	lsls	r0, r2, #5
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4621      	mov	r1, r4
 80018d0:	1a51      	subs	r1, r2, r1
 80018d2:	6139      	str	r1, [r7, #16]
 80018d4:	4629      	mov	r1, r5
 80018d6:	eb63 0301 	sbc.w	r3, r3, r1
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018e8:	4659      	mov	r1, fp
 80018ea:	018b      	lsls	r3, r1, #6
 80018ec:	4651      	mov	r1, sl
 80018ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018f2:	4651      	mov	r1, sl
 80018f4:	018a      	lsls	r2, r1, #6
 80018f6:	4651      	mov	r1, sl
 80018f8:	ebb2 0801 	subs.w	r8, r2, r1
 80018fc:	4659      	mov	r1, fp
 80018fe:	eb63 0901 	sbc.w	r9, r3, r1
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800190e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001912:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001916:	4690      	mov	r8, r2
 8001918:	4699      	mov	r9, r3
 800191a:	4623      	mov	r3, r4
 800191c:	eb18 0303 	adds.w	r3, r8, r3
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	462b      	mov	r3, r5
 8001924:	eb49 0303 	adc.w	r3, r9, r3
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001936:	4629      	mov	r1, r5
 8001938:	024b      	lsls	r3, r1, #9
 800193a:	4621      	mov	r1, r4
 800193c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001940:	4621      	mov	r1, r4
 8001942:	024a      	lsls	r2, r1, #9
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
 8001948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800194a:	2200      	movs	r2, #0
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
 800194e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001950:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001954:	f7fe fc8c 	bl	8000270 <__aeabi_uldivmod>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4613      	mov	r3, r2
 800195e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001960:	e058      	b.n	8001a14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001962:	4b38      	ldr	r3, [pc, #224]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	099b      	lsrs	r3, r3, #6
 8001968:	2200      	movs	r2, #0
 800196a:	4618      	mov	r0, r3
 800196c:	4611      	mov	r1, r2
 800196e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001972:	623b      	str	r3, [r7, #32]
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
 8001978:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800197c:	4642      	mov	r2, r8
 800197e:	464b      	mov	r3, r9
 8001980:	f04f 0000 	mov.w	r0, #0
 8001984:	f04f 0100 	mov.w	r1, #0
 8001988:	0159      	lsls	r1, r3, #5
 800198a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800198e:	0150      	lsls	r0, r2, #5
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4641      	mov	r1, r8
 8001996:	ebb2 0a01 	subs.w	sl, r2, r1
 800199a:	4649      	mov	r1, r9
 800199c:	eb63 0b01 	sbc.w	fp, r3, r1
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019b4:	ebb2 040a 	subs.w	r4, r2, sl
 80019b8:	eb63 050b 	sbc.w	r5, r3, fp
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	00eb      	lsls	r3, r5, #3
 80019c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019ca:	00e2      	lsls	r2, r4, #3
 80019cc:	4614      	mov	r4, r2
 80019ce:	461d      	mov	r5, r3
 80019d0:	4643      	mov	r3, r8
 80019d2:	18e3      	adds	r3, r4, r3
 80019d4:	603b      	str	r3, [r7, #0]
 80019d6:	464b      	mov	r3, r9
 80019d8:	eb45 0303 	adc.w	r3, r5, r3
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019ea:	4629      	mov	r1, r5
 80019ec:	028b      	lsls	r3, r1, #10
 80019ee:	4621      	mov	r1, r4
 80019f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019f4:	4621      	mov	r1, r4
 80019f6:	028a      	lsls	r2, r1, #10
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019fe:	2200      	movs	r2, #0
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	61fa      	str	r2, [r7, #28]
 8001a04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a08:	f7fe fc32 	bl	8000270 <__aeabi_uldivmod>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4613      	mov	r3, r2
 8001a12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	0c1b      	lsrs	r3, r3, #16
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	3301      	adds	r3, #1
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001a24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a2e:	e002      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3750      	adds	r7, #80	; 0x50
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	00f42400 	.word	0x00f42400
 8001a4c:	007a1200 	.word	0x007a1200

08001a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000000 	.word	0x20000000

08001a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a6c:	f7ff fff0 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	0a9b      	lsrs	r3, r3, #10
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	4903      	ldr	r1, [pc, #12]	; (8001a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a7e:	5ccb      	ldrb	r3, [r1, r3]
 8001a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	08003284 	.word	0x08003284

08001a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a94:	f7ff ffdc 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	0b5b      	lsrs	r3, r3, #13
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	4903      	ldr	r1, [pc, #12]	; (8001ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aa6:	5ccb      	ldrb	r3, [r1, r3]
 8001aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	08003284 	.word	0x08003284

08001ab8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e041      	b.n	8001b4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d106      	bne.n	8001ae4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7fe fec6 	bl	8000870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3304      	adds	r3, #4
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f000 f9b6 	bl	8001e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d001      	beq.n	8001b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e04e      	b.n	8001c0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a23      	ldr	r2, [pc, #140]	; (8001c1c <HAL_TIM_Base_Start_IT+0xc4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d022      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x80>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b9a:	d01d      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x80>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a1f      	ldr	r2, [pc, #124]	; (8001c20 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d018      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x80>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a1e      	ldr	r2, [pc, #120]	; (8001c24 <HAL_TIM_Base_Start_IT+0xcc>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d013      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x80>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <HAL_TIM_Base_Start_IT+0xd0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d00e      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x80>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a1b      	ldr	r2, [pc, #108]	; (8001c2c <HAL_TIM_Base_Start_IT+0xd4>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d009      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x80>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a19      	ldr	r2, [pc, #100]	; (8001c30 <HAL_TIM_Base_Start_IT+0xd8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d004      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x80>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a18      	ldr	r2, [pc, #96]	; (8001c34 <HAL_TIM_Base_Start_IT+0xdc>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d111      	bne.n	8001bfc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d010      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f042 0201 	orr.w	r2, r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bfa:	e007      	b.n	8001c0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	40000400 	.word	0x40000400
 8001c24:	40000800 	.word	0x40000800
 8001c28:	40000c00 	.word	0x40000c00
 8001c2c:	40010400 	.word	0x40010400
 8001c30:	40014000 	.word	0x40014000
 8001c34:	40001800 	.word	0x40001800

08001c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d020      	beq.n	8001c9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d01b      	beq.n	8001c9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f06f 0202 	mvn.w	r2, #2
 8001c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f8d2 	bl	8001e2c <HAL_TIM_IC_CaptureCallback>
 8001c88:	e005      	b.n	8001c96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f8c4 	bl	8001e18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f8d5 	bl	8001e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d020      	beq.n	8001ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d01b      	beq.n	8001ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f06f 0204 	mvn.w	r2, #4
 8001cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f8ac 	bl	8001e2c <HAL_TIM_IC_CaptureCallback>
 8001cd4:	e005      	b.n	8001ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f89e 	bl	8001e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f8af 	bl	8001e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d020      	beq.n	8001d34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d01b      	beq.n	8001d34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0208 	mvn.w	r2, #8
 8001d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2204      	movs	r2, #4
 8001d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f886 	bl	8001e2c <HAL_TIM_IC_CaptureCallback>
 8001d20:	e005      	b.n	8001d2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f878 	bl	8001e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f889 	bl	8001e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d020      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d01b      	beq.n	8001d80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0210 	mvn.w	r2, #16
 8001d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2208      	movs	r2, #8
 8001d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f860 	bl	8001e2c <HAL_TIM_IC_CaptureCallback>
 8001d6c:	e005      	b.n	8001d7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f852 	bl	8001e18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f863 	bl	8001e40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00c      	beq.n	8001da4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d007      	beq.n	8001da4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0201 	mvn.w	r2, #1
 8001d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7fe fc00 	bl	80005a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00c      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f906 	bl	8001fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00c      	beq.n	8001dec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d007      	beq.n	8001dec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f834 	bl	8001e54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00c      	beq.n	8001e10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f003 0320 	and.w	r3, r3, #32
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d007      	beq.n	8001e10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0220 	mvn.w	r2, #32
 8001e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f8d8 	bl	8001fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e10:	bf00      	nop
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a46      	ldr	r2, [pc, #280]	; (8001f94 <TIM_Base_SetConfig+0x12c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d013      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e86:	d00f      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a43      	ldr	r2, [pc, #268]	; (8001f98 <TIM_Base_SetConfig+0x130>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d00b      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a42      	ldr	r2, [pc, #264]	; (8001f9c <TIM_Base_SetConfig+0x134>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d007      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a41      	ldr	r2, [pc, #260]	; (8001fa0 <TIM_Base_SetConfig+0x138>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d003      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a40      	ldr	r2, [pc, #256]	; (8001fa4 <TIM_Base_SetConfig+0x13c>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d108      	bne.n	8001eba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a35      	ldr	r2, [pc, #212]	; (8001f94 <TIM_Base_SetConfig+0x12c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d02b      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec8:	d027      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a32      	ldr	r2, [pc, #200]	; (8001f98 <TIM_Base_SetConfig+0x130>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d023      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a31      	ldr	r2, [pc, #196]	; (8001f9c <TIM_Base_SetConfig+0x134>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01f      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a30      	ldr	r2, [pc, #192]	; (8001fa0 <TIM_Base_SetConfig+0x138>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d01b      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a2f      	ldr	r2, [pc, #188]	; (8001fa4 <TIM_Base_SetConfig+0x13c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d017      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a2e      	ldr	r2, [pc, #184]	; (8001fa8 <TIM_Base_SetConfig+0x140>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d013      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a2d      	ldr	r2, [pc, #180]	; (8001fac <TIM_Base_SetConfig+0x144>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00f      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a2c      	ldr	r2, [pc, #176]	; (8001fb0 <TIM_Base_SetConfig+0x148>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00b      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a2b      	ldr	r2, [pc, #172]	; (8001fb4 <TIM_Base_SetConfig+0x14c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d007      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a2a      	ldr	r2, [pc, #168]	; (8001fb8 <TIM_Base_SetConfig+0x150>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d003      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a29      	ldr	r2, [pc, #164]	; (8001fbc <TIM_Base_SetConfig+0x154>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d108      	bne.n	8001f2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a10      	ldr	r2, [pc, #64]	; (8001f94 <TIM_Base_SetConfig+0x12c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d003      	beq.n	8001f60 <TIM_Base_SetConfig+0xf8>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <TIM_Base_SetConfig+0x13c>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d103      	bne.n	8001f68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d105      	bne.n	8001f86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f023 0201 	bic.w	r2, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	611a      	str	r2, [r3, #16]
  }
}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40010000 	.word	0x40010000
 8001f98:	40000400 	.word	0x40000400
 8001f9c:	40000800 	.word	0x40000800
 8001fa0:	40000c00 	.word	0x40000c00
 8001fa4:	40010400 	.word	0x40010400
 8001fa8:	40014000 	.word	0x40014000
 8001fac:	40014400 	.word	0x40014400
 8001fb0:	40014800 	.word	0x40014800
 8001fb4:	40001800 	.word	0x40001800
 8001fb8:	40001c00 	.word	0x40001c00
 8001fbc:	40002000 	.word	0x40002000

08001fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <std>:
 8001fe8:	2300      	movs	r3, #0
 8001fea:	b510      	push	{r4, lr}
 8001fec:	4604      	mov	r4, r0
 8001fee:	e9c0 3300 	strd	r3, r3, [r0]
 8001ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001ff6:	6083      	str	r3, [r0, #8]
 8001ff8:	8181      	strh	r1, [r0, #12]
 8001ffa:	6643      	str	r3, [r0, #100]	; 0x64
 8001ffc:	81c2      	strh	r2, [r0, #14]
 8001ffe:	6183      	str	r3, [r0, #24]
 8002000:	4619      	mov	r1, r3
 8002002:	2208      	movs	r2, #8
 8002004:	305c      	adds	r0, #92	; 0x5c
 8002006:	f000 f926 	bl	8002256 <memset>
 800200a:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <std+0x58>)
 800200c:	6263      	str	r3, [r4, #36]	; 0x24
 800200e:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <std+0x5c>)
 8002010:	62a3      	str	r3, [r4, #40]	; 0x28
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <std+0x60>)
 8002014:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002016:	4b0d      	ldr	r3, [pc, #52]	; (800204c <std+0x64>)
 8002018:	6323      	str	r3, [r4, #48]	; 0x30
 800201a:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <std+0x68>)
 800201c:	6224      	str	r4, [r4, #32]
 800201e:	429c      	cmp	r4, r3
 8002020:	d006      	beq.n	8002030 <std+0x48>
 8002022:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002026:	4294      	cmp	r4, r2
 8002028:	d002      	beq.n	8002030 <std+0x48>
 800202a:	33d0      	adds	r3, #208	; 0xd0
 800202c:	429c      	cmp	r4, r3
 800202e:	d105      	bne.n	800203c <std+0x54>
 8002030:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002038:	f000 b986 	b.w	8002348 <__retarget_lock_init_recursive>
 800203c:	bd10      	pop	{r4, pc}
 800203e:	bf00      	nop
 8002040:	080021d1 	.word	0x080021d1
 8002044:	080021f3 	.word	0x080021f3
 8002048:	0800222b 	.word	0x0800222b
 800204c:	0800224f 	.word	0x0800224f
 8002050:	200000e8 	.word	0x200000e8

08002054 <stdio_exit_handler>:
 8002054:	4a02      	ldr	r2, [pc, #8]	; (8002060 <stdio_exit_handler+0xc>)
 8002056:	4903      	ldr	r1, [pc, #12]	; (8002064 <stdio_exit_handler+0x10>)
 8002058:	4803      	ldr	r0, [pc, #12]	; (8002068 <stdio_exit_handler+0x14>)
 800205a:	f000 b869 	b.w	8002130 <_fwalk_sglue>
 800205e:	bf00      	nop
 8002060:	2000000c 	.word	0x2000000c
 8002064:	08002ea5 	.word	0x08002ea5
 8002068:	20000018 	.word	0x20000018

0800206c <cleanup_stdio>:
 800206c:	6841      	ldr	r1, [r0, #4]
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <cleanup_stdio+0x34>)
 8002070:	4299      	cmp	r1, r3
 8002072:	b510      	push	{r4, lr}
 8002074:	4604      	mov	r4, r0
 8002076:	d001      	beq.n	800207c <cleanup_stdio+0x10>
 8002078:	f000 ff14 	bl	8002ea4 <_fflush_r>
 800207c:	68a1      	ldr	r1, [r4, #8]
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <cleanup_stdio+0x38>)
 8002080:	4299      	cmp	r1, r3
 8002082:	d002      	beq.n	800208a <cleanup_stdio+0x1e>
 8002084:	4620      	mov	r0, r4
 8002086:	f000 ff0d 	bl	8002ea4 <_fflush_r>
 800208a:	68e1      	ldr	r1, [r4, #12]
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <cleanup_stdio+0x3c>)
 800208e:	4299      	cmp	r1, r3
 8002090:	d004      	beq.n	800209c <cleanup_stdio+0x30>
 8002092:	4620      	mov	r0, r4
 8002094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002098:	f000 bf04 	b.w	8002ea4 <_fflush_r>
 800209c:	bd10      	pop	{r4, pc}
 800209e:	bf00      	nop
 80020a0:	200000e8 	.word	0x200000e8
 80020a4:	20000150 	.word	0x20000150
 80020a8:	200001b8 	.word	0x200001b8

080020ac <global_stdio_init.part.0>:
 80020ac:	b510      	push	{r4, lr}
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <global_stdio_init.part.0+0x30>)
 80020b0:	4c0b      	ldr	r4, [pc, #44]	; (80020e0 <global_stdio_init.part.0+0x34>)
 80020b2:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <global_stdio_init.part.0+0x38>)
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	4620      	mov	r0, r4
 80020b8:	2200      	movs	r2, #0
 80020ba:	2104      	movs	r1, #4
 80020bc:	f7ff ff94 	bl	8001fe8 <std>
 80020c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80020c4:	2201      	movs	r2, #1
 80020c6:	2109      	movs	r1, #9
 80020c8:	f7ff ff8e 	bl	8001fe8 <std>
 80020cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80020d0:	2202      	movs	r2, #2
 80020d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020d6:	2112      	movs	r1, #18
 80020d8:	f7ff bf86 	b.w	8001fe8 <std>
 80020dc:	20000220 	.word	0x20000220
 80020e0:	200000e8 	.word	0x200000e8
 80020e4:	08002055 	.word	0x08002055

080020e8 <__sfp_lock_acquire>:
 80020e8:	4801      	ldr	r0, [pc, #4]	; (80020f0 <__sfp_lock_acquire+0x8>)
 80020ea:	f000 b92e 	b.w	800234a <__retarget_lock_acquire_recursive>
 80020ee:	bf00      	nop
 80020f0:	20000229 	.word	0x20000229

080020f4 <__sfp_lock_release>:
 80020f4:	4801      	ldr	r0, [pc, #4]	; (80020fc <__sfp_lock_release+0x8>)
 80020f6:	f000 b929 	b.w	800234c <__retarget_lock_release_recursive>
 80020fa:	bf00      	nop
 80020fc:	20000229 	.word	0x20000229

08002100 <__sinit>:
 8002100:	b510      	push	{r4, lr}
 8002102:	4604      	mov	r4, r0
 8002104:	f7ff fff0 	bl	80020e8 <__sfp_lock_acquire>
 8002108:	6a23      	ldr	r3, [r4, #32]
 800210a:	b11b      	cbz	r3, 8002114 <__sinit+0x14>
 800210c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002110:	f7ff bff0 	b.w	80020f4 <__sfp_lock_release>
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <__sinit+0x28>)
 8002116:	6223      	str	r3, [r4, #32]
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <__sinit+0x2c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f5      	bne.n	800210c <__sinit+0xc>
 8002120:	f7ff ffc4 	bl	80020ac <global_stdio_init.part.0>
 8002124:	e7f2      	b.n	800210c <__sinit+0xc>
 8002126:	bf00      	nop
 8002128:	0800206d 	.word	0x0800206d
 800212c:	20000220 	.word	0x20000220

08002130 <_fwalk_sglue>:
 8002130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002134:	4607      	mov	r7, r0
 8002136:	4688      	mov	r8, r1
 8002138:	4614      	mov	r4, r2
 800213a:	2600      	movs	r6, #0
 800213c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002140:	f1b9 0901 	subs.w	r9, r9, #1
 8002144:	d505      	bpl.n	8002152 <_fwalk_sglue+0x22>
 8002146:	6824      	ldr	r4, [r4, #0]
 8002148:	2c00      	cmp	r4, #0
 800214a:	d1f7      	bne.n	800213c <_fwalk_sglue+0xc>
 800214c:	4630      	mov	r0, r6
 800214e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002152:	89ab      	ldrh	r3, [r5, #12]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d907      	bls.n	8002168 <_fwalk_sglue+0x38>
 8002158:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800215c:	3301      	adds	r3, #1
 800215e:	d003      	beq.n	8002168 <_fwalk_sglue+0x38>
 8002160:	4629      	mov	r1, r5
 8002162:	4638      	mov	r0, r7
 8002164:	47c0      	blx	r8
 8002166:	4306      	orrs	r6, r0
 8002168:	3568      	adds	r5, #104	; 0x68
 800216a:	e7e9      	b.n	8002140 <_fwalk_sglue+0x10>

0800216c <iprintf>:
 800216c:	b40f      	push	{r0, r1, r2, r3}
 800216e:	b507      	push	{r0, r1, r2, lr}
 8002170:	4906      	ldr	r1, [pc, #24]	; (800218c <iprintf+0x20>)
 8002172:	ab04      	add	r3, sp, #16
 8002174:	6808      	ldr	r0, [r1, #0]
 8002176:	f853 2b04 	ldr.w	r2, [r3], #4
 800217a:	6881      	ldr	r1, [r0, #8]
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	f000 fb61 	bl	8002844 <_vfiprintf_r>
 8002182:	b003      	add	sp, #12
 8002184:	f85d eb04 	ldr.w	lr, [sp], #4
 8002188:	b004      	add	sp, #16
 800218a:	4770      	bx	lr
 800218c:	20000064 	.word	0x20000064

08002190 <siprintf>:
 8002190:	b40e      	push	{r1, r2, r3}
 8002192:	b500      	push	{lr}
 8002194:	b09c      	sub	sp, #112	; 0x70
 8002196:	ab1d      	add	r3, sp, #116	; 0x74
 8002198:	9002      	str	r0, [sp, #8]
 800219a:	9006      	str	r0, [sp, #24]
 800219c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80021a0:	4809      	ldr	r0, [pc, #36]	; (80021c8 <siprintf+0x38>)
 80021a2:	9107      	str	r1, [sp, #28]
 80021a4:	9104      	str	r1, [sp, #16]
 80021a6:	4909      	ldr	r1, [pc, #36]	; (80021cc <siprintf+0x3c>)
 80021a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80021ac:	9105      	str	r1, [sp, #20]
 80021ae:	6800      	ldr	r0, [r0, #0]
 80021b0:	9301      	str	r3, [sp, #4]
 80021b2:	a902      	add	r1, sp, #8
 80021b4:	f000 fa1e 	bl	80025f4 <_svfiprintf_r>
 80021b8:	9b02      	ldr	r3, [sp, #8]
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
 80021be:	b01c      	add	sp, #112	; 0x70
 80021c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80021c4:	b003      	add	sp, #12
 80021c6:	4770      	bx	lr
 80021c8:	20000064 	.word	0x20000064
 80021cc:	ffff0208 	.word	0xffff0208

080021d0 <__sread>:
 80021d0:	b510      	push	{r4, lr}
 80021d2:	460c      	mov	r4, r1
 80021d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021d8:	f000 f868 	bl	80022ac <_read_r>
 80021dc:	2800      	cmp	r0, #0
 80021de:	bfab      	itete	ge
 80021e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80021e2:	89a3      	ldrhlt	r3, [r4, #12]
 80021e4:	181b      	addge	r3, r3, r0
 80021e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80021ea:	bfac      	ite	ge
 80021ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80021ee:	81a3      	strhlt	r3, [r4, #12]
 80021f0:	bd10      	pop	{r4, pc}

080021f2 <__swrite>:
 80021f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021f6:	461f      	mov	r7, r3
 80021f8:	898b      	ldrh	r3, [r1, #12]
 80021fa:	05db      	lsls	r3, r3, #23
 80021fc:	4605      	mov	r5, r0
 80021fe:	460c      	mov	r4, r1
 8002200:	4616      	mov	r6, r2
 8002202:	d505      	bpl.n	8002210 <__swrite+0x1e>
 8002204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002208:	2302      	movs	r3, #2
 800220a:	2200      	movs	r2, #0
 800220c:	f000 f83c 	bl	8002288 <_lseek_r>
 8002210:	89a3      	ldrh	r3, [r4, #12]
 8002212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002216:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800221a:	81a3      	strh	r3, [r4, #12]
 800221c:	4632      	mov	r2, r6
 800221e:	463b      	mov	r3, r7
 8002220:	4628      	mov	r0, r5
 8002222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002226:	f000 b853 	b.w	80022d0 <_write_r>

0800222a <__sseek>:
 800222a:	b510      	push	{r4, lr}
 800222c:	460c      	mov	r4, r1
 800222e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002232:	f000 f829 	bl	8002288 <_lseek_r>
 8002236:	1c43      	adds	r3, r0, #1
 8002238:	89a3      	ldrh	r3, [r4, #12]
 800223a:	bf15      	itete	ne
 800223c:	6560      	strne	r0, [r4, #84]	; 0x54
 800223e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002242:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002246:	81a3      	strheq	r3, [r4, #12]
 8002248:	bf18      	it	ne
 800224a:	81a3      	strhne	r3, [r4, #12]
 800224c:	bd10      	pop	{r4, pc}

0800224e <__sclose>:
 800224e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002252:	f000 b809 	b.w	8002268 <_close_r>

08002256 <memset>:
 8002256:	4402      	add	r2, r0
 8002258:	4603      	mov	r3, r0
 800225a:	4293      	cmp	r3, r2
 800225c:	d100      	bne.n	8002260 <memset+0xa>
 800225e:	4770      	bx	lr
 8002260:	f803 1b01 	strb.w	r1, [r3], #1
 8002264:	e7f9      	b.n	800225a <memset+0x4>
	...

08002268 <_close_r>:
 8002268:	b538      	push	{r3, r4, r5, lr}
 800226a:	4d06      	ldr	r5, [pc, #24]	; (8002284 <_close_r+0x1c>)
 800226c:	2300      	movs	r3, #0
 800226e:	4604      	mov	r4, r0
 8002270:	4608      	mov	r0, r1
 8002272:	602b      	str	r3, [r5, #0]
 8002274:	f7fe fb7d 	bl	8000972 <_close>
 8002278:	1c43      	adds	r3, r0, #1
 800227a:	d102      	bne.n	8002282 <_close_r+0x1a>
 800227c:	682b      	ldr	r3, [r5, #0]
 800227e:	b103      	cbz	r3, 8002282 <_close_r+0x1a>
 8002280:	6023      	str	r3, [r4, #0]
 8002282:	bd38      	pop	{r3, r4, r5, pc}
 8002284:	20000224 	.word	0x20000224

08002288 <_lseek_r>:
 8002288:	b538      	push	{r3, r4, r5, lr}
 800228a:	4d07      	ldr	r5, [pc, #28]	; (80022a8 <_lseek_r+0x20>)
 800228c:	4604      	mov	r4, r0
 800228e:	4608      	mov	r0, r1
 8002290:	4611      	mov	r1, r2
 8002292:	2200      	movs	r2, #0
 8002294:	602a      	str	r2, [r5, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	f7fe fb92 	bl	80009c0 <_lseek>
 800229c:	1c43      	adds	r3, r0, #1
 800229e:	d102      	bne.n	80022a6 <_lseek_r+0x1e>
 80022a0:	682b      	ldr	r3, [r5, #0]
 80022a2:	b103      	cbz	r3, 80022a6 <_lseek_r+0x1e>
 80022a4:	6023      	str	r3, [r4, #0]
 80022a6:	bd38      	pop	{r3, r4, r5, pc}
 80022a8:	20000224 	.word	0x20000224

080022ac <_read_r>:
 80022ac:	b538      	push	{r3, r4, r5, lr}
 80022ae:	4d07      	ldr	r5, [pc, #28]	; (80022cc <_read_r+0x20>)
 80022b0:	4604      	mov	r4, r0
 80022b2:	4608      	mov	r0, r1
 80022b4:	4611      	mov	r1, r2
 80022b6:	2200      	movs	r2, #0
 80022b8:	602a      	str	r2, [r5, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	f7fe fb20 	bl	8000900 <_read>
 80022c0:	1c43      	adds	r3, r0, #1
 80022c2:	d102      	bne.n	80022ca <_read_r+0x1e>
 80022c4:	682b      	ldr	r3, [r5, #0]
 80022c6:	b103      	cbz	r3, 80022ca <_read_r+0x1e>
 80022c8:	6023      	str	r3, [r4, #0]
 80022ca:	bd38      	pop	{r3, r4, r5, pc}
 80022cc:	20000224 	.word	0x20000224

080022d0 <_write_r>:
 80022d0:	b538      	push	{r3, r4, r5, lr}
 80022d2:	4d07      	ldr	r5, [pc, #28]	; (80022f0 <_write_r+0x20>)
 80022d4:	4604      	mov	r4, r0
 80022d6:	4608      	mov	r0, r1
 80022d8:	4611      	mov	r1, r2
 80022da:	2200      	movs	r2, #0
 80022dc:	602a      	str	r2, [r5, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	f7fe fb2b 	bl	800093a <_write>
 80022e4:	1c43      	adds	r3, r0, #1
 80022e6:	d102      	bne.n	80022ee <_write_r+0x1e>
 80022e8:	682b      	ldr	r3, [r5, #0]
 80022ea:	b103      	cbz	r3, 80022ee <_write_r+0x1e>
 80022ec:	6023      	str	r3, [r4, #0]
 80022ee:	bd38      	pop	{r3, r4, r5, pc}
 80022f0:	20000224 	.word	0x20000224

080022f4 <__errno>:
 80022f4:	4b01      	ldr	r3, [pc, #4]	; (80022fc <__errno+0x8>)
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	20000064 	.word	0x20000064

08002300 <__libc_init_array>:
 8002300:	b570      	push	{r4, r5, r6, lr}
 8002302:	4d0d      	ldr	r5, [pc, #52]	; (8002338 <__libc_init_array+0x38>)
 8002304:	4c0d      	ldr	r4, [pc, #52]	; (800233c <__libc_init_array+0x3c>)
 8002306:	1b64      	subs	r4, r4, r5
 8002308:	10a4      	asrs	r4, r4, #2
 800230a:	2600      	movs	r6, #0
 800230c:	42a6      	cmp	r6, r4
 800230e:	d109      	bne.n	8002324 <__libc_init_array+0x24>
 8002310:	4d0b      	ldr	r5, [pc, #44]	; (8002340 <__libc_init_array+0x40>)
 8002312:	4c0c      	ldr	r4, [pc, #48]	; (8002344 <__libc_init_array+0x44>)
 8002314:	f000 ff78 	bl	8003208 <_init>
 8002318:	1b64      	subs	r4, r4, r5
 800231a:	10a4      	asrs	r4, r4, #2
 800231c:	2600      	movs	r6, #0
 800231e:	42a6      	cmp	r6, r4
 8002320:	d105      	bne.n	800232e <__libc_init_array+0x2e>
 8002322:	bd70      	pop	{r4, r5, r6, pc}
 8002324:	f855 3b04 	ldr.w	r3, [r5], #4
 8002328:	4798      	blx	r3
 800232a:	3601      	adds	r6, #1
 800232c:	e7ee      	b.n	800230c <__libc_init_array+0xc>
 800232e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002332:	4798      	blx	r3
 8002334:	3601      	adds	r6, #1
 8002336:	e7f2      	b.n	800231e <__libc_init_array+0x1e>
 8002338:	080032c8 	.word	0x080032c8
 800233c:	080032c8 	.word	0x080032c8
 8002340:	080032c8 	.word	0x080032c8
 8002344:	080032cc 	.word	0x080032cc

08002348 <__retarget_lock_init_recursive>:
 8002348:	4770      	bx	lr

0800234a <__retarget_lock_acquire_recursive>:
 800234a:	4770      	bx	lr

0800234c <__retarget_lock_release_recursive>:
 800234c:	4770      	bx	lr
	...

08002350 <_free_r>:
 8002350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002352:	2900      	cmp	r1, #0
 8002354:	d044      	beq.n	80023e0 <_free_r+0x90>
 8002356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800235a:	9001      	str	r0, [sp, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	f1a1 0404 	sub.w	r4, r1, #4
 8002362:	bfb8      	it	lt
 8002364:	18e4      	addlt	r4, r4, r3
 8002366:	f000 f8df 	bl	8002528 <__malloc_lock>
 800236a:	4a1e      	ldr	r2, [pc, #120]	; (80023e4 <_free_r+0x94>)
 800236c:	9801      	ldr	r0, [sp, #4]
 800236e:	6813      	ldr	r3, [r2, #0]
 8002370:	b933      	cbnz	r3, 8002380 <_free_r+0x30>
 8002372:	6063      	str	r3, [r4, #4]
 8002374:	6014      	str	r4, [r2, #0]
 8002376:	b003      	add	sp, #12
 8002378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800237c:	f000 b8da 	b.w	8002534 <__malloc_unlock>
 8002380:	42a3      	cmp	r3, r4
 8002382:	d908      	bls.n	8002396 <_free_r+0x46>
 8002384:	6825      	ldr	r5, [r4, #0]
 8002386:	1961      	adds	r1, r4, r5
 8002388:	428b      	cmp	r3, r1
 800238a:	bf01      	itttt	eq
 800238c:	6819      	ldreq	r1, [r3, #0]
 800238e:	685b      	ldreq	r3, [r3, #4]
 8002390:	1949      	addeq	r1, r1, r5
 8002392:	6021      	streq	r1, [r4, #0]
 8002394:	e7ed      	b.n	8002372 <_free_r+0x22>
 8002396:	461a      	mov	r2, r3
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	b10b      	cbz	r3, 80023a0 <_free_r+0x50>
 800239c:	42a3      	cmp	r3, r4
 800239e:	d9fa      	bls.n	8002396 <_free_r+0x46>
 80023a0:	6811      	ldr	r1, [r2, #0]
 80023a2:	1855      	adds	r5, r2, r1
 80023a4:	42a5      	cmp	r5, r4
 80023a6:	d10b      	bne.n	80023c0 <_free_r+0x70>
 80023a8:	6824      	ldr	r4, [r4, #0]
 80023aa:	4421      	add	r1, r4
 80023ac:	1854      	adds	r4, r2, r1
 80023ae:	42a3      	cmp	r3, r4
 80023b0:	6011      	str	r1, [r2, #0]
 80023b2:	d1e0      	bne.n	8002376 <_free_r+0x26>
 80023b4:	681c      	ldr	r4, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	6053      	str	r3, [r2, #4]
 80023ba:	440c      	add	r4, r1
 80023bc:	6014      	str	r4, [r2, #0]
 80023be:	e7da      	b.n	8002376 <_free_r+0x26>
 80023c0:	d902      	bls.n	80023c8 <_free_r+0x78>
 80023c2:	230c      	movs	r3, #12
 80023c4:	6003      	str	r3, [r0, #0]
 80023c6:	e7d6      	b.n	8002376 <_free_r+0x26>
 80023c8:	6825      	ldr	r5, [r4, #0]
 80023ca:	1961      	adds	r1, r4, r5
 80023cc:	428b      	cmp	r3, r1
 80023ce:	bf04      	itt	eq
 80023d0:	6819      	ldreq	r1, [r3, #0]
 80023d2:	685b      	ldreq	r3, [r3, #4]
 80023d4:	6063      	str	r3, [r4, #4]
 80023d6:	bf04      	itt	eq
 80023d8:	1949      	addeq	r1, r1, r5
 80023da:	6021      	streq	r1, [r4, #0]
 80023dc:	6054      	str	r4, [r2, #4]
 80023de:	e7ca      	b.n	8002376 <_free_r+0x26>
 80023e0:	b003      	add	sp, #12
 80023e2:	bd30      	pop	{r4, r5, pc}
 80023e4:	2000022c 	.word	0x2000022c

080023e8 <sbrk_aligned>:
 80023e8:	b570      	push	{r4, r5, r6, lr}
 80023ea:	4e0e      	ldr	r6, [pc, #56]	; (8002424 <sbrk_aligned+0x3c>)
 80023ec:	460c      	mov	r4, r1
 80023ee:	6831      	ldr	r1, [r6, #0]
 80023f0:	4605      	mov	r5, r0
 80023f2:	b911      	cbnz	r1, 80023fa <sbrk_aligned+0x12>
 80023f4:	f000 fe2e 	bl	8003054 <_sbrk_r>
 80023f8:	6030      	str	r0, [r6, #0]
 80023fa:	4621      	mov	r1, r4
 80023fc:	4628      	mov	r0, r5
 80023fe:	f000 fe29 	bl	8003054 <_sbrk_r>
 8002402:	1c43      	adds	r3, r0, #1
 8002404:	d00a      	beq.n	800241c <sbrk_aligned+0x34>
 8002406:	1cc4      	adds	r4, r0, #3
 8002408:	f024 0403 	bic.w	r4, r4, #3
 800240c:	42a0      	cmp	r0, r4
 800240e:	d007      	beq.n	8002420 <sbrk_aligned+0x38>
 8002410:	1a21      	subs	r1, r4, r0
 8002412:	4628      	mov	r0, r5
 8002414:	f000 fe1e 	bl	8003054 <_sbrk_r>
 8002418:	3001      	adds	r0, #1
 800241a:	d101      	bne.n	8002420 <sbrk_aligned+0x38>
 800241c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002420:	4620      	mov	r0, r4
 8002422:	bd70      	pop	{r4, r5, r6, pc}
 8002424:	20000230 	.word	0x20000230

08002428 <_malloc_r>:
 8002428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800242c:	1ccd      	adds	r5, r1, #3
 800242e:	f025 0503 	bic.w	r5, r5, #3
 8002432:	3508      	adds	r5, #8
 8002434:	2d0c      	cmp	r5, #12
 8002436:	bf38      	it	cc
 8002438:	250c      	movcc	r5, #12
 800243a:	2d00      	cmp	r5, #0
 800243c:	4607      	mov	r7, r0
 800243e:	db01      	blt.n	8002444 <_malloc_r+0x1c>
 8002440:	42a9      	cmp	r1, r5
 8002442:	d905      	bls.n	8002450 <_malloc_r+0x28>
 8002444:	230c      	movs	r3, #12
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	2600      	movs	r6, #0
 800244a:	4630      	mov	r0, r6
 800244c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002450:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002524 <_malloc_r+0xfc>
 8002454:	f000 f868 	bl	8002528 <__malloc_lock>
 8002458:	f8d8 3000 	ldr.w	r3, [r8]
 800245c:	461c      	mov	r4, r3
 800245e:	bb5c      	cbnz	r4, 80024b8 <_malloc_r+0x90>
 8002460:	4629      	mov	r1, r5
 8002462:	4638      	mov	r0, r7
 8002464:	f7ff ffc0 	bl	80023e8 <sbrk_aligned>
 8002468:	1c43      	adds	r3, r0, #1
 800246a:	4604      	mov	r4, r0
 800246c:	d155      	bne.n	800251a <_malloc_r+0xf2>
 800246e:	f8d8 4000 	ldr.w	r4, [r8]
 8002472:	4626      	mov	r6, r4
 8002474:	2e00      	cmp	r6, #0
 8002476:	d145      	bne.n	8002504 <_malloc_r+0xdc>
 8002478:	2c00      	cmp	r4, #0
 800247a:	d048      	beq.n	800250e <_malloc_r+0xe6>
 800247c:	6823      	ldr	r3, [r4, #0]
 800247e:	4631      	mov	r1, r6
 8002480:	4638      	mov	r0, r7
 8002482:	eb04 0903 	add.w	r9, r4, r3
 8002486:	f000 fde5 	bl	8003054 <_sbrk_r>
 800248a:	4581      	cmp	r9, r0
 800248c:	d13f      	bne.n	800250e <_malloc_r+0xe6>
 800248e:	6821      	ldr	r1, [r4, #0]
 8002490:	1a6d      	subs	r5, r5, r1
 8002492:	4629      	mov	r1, r5
 8002494:	4638      	mov	r0, r7
 8002496:	f7ff ffa7 	bl	80023e8 <sbrk_aligned>
 800249a:	3001      	adds	r0, #1
 800249c:	d037      	beq.n	800250e <_malloc_r+0xe6>
 800249e:	6823      	ldr	r3, [r4, #0]
 80024a0:	442b      	add	r3, r5
 80024a2:	6023      	str	r3, [r4, #0]
 80024a4:	f8d8 3000 	ldr.w	r3, [r8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d038      	beq.n	800251e <_malloc_r+0xf6>
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	42a2      	cmp	r2, r4
 80024b0:	d12b      	bne.n	800250a <_malloc_r+0xe2>
 80024b2:	2200      	movs	r2, #0
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	e00f      	b.n	80024d8 <_malloc_r+0xb0>
 80024b8:	6822      	ldr	r2, [r4, #0]
 80024ba:	1b52      	subs	r2, r2, r5
 80024bc:	d41f      	bmi.n	80024fe <_malloc_r+0xd6>
 80024be:	2a0b      	cmp	r2, #11
 80024c0:	d917      	bls.n	80024f2 <_malloc_r+0xca>
 80024c2:	1961      	adds	r1, r4, r5
 80024c4:	42a3      	cmp	r3, r4
 80024c6:	6025      	str	r5, [r4, #0]
 80024c8:	bf18      	it	ne
 80024ca:	6059      	strne	r1, [r3, #4]
 80024cc:	6863      	ldr	r3, [r4, #4]
 80024ce:	bf08      	it	eq
 80024d0:	f8c8 1000 	streq.w	r1, [r8]
 80024d4:	5162      	str	r2, [r4, r5]
 80024d6:	604b      	str	r3, [r1, #4]
 80024d8:	4638      	mov	r0, r7
 80024da:	f104 060b 	add.w	r6, r4, #11
 80024de:	f000 f829 	bl	8002534 <__malloc_unlock>
 80024e2:	f026 0607 	bic.w	r6, r6, #7
 80024e6:	1d23      	adds	r3, r4, #4
 80024e8:	1af2      	subs	r2, r6, r3
 80024ea:	d0ae      	beq.n	800244a <_malloc_r+0x22>
 80024ec:	1b9b      	subs	r3, r3, r6
 80024ee:	50a3      	str	r3, [r4, r2]
 80024f0:	e7ab      	b.n	800244a <_malloc_r+0x22>
 80024f2:	42a3      	cmp	r3, r4
 80024f4:	6862      	ldr	r2, [r4, #4]
 80024f6:	d1dd      	bne.n	80024b4 <_malloc_r+0x8c>
 80024f8:	f8c8 2000 	str.w	r2, [r8]
 80024fc:	e7ec      	b.n	80024d8 <_malloc_r+0xb0>
 80024fe:	4623      	mov	r3, r4
 8002500:	6864      	ldr	r4, [r4, #4]
 8002502:	e7ac      	b.n	800245e <_malloc_r+0x36>
 8002504:	4634      	mov	r4, r6
 8002506:	6876      	ldr	r6, [r6, #4]
 8002508:	e7b4      	b.n	8002474 <_malloc_r+0x4c>
 800250a:	4613      	mov	r3, r2
 800250c:	e7cc      	b.n	80024a8 <_malloc_r+0x80>
 800250e:	230c      	movs	r3, #12
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	4638      	mov	r0, r7
 8002514:	f000 f80e 	bl	8002534 <__malloc_unlock>
 8002518:	e797      	b.n	800244a <_malloc_r+0x22>
 800251a:	6025      	str	r5, [r4, #0]
 800251c:	e7dc      	b.n	80024d8 <_malloc_r+0xb0>
 800251e:	605b      	str	r3, [r3, #4]
 8002520:	deff      	udf	#255	; 0xff
 8002522:	bf00      	nop
 8002524:	2000022c 	.word	0x2000022c

08002528 <__malloc_lock>:
 8002528:	4801      	ldr	r0, [pc, #4]	; (8002530 <__malloc_lock+0x8>)
 800252a:	f7ff bf0e 	b.w	800234a <__retarget_lock_acquire_recursive>
 800252e:	bf00      	nop
 8002530:	20000228 	.word	0x20000228

08002534 <__malloc_unlock>:
 8002534:	4801      	ldr	r0, [pc, #4]	; (800253c <__malloc_unlock+0x8>)
 8002536:	f7ff bf09 	b.w	800234c <__retarget_lock_release_recursive>
 800253a:	bf00      	nop
 800253c:	20000228 	.word	0x20000228

08002540 <__ssputs_r>:
 8002540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002544:	688e      	ldr	r6, [r1, #8]
 8002546:	461f      	mov	r7, r3
 8002548:	42be      	cmp	r6, r7
 800254a:	680b      	ldr	r3, [r1, #0]
 800254c:	4682      	mov	sl, r0
 800254e:	460c      	mov	r4, r1
 8002550:	4690      	mov	r8, r2
 8002552:	d82c      	bhi.n	80025ae <__ssputs_r+0x6e>
 8002554:	898a      	ldrh	r2, [r1, #12]
 8002556:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800255a:	d026      	beq.n	80025aa <__ssputs_r+0x6a>
 800255c:	6965      	ldr	r5, [r4, #20]
 800255e:	6909      	ldr	r1, [r1, #16]
 8002560:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002564:	eba3 0901 	sub.w	r9, r3, r1
 8002568:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800256c:	1c7b      	adds	r3, r7, #1
 800256e:	444b      	add	r3, r9
 8002570:	106d      	asrs	r5, r5, #1
 8002572:	429d      	cmp	r5, r3
 8002574:	bf38      	it	cc
 8002576:	461d      	movcc	r5, r3
 8002578:	0553      	lsls	r3, r2, #21
 800257a:	d527      	bpl.n	80025cc <__ssputs_r+0x8c>
 800257c:	4629      	mov	r1, r5
 800257e:	f7ff ff53 	bl	8002428 <_malloc_r>
 8002582:	4606      	mov	r6, r0
 8002584:	b360      	cbz	r0, 80025e0 <__ssputs_r+0xa0>
 8002586:	6921      	ldr	r1, [r4, #16]
 8002588:	464a      	mov	r2, r9
 800258a:	f000 fd73 	bl	8003074 <memcpy>
 800258e:	89a3      	ldrh	r3, [r4, #12]
 8002590:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002598:	81a3      	strh	r3, [r4, #12]
 800259a:	6126      	str	r6, [r4, #16]
 800259c:	6165      	str	r5, [r4, #20]
 800259e:	444e      	add	r6, r9
 80025a0:	eba5 0509 	sub.w	r5, r5, r9
 80025a4:	6026      	str	r6, [r4, #0]
 80025a6:	60a5      	str	r5, [r4, #8]
 80025a8:	463e      	mov	r6, r7
 80025aa:	42be      	cmp	r6, r7
 80025ac:	d900      	bls.n	80025b0 <__ssputs_r+0x70>
 80025ae:	463e      	mov	r6, r7
 80025b0:	6820      	ldr	r0, [r4, #0]
 80025b2:	4632      	mov	r2, r6
 80025b4:	4641      	mov	r1, r8
 80025b6:	f000 fd33 	bl	8003020 <memmove>
 80025ba:	68a3      	ldr	r3, [r4, #8]
 80025bc:	1b9b      	subs	r3, r3, r6
 80025be:	60a3      	str	r3, [r4, #8]
 80025c0:	6823      	ldr	r3, [r4, #0]
 80025c2:	4433      	add	r3, r6
 80025c4:	6023      	str	r3, [r4, #0]
 80025c6:	2000      	movs	r0, #0
 80025c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025cc:	462a      	mov	r2, r5
 80025ce:	f000 fd5f 	bl	8003090 <_realloc_r>
 80025d2:	4606      	mov	r6, r0
 80025d4:	2800      	cmp	r0, #0
 80025d6:	d1e0      	bne.n	800259a <__ssputs_r+0x5a>
 80025d8:	6921      	ldr	r1, [r4, #16]
 80025da:	4650      	mov	r0, sl
 80025dc:	f7ff feb8 	bl	8002350 <_free_r>
 80025e0:	230c      	movs	r3, #12
 80025e2:	f8ca 3000 	str.w	r3, [sl]
 80025e6:	89a3      	ldrh	r3, [r4, #12]
 80025e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ec:	81a3      	strh	r3, [r4, #12]
 80025ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025f2:	e7e9      	b.n	80025c8 <__ssputs_r+0x88>

080025f4 <_svfiprintf_r>:
 80025f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025f8:	4698      	mov	r8, r3
 80025fa:	898b      	ldrh	r3, [r1, #12]
 80025fc:	061b      	lsls	r3, r3, #24
 80025fe:	b09d      	sub	sp, #116	; 0x74
 8002600:	4607      	mov	r7, r0
 8002602:	460d      	mov	r5, r1
 8002604:	4614      	mov	r4, r2
 8002606:	d50e      	bpl.n	8002626 <_svfiprintf_r+0x32>
 8002608:	690b      	ldr	r3, [r1, #16]
 800260a:	b963      	cbnz	r3, 8002626 <_svfiprintf_r+0x32>
 800260c:	2140      	movs	r1, #64	; 0x40
 800260e:	f7ff ff0b 	bl	8002428 <_malloc_r>
 8002612:	6028      	str	r0, [r5, #0]
 8002614:	6128      	str	r0, [r5, #16]
 8002616:	b920      	cbnz	r0, 8002622 <_svfiprintf_r+0x2e>
 8002618:	230c      	movs	r3, #12
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002620:	e0d0      	b.n	80027c4 <_svfiprintf_r+0x1d0>
 8002622:	2340      	movs	r3, #64	; 0x40
 8002624:	616b      	str	r3, [r5, #20]
 8002626:	2300      	movs	r3, #0
 8002628:	9309      	str	r3, [sp, #36]	; 0x24
 800262a:	2320      	movs	r3, #32
 800262c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002630:	f8cd 800c 	str.w	r8, [sp, #12]
 8002634:	2330      	movs	r3, #48	; 0x30
 8002636:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80027dc <_svfiprintf_r+0x1e8>
 800263a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800263e:	f04f 0901 	mov.w	r9, #1
 8002642:	4623      	mov	r3, r4
 8002644:	469a      	mov	sl, r3
 8002646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800264a:	b10a      	cbz	r2, 8002650 <_svfiprintf_r+0x5c>
 800264c:	2a25      	cmp	r2, #37	; 0x25
 800264e:	d1f9      	bne.n	8002644 <_svfiprintf_r+0x50>
 8002650:	ebba 0b04 	subs.w	fp, sl, r4
 8002654:	d00b      	beq.n	800266e <_svfiprintf_r+0x7a>
 8002656:	465b      	mov	r3, fp
 8002658:	4622      	mov	r2, r4
 800265a:	4629      	mov	r1, r5
 800265c:	4638      	mov	r0, r7
 800265e:	f7ff ff6f 	bl	8002540 <__ssputs_r>
 8002662:	3001      	adds	r0, #1
 8002664:	f000 80a9 	beq.w	80027ba <_svfiprintf_r+0x1c6>
 8002668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800266a:	445a      	add	r2, fp
 800266c:	9209      	str	r2, [sp, #36]	; 0x24
 800266e:	f89a 3000 	ldrb.w	r3, [sl]
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 80a1 	beq.w	80027ba <_svfiprintf_r+0x1c6>
 8002678:	2300      	movs	r3, #0
 800267a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800267e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002682:	f10a 0a01 	add.w	sl, sl, #1
 8002686:	9304      	str	r3, [sp, #16]
 8002688:	9307      	str	r3, [sp, #28]
 800268a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800268e:	931a      	str	r3, [sp, #104]	; 0x68
 8002690:	4654      	mov	r4, sl
 8002692:	2205      	movs	r2, #5
 8002694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002698:	4850      	ldr	r0, [pc, #320]	; (80027dc <_svfiprintf_r+0x1e8>)
 800269a:	f7fd fd99 	bl	80001d0 <memchr>
 800269e:	9a04      	ldr	r2, [sp, #16]
 80026a0:	b9d8      	cbnz	r0, 80026da <_svfiprintf_r+0xe6>
 80026a2:	06d0      	lsls	r0, r2, #27
 80026a4:	bf44      	itt	mi
 80026a6:	2320      	movmi	r3, #32
 80026a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026ac:	0711      	lsls	r1, r2, #28
 80026ae:	bf44      	itt	mi
 80026b0:	232b      	movmi	r3, #43	; 0x2b
 80026b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026b6:	f89a 3000 	ldrb.w	r3, [sl]
 80026ba:	2b2a      	cmp	r3, #42	; 0x2a
 80026bc:	d015      	beq.n	80026ea <_svfiprintf_r+0xf6>
 80026be:	9a07      	ldr	r2, [sp, #28]
 80026c0:	4654      	mov	r4, sl
 80026c2:	2000      	movs	r0, #0
 80026c4:	f04f 0c0a 	mov.w	ip, #10
 80026c8:	4621      	mov	r1, r4
 80026ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026ce:	3b30      	subs	r3, #48	; 0x30
 80026d0:	2b09      	cmp	r3, #9
 80026d2:	d94d      	bls.n	8002770 <_svfiprintf_r+0x17c>
 80026d4:	b1b0      	cbz	r0, 8002704 <_svfiprintf_r+0x110>
 80026d6:	9207      	str	r2, [sp, #28]
 80026d8:	e014      	b.n	8002704 <_svfiprintf_r+0x110>
 80026da:	eba0 0308 	sub.w	r3, r0, r8
 80026de:	fa09 f303 	lsl.w	r3, r9, r3
 80026e2:	4313      	orrs	r3, r2
 80026e4:	9304      	str	r3, [sp, #16]
 80026e6:	46a2      	mov	sl, r4
 80026e8:	e7d2      	b.n	8002690 <_svfiprintf_r+0x9c>
 80026ea:	9b03      	ldr	r3, [sp, #12]
 80026ec:	1d19      	adds	r1, r3, #4
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	9103      	str	r1, [sp, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	bfbb      	ittet	lt
 80026f6:	425b      	neglt	r3, r3
 80026f8:	f042 0202 	orrlt.w	r2, r2, #2
 80026fc:	9307      	strge	r3, [sp, #28]
 80026fe:	9307      	strlt	r3, [sp, #28]
 8002700:	bfb8      	it	lt
 8002702:	9204      	strlt	r2, [sp, #16]
 8002704:	7823      	ldrb	r3, [r4, #0]
 8002706:	2b2e      	cmp	r3, #46	; 0x2e
 8002708:	d10c      	bne.n	8002724 <_svfiprintf_r+0x130>
 800270a:	7863      	ldrb	r3, [r4, #1]
 800270c:	2b2a      	cmp	r3, #42	; 0x2a
 800270e:	d134      	bne.n	800277a <_svfiprintf_r+0x186>
 8002710:	9b03      	ldr	r3, [sp, #12]
 8002712:	1d1a      	adds	r2, r3, #4
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	9203      	str	r2, [sp, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	bfb8      	it	lt
 800271c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002720:	3402      	adds	r4, #2
 8002722:	9305      	str	r3, [sp, #20]
 8002724:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80027ec <_svfiprintf_r+0x1f8>
 8002728:	7821      	ldrb	r1, [r4, #0]
 800272a:	2203      	movs	r2, #3
 800272c:	4650      	mov	r0, sl
 800272e:	f7fd fd4f 	bl	80001d0 <memchr>
 8002732:	b138      	cbz	r0, 8002744 <_svfiprintf_r+0x150>
 8002734:	9b04      	ldr	r3, [sp, #16]
 8002736:	eba0 000a 	sub.w	r0, r0, sl
 800273a:	2240      	movs	r2, #64	; 0x40
 800273c:	4082      	lsls	r2, r0
 800273e:	4313      	orrs	r3, r2
 8002740:	3401      	adds	r4, #1
 8002742:	9304      	str	r3, [sp, #16]
 8002744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002748:	4825      	ldr	r0, [pc, #148]	; (80027e0 <_svfiprintf_r+0x1ec>)
 800274a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800274e:	2206      	movs	r2, #6
 8002750:	f7fd fd3e 	bl	80001d0 <memchr>
 8002754:	2800      	cmp	r0, #0
 8002756:	d038      	beq.n	80027ca <_svfiprintf_r+0x1d6>
 8002758:	4b22      	ldr	r3, [pc, #136]	; (80027e4 <_svfiprintf_r+0x1f0>)
 800275a:	bb1b      	cbnz	r3, 80027a4 <_svfiprintf_r+0x1b0>
 800275c:	9b03      	ldr	r3, [sp, #12]
 800275e:	3307      	adds	r3, #7
 8002760:	f023 0307 	bic.w	r3, r3, #7
 8002764:	3308      	adds	r3, #8
 8002766:	9303      	str	r3, [sp, #12]
 8002768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800276a:	4433      	add	r3, r6
 800276c:	9309      	str	r3, [sp, #36]	; 0x24
 800276e:	e768      	b.n	8002642 <_svfiprintf_r+0x4e>
 8002770:	fb0c 3202 	mla	r2, ip, r2, r3
 8002774:	460c      	mov	r4, r1
 8002776:	2001      	movs	r0, #1
 8002778:	e7a6      	b.n	80026c8 <_svfiprintf_r+0xd4>
 800277a:	2300      	movs	r3, #0
 800277c:	3401      	adds	r4, #1
 800277e:	9305      	str	r3, [sp, #20]
 8002780:	4619      	mov	r1, r3
 8002782:	f04f 0c0a 	mov.w	ip, #10
 8002786:	4620      	mov	r0, r4
 8002788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800278c:	3a30      	subs	r2, #48	; 0x30
 800278e:	2a09      	cmp	r2, #9
 8002790:	d903      	bls.n	800279a <_svfiprintf_r+0x1a6>
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0c6      	beq.n	8002724 <_svfiprintf_r+0x130>
 8002796:	9105      	str	r1, [sp, #20]
 8002798:	e7c4      	b.n	8002724 <_svfiprintf_r+0x130>
 800279a:	fb0c 2101 	mla	r1, ip, r1, r2
 800279e:	4604      	mov	r4, r0
 80027a0:	2301      	movs	r3, #1
 80027a2:	e7f0      	b.n	8002786 <_svfiprintf_r+0x192>
 80027a4:	ab03      	add	r3, sp, #12
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	462a      	mov	r2, r5
 80027aa:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <_svfiprintf_r+0x1f4>)
 80027ac:	a904      	add	r1, sp, #16
 80027ae:	4638      	mov	r0, r7
 80027b0:	f3af 8000 	nop.w
 80027b4:	1c42      	adds	r2, r0, #1
 80027b6:	4606      	mov	r6, r0
 80027b8:	d1d6      	bne.n	8002768 <_svfiprintf_r+0x174>
 80027ba:	89ab      	ldrh	r3, [r5, #12]
 80027bc:	065b      	lsls	r3, r3, #25
 80027be:	f53f af2d 	bmi.w	800261c <_svfiprintf_r+0x28>
 80027c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027c4:	b01d      	add	sp, #116	; 0x74
 80027c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027ca:	ab03      	add	r3, sp, #12
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	462a      	mov	r2, r5
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <_svfiprintf_r+0x1f4>)
 80027d2:	a904      	add	r1, sp, #16
 80027d4:	4638      	mov	r0, r7
 80027d6:	f000 f9bd 	bl	8002b54 <_printf_i>
 80027da:	e7eb      	b.n	80027b4 <_svfiprintf_r+0x1c0>
 80027dc:	0800328c 	.word	0x0800328c
 80027e0:	08003296 	.word	0x08003296
 80027e4:	00000000 	.word	0x00000000
 80027e8:	08002541 	.word	0x08002541
 80027ec:	08003292 	.word	0x08003292

080027f0 <__sfputc_r>:
 80027f0:	6893      	ldr	r3, [r2, #8]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	b410      	push	{r4}
 80027f8:	6093      	str	r3, [r2, #8]
 80027fa:	da08      	bge.n	800280e <__sfputc_r+0x1e>
 80027fc:	6994      	ldr	r4, [r2, #24]
 80027fe:	42a3      	cmp	r3, r4
 8002800:	db01      	blt.n	8002806 <__sfputc_r+0x16>
 8002802:	290a      	cmp	r1, #10
 8002804:	d103      	bne.n	800280e <__sfputc_r+0x1e>
 8002806:	f85d 4b04 	ldr.w	r4, [sp], #4
 800280a:	f000 bb73 	b.w	8002ef4 <__swbuf_r>
 800280e:	6813      	ldr	r3, [r2, #0]
 8002810:	1c58      	adds	r0, r3, #1
 8002812:	6010      	str	r0, [r2, #0]
 8002814:	7019      	strb	r1, [r3, #0]
 8002816:	4608      	mov	r0, r1
 8002818:	f85d 4b04 	ldr.w	r4, [sp], #4
 800281c:	4770      	bx	lr

0800281e <__sfputs_r>:
 800281e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002820:	4606      	mov	r6, r0
 8002822:	460f      	mov	r7, r1
 8002824:	4614      	mov	r4, r2
 8002826:	18d5      	adds	r5, r2, r3
 8002828:	42ac      	cmp	r4, r5
 800282a:	d101      	bne.n	8002830 <__sfputs_r+0x12>
 800282c:	2000      	movs	r0, #0
 800282e:	e007      	b.n	8002840 <__sfputs_r+0x22>
 8002830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002834:	463a      	mov	r2, r7
 8002836:	4630      	mov	r0, r6
 8002838:	f7ff ffda 	bl	80027f0 <__sfputc_r>
 800283c:	1c43      	adds	r3, r0, #1
 800283e:	d1f3      	bne.n	8002828 <__sfputs_r+0xa>
 8002840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002844 <_vfiprintf_r>:
 8002844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002848:	460d      	mov	r5, r1
 800284a:	b09d      	sub	sp, #116	; 0x74
 800284c:	4614      	mov	r4, r2
 800284e:	4698      	mov	r8, r3
 8002850:	4606      	mov	r6, r0
 8002852:	b118      	cbz	r0, 800285c <_vfiprintf_r+0x18>
 8002854:	6a03      	ldr	r3, [r0, #32]
 8002856:	b90b      	cbnz	r3, 800285c <_vfiprintf_r+0x18>
 8002858:	f7ff fc52 	bl	8002100 <__sinit>
 800285c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800285e:	07d9      	lsls	r1, r3, #31
 8002860:	d405      	bmi.n	800286e <_vfiprintf_r+0x2a>
 8002862:	89ab      	ldrh	r3, [r5, #12]
 8002864:	059a      	lsls	r2, r3, #22
 8002866:	d402      	bmi.n	800286e <_vfiprintf_r+0x2a>
 8002868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800286a:	f7ff fd6e 	bl	800234a <__retarget_lock_acquire_recursive>
 800286e:	89ab      	ldrh	r3, [r5, #12]
 8002870:	071b      	lsls	r3, r3, #28
 8002872:	d501      	bpl.n	8002878 <_vfiprintf_r+0x34>
 8002874:	692b      	ldr	r3, [r5, #16]
 8002876:	b99b      	cbnz	r3, 80028a0 <_vfiprintf_r+0x5c>
 8002878:	4629      	mov	r1, r5
 800287a:	4630      	mov	r0, r6
 800287c:	f000 fb78 	bl	8002f70 <__swsetup_r>
 8002880:	b170      	cbz	r0, 80028a0 <_vfiprintf_r+0x5c>
 8002882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002884:	07dc      	lsls	r4, r3, #31
 8002886:	d504      	bpl.n	8002892 <_vfiprintf_r+0x4e>
 8002888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800288c:	b01d      	add	sp, #116	; 0x74
 800288e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002892:	89ab      	ldrh	r3, [r5, #12]
 8002894:	0598      	lsls	r0, r3, #22
 8002896:	d4f7      	bmi.n	8002888 <_vfiprintf_r+0x44>
 8002898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800289a:	f7ff fd57 	bl	800234c <__retarget_lock_release_recursive>
 800289e:	e7f3      	b.n	8002888 <_vfiprintf_r+0x44>
 80028a0:	2300      	movs	r3, #0
 80028a2:	9309      	str	r3, [sp, #36]	; 0x24
 80028a4:	2320      	movs	r3, #32
 80028a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80028ae:	2330      	movs	r3, #48	; 0x30
 80028b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002a64 <_vfiprintf_r+0x220>
 80028b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028b8:	f04f 0901 	mov.w	r9, #1
 80028bc:	4623      	mov	r3, r4
 80028be:	469a      	mov	sl, r3
 80028c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028c4:	b10a      	cbz	r2, 80028ca <_vfiprintf_r+0x86>
 80028c6:	2a25      	cmp	r2, #37	; 0x25
 80028c8:	d1f9      	bne.n	80028be <_vfiprintf_r+0x7a>
 80028ca:	ebba 0b04 	subs.w	fp, sl, r4
 80028ce:	d00b      	beq.n	80028e8 <_vfiprintf_r+0xa4>
 80028d0:	465b      	mov	r3, fp
 80028d2:	4622      	mov	r2, r4
 80028d4:	4629      	mov	r1, r5
 80028d6:	4630      	mov	r0, r6
 80028d8:	f7ff ffa1 	bl	800281e <__sfputs_r>
 80028dc:	3001      	adds	r0, #1
 80028de:	f000 80a9 	beq.w	8002a34 <_vfiprintf_r+0x1f0>
 80028e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028e4:	445a      	add	r2, fp
 80028e6:	9209      	str	r2, [sp, #36]	; 0x24
 80028e8:	f89a 3000 	ldrb.w	r3, [sl]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80a1 	beq.w	8002a34 <_vfiprintf_r+0x1f0>
 80028f2:	2300      	movs	r3, #0
 80028f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028fc:	f10a 0a01 	add.w	sl, sl, #1
 8002900:	9304      	str	r3, [sp, #16]
 8002902:	9307      	str	r3, [sp, #28]
 8002904:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002908:	931a      	str	r3, [sp, #104]	; 0x68
 800290a:	4654      	mov	r4, sl
 800290c:	2205      	movs	r2, #5
 800290e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002912:	4854      	ldr	r0, [pc, #336]	; (8002a64 <_vfiprintf_r+0x220>)
 8002914:	f7fd fc5c 	bl	80001d0 <memchr>
 8002918:	9a04      	ldr	r2, [sp, #16]
 800291a:	b9d8      	cbnz	r0, 8002954 <_vfiprintf_r+0x110>
 800291c:	06d1      	lsls	r1, r2, #27
 800291e:	bf44      	itt	mi
 8002920:	2320      	movmi	r3, #32
 8002922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002926:	0713      	lsls	r3, r2, #28
 8002928:	bf44      	itt	mi
 800292a:	232b      	movmi	r3, #43	; 0x2b
 800292c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002930:	f89a 3000 	ldrb.w	r3, [sl]
 8002934:	2b2a      	cmp	r3, #42	; 0x2a
 8002936:	d015      	beq.n	8002964 <_vfiprintf_r+0x120>
 8002938:	9a07      	ldr	r2, [sp, #28]
 800293a:	4654      	mov	r4, sl
 800293c:	2000      	movs	r0, #0
 800293e:	f04f 0c0a 	mov.w	ip, #10
 8002942:	4621      	mov	r1, r4
 8002944:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002948:	3b30      	subs	r3, #48	; 0x30
 800294a:	2b09      	cmp	r3, #9
 800294c:	d94d      	bls.n	80029ea <_vfiprintf_r+0x1a6>
 800294e:	b1b0      	cbz	r0, 800297e <_vfiprintf_r+0x13a>
 8002950:	9207      	str	r2, [sp, #28]
 8002952:	e014      	b.n	800297e <_vfiprintf_r+0x13a>
 8002954:	eba0 0308 	sub.w	r3, r0, r8
 8002958:	fa09 f303 	lsl.w	r3, r9, r3
 800295c:	4313      	orrs	r3, r2
 800295e:	9304      	str	r3, [sp, #16]
 8002960:	46a2      	mov	sl, r4
 8002962:	e7d2      	b.n	800290a <_vfiprintf_r+0xc6>
 8002964:	9b03      	ldr	r3, [sp, #12]
 8002966:	1d19      	adds	r1, r3, #4
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	9103      	str	r1, [sp, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	bfbb      	ittet	lt
 8002970:	425b      	neglt	r3, r3
 8002972:	f042 0202 	orrlt.w	r2, r2, #2
 8002976:	9307      	strge	r3, [sp, #28]
 8002978:	9307      	strlt	r3, [sp, #28]
 800297a:	bfb8      	it	lt
 800297c:	9204      	strlt	r2, [sp, #16]
 800297e:	7823      	ldrb	r3, [r4, #0]
 8002980:	2b2e      	cmp	r3, #46	; 0x2e
 8002982:	d10c      	bne.n	800299e <_vfiprintf_r+0x15a>
 8002984:	7863      	ldrb	r3, [r4, #1]
 8002986:	2b2a      	cmp	r3, #42	; 0x2a
 8002988:	d134      	bne.n	80029f4 <_vfiprintf_r+0x1b0>
 800298a:	9b03      	ldr	r3, [sp, #12]
 800298c:	1d1a      	adds	r2, r3, #4
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	9203      	str	r2, [sp, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	bfb8      	it	lt
 8002996:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800299a:	3402      	adds	r4, #2
 800299c:	9305      	str	r3, [sp, #20]
 800299e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002a74 <_vfiprintf_r+0x230>
 80029a2:	7821      	ldrb	r1, [r4, #0]
 80029a4:	2203      	movs	r2, #3
 80029a6:	4650      	mov	r0, sl
 80029a8:	f7fd fc12 	bl	80001d0 <memchr>
 80029ac:	b138      	cbz	r0, 80029be <_vfiprintf_r+0x17a>
 80029ae:	9b04      	ldr	r3, [sp, #16]
 80029b0:	eba0 000a 	sub.w	r0, r0, sl
 80029b4:	2240      	movs	r2, #64	; 0x40
 80029b6:	4082      	lsls	r2, r0
 80029b8:	4313      	orrs	r3, r2
 80029ba:	3401      	adds	r4, #1
 80029bc:	9304      	str	r3, [sp, #16]
 80029be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029c2:	4829      	ldr	r0, [pc, #164]	; (8002a68 <_vfiprintf_r+0x224>)
 80029c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029c8:	2206      	movs	r2, #6
 80029ca:	f7fd fc01 	bl	80001d0 <memchr>
 80029ce:	2800      	cmp	r0, #0
 80029d0:	d03f      	beq.n	8002a52 <_vfiprintf_r+0x20e>
 80029d2:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <_vfiprintf_r+0x228>)
 80029d4:	bb1b      	cbnz	r3, 8002a1e <_vfiprintf_r+0x1da>
 80029d6:	9b03      	ldr	r3, [sp, #12]
 80029d8:	3307      	adds	r3, #7
 80029da:	f023 0307 	bic.w	r3, r3, #7
 80029de:	3308      	adds	r3, #8
 80029e0:	9303      	str	r3, [sp, #12]
 80029e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029e4:	443b      	add	r3, r7
 80029e6:	9309      	str	r3, [sp, #36]	; 0x24
 80029e8:	e768      	b.n	80028bc <_vfiprintf_r+0x78>
 80029ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80029ee:	460c      	mov	r4, r1
 80029f0:	2001      	movs	r0, #1
 80029f2:	e7a6      	b.n	8002942 <_vfiprintf_r+0xfe>
 80029f4:	2300      	movs	r3, #0
 80029f6:	3401      	adds	r4, #1
 80029f8:	9305      	str	r3, [sp, #20]
 80029fa:	4619      	mov	r1, r3
 80029fc:	f04f 0c0a 	mov.w	ip, #10
 8002a00:	4620      	mov	r0, r4
 8002a02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a06:	3a30      	subs	r2, #48	; 0x30
 8002a08:	2a09      	cmp	r2, #9
 8002a0a:	d903      	bls.n	8002a14 <_vfiprintf_r+0x1d0>
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0c6      	beq.n	800299e <_vfiprintf_r+0x15a>
 8002a10:	9105      	str	r1, [sp, #20]
 8002a12:	e7c4      	b.n	800299e <_vfiprintf_r+0x15a>
 8002a14:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a18:	4604      	mov	r4, r0
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e7f0      	b.n	8002a00 <_vfiprintf_r+0x1bc>
 8002a1e:	ab03      	add	r3, sp, #12
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	462a      	mov	r2, r5
 8002a24:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <_vfiprintf_r+0x22c>)
 8002a26:	a904      	add	r1, sp, #16
 8002a28:	4630      	mov	r0, r6
 8002a2a:	f3af 8000 	nop.w
 8002a2e:	4607      	mov	r7, r0
 8002a30:	1c78      	adds	r0, r7, #1
 8002a32:	d1d6      	bne.n	80029e2 <_vfiprintf_r+0x19e>
 8002a34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a36:	07d9      	lsls	r1, r3, #31
 8002a38:	d405      	bmi.n	8002a46 <_vfiprintf_r+0x202>
 8002a3a:	89ab      	ldrh	r3, [r5, #12]
 8002a3c:	059a      	lsls	r2, r3, #22
 8002a3e:	d402      	bmi.n	8002a46 <_vfiprintf_r+0x202>
 8002a40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a42:	f7ff fc83 	bl	800234c <__retarget_lock_release_recursive>
 8002a46:	89ab      	ldrh	r3, [r5, #12]
 8002a48:	065b      	lsls	r3, r3, #25
 8002a4a:	f53f af1d 	bmi.w	8002888 <_vfiprintf_r+0x44>
 8002a4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a50:	e71c      	b.n	800288c <_vfiprintf_r+0x48>
 8002a52:	ab03      	add	r3, sp, #12
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	462a      	mov	r2, r5
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <_vfiprintf_r+0x22c>)
 8002a5a:	a904      	add	r1, sp, #16
 8002a5c:	4630      	mov	r0, r6
 8002a5e:	f000 f879 	bl	8002b54 <_printf_i>
 8002a62:	e7e4      	b.n	8002a2e <_vfiprintf_r+0x1ea>
 8002a64:	0800328c 	.word	0x0800328c
 8002a68:	08003296 	.word	0x08003296
 8002a6c:	00000000 	.word	0x00000000
 8002a70:	0800281f 	.word	0x0800281f
 8002a74:	08003292 	.word	0x08003292

08002a78 <_printf_common>:
 8002a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a7c:	4616      	mov	r6, r2
 8002a7e:	4699      	mov	r9, r3
 8002a80:	688a      	ldr	r2, [r1, #8]
 8002a82:	690b      	ldr	r3, [r1, #16]
 8002a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	bfb8      	it	lt
 8002a8c:	4613      	movlt	r3, r2
 8002a8e:	6033      	str	r3, [r6, #0]
 8002a90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a94:	4607      	mov	r7, r0
 8002a96:	460c      	mov	r4, r1
 8002a98:	b10a      	cbz	r2, 8002a9e <_printf_common+0x26>
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	6033      	str	r3, [r6, #0]
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	0699      	lsls	r1, r3, #26
 8002aa2:	bf42      	ittt	mi
 8002aa4:	6833      	ldrmi	r3, [r6, #0]
 8002aa6:	3302      	addmi	r3, #2
 8002aa8:	6033      	strmi	r3, [r6, #0]
 8002aaa:	6825      	ldr	r5, [r4, #0]
 8002aac:	f015 0506 	ands.w	r5, r5, #6
 8002ab0:	d106      	bne.n	8002ac0 <_printf_common+0x48>
 8002ab2:	f104 0a19 	add.w	sl, r4, #25
 8002ab6:	68e3      	ldr	r3, [r4, #12]
 8002ab8:	6832      	ldr	r2, [r6, #0]
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	42ab      	cmp	r3, r5
 8002abe:	dc26      	bgt.n	8002b0e <_printf_common+0x96>
 8002ac0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ac4:	1e13      	subs	r3, r2, #0
 8002ac6:	6822      	ldr	r2, [r4, #0]
 8002ac8:	bf18      	it	ne
 8002aca:	2301      	movne	r3, #1
 8002acc:	0692      	lsls	r2, r2, #26
 8002ace:	d42b      	bmi.n	8002b28 <_printf_common+0xb0>
 8002ad0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ad4:	4649      	mov	r1, r9
 8002ad6:	4638      	mov	r0, r7
 8002ad8:	47c0      	blx	r8
 8002ada:	3001      	adds	r0, #1
 8002adc:	d01e      	beq.n	8002b1c <_printf_common+0xa4>
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	6922      	ldr	r2, [r4, #16]
 8002ae2:	f003 0306 	and.w	r3, r3, #6
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	bf02      	ittt	eq
 8002aea:	68e5      	ldreq	r5, [r4, #12]
 8002aec:	6833      	ldreq	r3, [r6, #0]
 8002aee:	1aed      	subeq	r5, r5, r3
 8002af0:	68a3      	ldr	r3, [r4, #8]
 8002af2:	bf0c      	ite	eq
 8002af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002af8:	2500      	movne	r5, #0
 8002afa:	4293      	cmp	r3, r2
 8002afc:	bfc4      	itt	gt
 8002afe:	1a9b      	subgt	r3, r3, r2
 8002b00:	18ed      	addgt	r5, r5, r3
 8002b02:	2600      	movs	r6, #0
 8002b04:	341a      	adds	r4, #26
 8002b06:	42b5      	cmp	r5, r6
 8002b08:	d11a      	bne.n	8002b40 <_printf_common+0xc8>
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	e008      	b.n	8002b20 <_printf_common+0xa8>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	4652      	mov	r2, sl
 8002b12:	4649      	mov	r1, r9
 8002b14:	4638      	mov	r0, r7
 8002b16:	47c0      	blx	r8
 8002b18:	3001      	adds	r0, #1
 8002b1a:	d103      	bne.n	8002b24 <_printf_common+0xac>
 8002b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b24:	3501      	adds	r5, #1
 8002b26:	e7c6      	b.n	8002ab6 <_printf_common+0x3e>
 8002b28:	18e1      	adds	r1, r4, r3
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	2030      	movs	r0, #48	; 0x30
 8002b2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b32:	4422      	add	r2, r4
 8002b34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	e7c7      	b.n	8002ad0 <_printf_common+0x58>
 8002b40:	2301      	movs	r3, #1
 8002b42:	4622      	mov	r2, r4
 8002b44:	4649      	mov	r1, r9
 8002b46:	4638      	mov	r0, r7
 8002b48:	47c0      	blx	r8
 8002b4a:	3001      	adds	r0, #1
 8002b4c:	d0e6      	beq.n	8002b1c <_printf_common+0xa4>
 8002b4e:	3601      	adds	r6, #1
 8002b50:	e7d9      	b.n	8002b06 <_printf_common+0x8e>
	...

08002b54 <_printf_i>:
 8002b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b58:	7e0f      	ldrb	r7, [r1, #24]
 8002b5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b5c:	2f78      	cmp	r7, #120	; 0x78
 8002b5e:	4691      	mov	r9, r2
 8002b60:	4680      	mov	r8, r0
 8002b62:	460c      	mov	r4, r1
 8002b64:	469a      	mov	sl, r3
 8002b66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b6a:	d807      	bhi.n	8002b7c <_printf_i+0x28>
 8002b6c:	2f62      	cmp	r7, #98	; 0x62
 8002b6e:	d80a      	bhi.n	8002b86 <_printf_i+0x32>
 8002b70:	2f00      	cmp	r7, #0
 8002b72:	f000 80d4 	beq.w	8002d1e <_printf_i+0x1ca>
 8002b76:	2f58      	cmp	r7, #88	; 0x58
 8002b78:	f000 80c0 	beq.w	8002cfc <_printf_i+0x1a8>
 8002b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b84:	e03a      	b.n	8002bfc <_printf_i+0xa8>
 8002b86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b8a:	2b15      	cmp	r3, #21
 8002b8c:	d8f6      	bhi.n	8002b7c <_printf_i+0x28>
 8002b8e:	a101      	add	r1, pc, #4	; (adr r1, 8002b94 <_printf_i+0x40>)
 8002b90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b94:	08002bed 	.word	0x08002bed
 8002b98:	08002c01 	.word	0x08002c01
 8002b9c:	08002b7d 	.word	0x08002b7d
 8002ba0:	08002b7d 	.word	0x08002b7d
 8002ba4:	08002b7d 	.word	0x08002b7d
 8002ba8:	08002b7d 	.word	0x08002b7d
 8002bac:	08002c01 	.word	0x08002c01
 8002bb0:	08002b7d 	.word	0x08002b7d
 8002bb4:	08002b7d 	.word	0x08002b7d
 8002bb8:	08002b7d 	.word	0x08002b7d
 8002bbc:	08002b7d 	.word	0x08002b7d
 8002bc0:	08002d05 	.word	0x08002d05
 8002bc4:	08002c2d 	.word	0x08002c2d
 8002bc8:	08002cbf 	.word	0x08002cbf
 8002bcc:	08002b7d 	.word	0x08002b7d
 8002bd0:	08002b7d 	.word	0x08002b7d
 8002bd4:	08002d27 	.word	0x08002d27
 8002bd8:	08002b7d 	.word	0x08002b7d
 8002bdc:	08002c2d 	.word	0x08002c2d
 8002be0:	08002b7d 	.word	0x08002b7d
 8002be4:	08002b7d 	.word	0x08002b7d
 8002be8:	08002cc7 	.word	0x08002cc7
 8002bec:	682b      	ldr	r3, [r5, #0]
 8002bee:	1d1a      	adds	r2, r3, #4
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	602a      	str	r2, [r5, #0]
 8002bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e09f      	b.n	8002d40 <_printf_i+0x1ec>
 8002c00:	6820      	ldr	r0, [r4, #0]
 8002c02:	682b      	ldr	r3, [r5, #0]
 8002c04:	0607      	lsls	r7, r0, #24
 8002c06:	f103 0104 	add.w	r1, r3, #4
 8002c0a:	6029      	str	r1, [r5, #0]
 8002c0c:	d501      	bpl.n	8002c12 <_printf_i+0xbe>
 8002c0e:	681e      	ldr	r6, [r3, #0]
 8002c10:	e003      	b.n	8002c1a <_printf_i+0xc6>
 8002c12:	0646      	lsls	r6, r0, #25
 8002c14:	d5fb      	bpl.n	8002c0e <_printf_i+0xba>
 8002c16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002c1a:	2e00      	cmp	r6, #0
 8002c1c:	da03      	bge.n	8002c26 <_printf_i+0xd2>
 8002c1e:	232d      	movs	r3, #45	; 0x2d
 8002c20:	4276      	negs	r6, r6
 8002c22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c26:	485a      	ldr	r0, [pc, #360]	; (8002d90 <_printf_i+0x23c>)
 8002c28:	230a      	movs	r3, #10
 8002c2a:	e012      	b.n	8002c52 <_printf_i+0xfe>
 8002c2c:	682b      	ldr	r3, [r5, #0]
 8002c2e:	6820      	ldr	r0, [r4, #0]
 8002c30:	1d19      	adds	r1, r3, #4
 8002c32:	6029      	str	r1, [r5, #0]
 8002c34:	0605      	lsls	r5, r0, #24
 8002c36:	d501      	bpl.n	8002c3c <_printf_i+0xe8>
 8002c38:	681e      	ldr	r6, [r3, #0]
 8002c3a:	e002      	b.n	8002c42 <_printf_i+0xee>
 8002c3c:	0641      	lsls	r1, r0, #25
 8002c3e:	d5fb      	bpl.n	8002c38 <_printf_i+0xe4>
 8002c40:	881e      	ldrh	r6, [r3, #0]
 8002c42:	4853      	ldr	r0, [pc, #332]	; (8002d90 <_printf_i+0x23c>)
 8002c44:	2f6f      	cmp	r7, #111	; 0x6f
 8002c46:	bf0c      	ite	eq
 8002c48:	2308      	moveq	r3, #8
 8002c4a:	230a      	movne	r3, #10
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c52:	6865      	ldr	r5, [r4, #4]
 8002c54:	60a5      	str	r5, [r4, #8]
 8002c56:	2d00      	cmp	r5, #0
 8002c58:	bfa2      	ittt	ge
 8002c5a:	6821      	ldrge	r1, [r4, #0]
 8002c5c:	f021 0104 	bicge.w	r1, r1, #4
 8002c60:	6021      	strge	r1, [r4, #0]
 8002c62:	b90e      	cbnz	r6, 8002c68 <_printf_i+0x114>
 8002c64:	2d00      	cmp	r5, #0
 8002c66:	d04b      	beq.n	8002d00 <_printf_i+0x1ac>
 8002c68:	4615      	mov	r5, r2
 8002c6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c6e:	fb03 6711 	mls	r7, r3, r1, r6
 8002c72:	5dc7      	ldrb	r7, [r0, r7]
 8002c74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c78:	4637      	mov	r7, r6
 8002c7a:	42bb      	cmp	r3, r7
 8002c7c:	460e      	mov	r6, r1
 8002c7e:	d9f4      	bls.n	8002c6a <_printf_i+0x116>
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d10b      	bne.n	8002c9c <_printf_i+0x148>
 8002c84:	6823      	ldr	r3, [r4, #0]
 8002c86:	07de      	lsls	r6, r3, #31
 8002c88:	d508      	bpl.n	8002c9c <_printf_i+0x148>
 8002c8a:	6923      	ldr	r3, [r4, #16]
 8002c8c:	6861      	ldr	r1, [r4, #4]
 8002c8e:	4299      	cmp	r1, r3
 8002c90:	bfde      	ittt	le
 8002c92:	2330      	movle	r3, #48	; 0x30
 8002c94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002c9c:	1b52      	subs	r2, r2, r5
 8002c9e:	6122      	str	r2, [r4, #16]
 8002ca0:	f8cd a000 	str.w	sl, [sp]
 8002ca4:	464b      	mov	r3, r9
 8002ca6:	aa03      	add	r2, sp, #12
 8002ca8:	4621      	mov	r1, r4
 8002caa:	4640      	mov	r0, r8
 8002cac:	f7ff fee4 	bl	8002a78 <_printf_common>
 8002cb0:	3001      	adds	r0, #1
 8002cb2:	d14a      	bne.n	8002d4a <_printf_i+0x1f6>
 8002cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cb8:	b004      	add	sp, #16
 8002cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	f043 0320 	orr.w	r3, r3, #32
 8002cc4:	6023      	str	r3, [r4, #0]
 8002cc6:	4833      	ldr	r0, [pc, #204]	; (8002d94 <_printf_i+0x240>)
 8002cc8:	2778      	movs	r7, #120	; 0x78
 8002cca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	6829      	ldr	r1, [r5, #0]
 8002cd2:	061f      	lsls	r7, r3, #24
 8002cd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8002cd8:	d402      	bmi.n	8002ce0 <_printf_i+0x18c>
 8002cda:	065f      	lsls	r7, r3, #25
 8002cdc:	bf48      	it	mi
 8002cde:	b2b6      	uxthmi	r6, r6
 8002ce0:	07df      	lsls	r7, r3, #31
 8002ce2:	bf48      	it	mi
 8002ce4:	f043 0320 	orrmi.w	r3, r3, #32
 8002ce8:	6029      	str	r1, [r5, #0]
 8002cea:	bf48      	it	mi
 8002cec:	6023      	strmi	r3, [r4, #0]
 8002cee:	b91e      	cbnz	r6, 8002cf8 <_printf_i+0x1a4>
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	f023 0320 	bic.w	r3, r3, #32
 8002cf6:	6023      	str	r3, [r4, #0]
 8002cf8:	2310      	movs	r3, #16
 8002cfa:	e7a7      	b.n	8002c4c <_printf_i+0xf8>
 8002cfc:	4824      	ldr	r0, [pc, #144]	; (8002d90 <_printf_i+0x23c>)
 8002cfe:	e7e4      	b.n	8002cca <_printf_i+0x176>
 8002d00:	4615      	mov	r5, r2
 8002d02:	e7bd      	b.n	8002c80 <_printf_i+0x12c>
 8002d04:	682b      	ldr	r3, [r5, #0]
 8002d06:	6826      	ldr	r6, [r4, #0]
 8002d08:	6961      	ldr	r1, [r4, #20]
 8002d0a:	1d18      	adds	r0, r3, #4
 8002d0c:	6028      	str	r0, [r5, #0]
 8002d0e:	0635      	lsls	r5, r6, #24
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	d501      	bpl.n	8002d18 <_printf_i+0x1c4>
 8002d14:	6019      	str	r1, [r3, #0]
 8002d16:	e002      	b.n	8002d1e <_printf_i+0x1ca>
 8002d18:	0670      	lsls	r0, r6, #25
 8002d1a:	d5fb      	bpl.n	8002d14 <_printf_i+0x1c0>
 8002d1c:	8019      	strh	r1, [r3, #0]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	6123      	str	r3, [r4, #16]
 8002d22:	4615      	mov	r5, r2
 8002d24:	e7bc      	b.n	8002ca0 <_printf_i+0x14c>
 8002d26:	682b      	ldr	r3, [r5, #0]
 8002d28:	1d1a      	adds	r2, r3, #4
 8002d2a:	602a      	str	r2, [r5, #0]
 8002d2c:	681d      	ldr	r5, [r3, #0]
 8002d2e:	6862      	ldr	r2, [r4, #4]
 8002d30:	2100      	movs	r1, #0
 8002d32:	4628      	mov	r0, r5
 8002d34:	f7fd fa4c 	bl	80001d0 <memchr>
 8002d38:	b108      	cbz	r0, 8002d3e <_printf_i+0x1ea>
 8002d3a:	1b40      	subs	r0, r0, r5
 8002d3c:	6060      	str	r0, [r4, #4]
 8002d3e:	6863      	ldr	r3, [r4, #4]
 8002d40:	6123      	str	r3, [r4, #16]
 8002d42:	2300      	movs	r3, #0
 8002d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d48:	e7aa      	b.n	8002ca0 <_printf_i+0x14c>
 8002d4a:	6923      	ldr	r3, [r4, #16]
 8002d4c:	462a      	mov	r2, r5
 8002d4e:	4649      	mov	r1, r9
 8002d50:	4640      	mov	r0, r8
 8002d52:	47d0      	blx	sl
 8002d54:	3001      	adds	r0, #1
 8002d56:	d0ad      	beq.n	8002cb4 <_printf_i+0x160>
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	079b      	lsls	r3, r3, #30
 8002d5c:	d413      	bmi.n	8002d86 <_printf_i+0x232>
 8002d5e:	68e0      	ldr	r0, [r4, #12]
 8002d60:	9b03      	ldr	r3, [sp, #12]
 8002d62:	4298      	cmp	r0, r3
 8002d64:	bfb8      	it	lt
 8002d66:	4618      	movlt	r0, r3
 8002d68:	e7a6      	b.n	8002cb8 <_printf_i+0x164>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	4632      	mov	r2, r6
 8002d6e:	4649      	mov	r1, r9
 8002d70:	4640      	mov	r0, r8
 8002d72:	47d0      	blx	sl
 8002d74:	3001      	adds	r0, #1
 8002d76:	d09d      	beq.n	8002cb4 <_printf_i+0x160>
 8002d78:	3501      	adds	r5, #1
 8002d7a:	68e3      	ldr	r3, [r4, #12]
 8002d7c:	9903      	ldr	r1, [sp, #12]
 8002d7e:	1a5b      	subs	r3, r3, r1
 8002d80:	42ab      	cmp	r3, r5
 8002d82:	dcf2      	bgt.n	8002d6a <_printf_i+0x216>
 8002d84:	e7eb      	b.n	8002d5e <_printf_i+0x20a>
 8002d86:	2500      	movs	r5, #0
 8002d88:	f104 0619 	add.w	r6, r4, #25
 8002d8c:	e7f5      	b.n	8002d7a <_printf_i+0x226>
 8002d8e:	bf00      	nop
 8002d90:	0800329d 	.word	0x0800329d
 8002d94:	080032ae 	.word	0x080032ae

08002d98 <__sflush_r>:
 8002d98:	898a      	ldrh	r2, [r1, #12]
 8002d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d9e:	4605      	mov	r5, r0
 8002da0:	0710      	lsls	r0, r2, #28
 8002da2:	460c      	mov	r4, r1
 8002da4:	d458      	bmi.n	8002e58 <__sflush_r+0xc0>
 8002da6:	684b      	ldr	r3, [r1, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	dc05      	bgt.n	8002db8 <__sflush_r+0x20>
 8002dac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	dc02      	bgt.n	8002db8 <__sflush_r+0x20>
 8002db2:	2000      	movs	r0, #0
 8002db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002db8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002dba:	2e00      	cmp	r6, #0
 8002dbc:	d0f9      	beq.n	8002db2 <__sflush_r+0x1a>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002dc4:	682f      	ldr	r7, [r5, #0]
 8002dc6:	6a21      	ldr	r1, [r4, #32]
 8002dc8:	602b      	str	r3, [r5, #0]
 8002dca:	d032      	beq.n	8002e32 <__sflush_r+0x9a>
 8002dcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002dce:	89a3      	ldrh	r3, [r4, #12]
 8002dd0:	075a      	lsls	r2, r3, #29
 8002dd2:	d505      	bpl.n	8002de0 <__sflush_r+0x48>
 8002dd4:	6863      	ldr	r3, [r4, #4]
 8002dd6:	1ac0      	subs	r0, r0, r3
 8002dd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002dda:	b10b      	cbz	r3, 8002de0 <__sflush_r+0x48>
 8002ddc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002dde:	1ac0      	subs	r0, r0, r3
 8002de0:	2300      	movs	r3, #0
 8002de2:	4602      	mov	r2, r0
 8002de4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002de6:	6a21      	ldr	r1, [r4, #32]
 8002de8:	4628      	mov	r0, r5
 8002dea:	47b0      	blx	r6
 8002dec:	1c43      	adds	r3, r0, #1
 8002dee:	89a3      	ldrh	r3, [r4, #12]
 8002df0:	d106      	bne.n	8002e00 <__sflush_r+0x68>
 8002df2:	6829      	ldr	r1, [r5, #0]
 8002df4:	291d      	cmp	r1, #29
 8002df6:	d82b      	bhi.n	8002e50 <__sflush_r+0xb8>
 8002df8:	4a29      	ldr	r2, [pc, #164]	; (8002ea0 <__sflush_r+0x108>)
 8002dfa:	410a      	asrs	r2, r1
 8002dfc:	07d6      	lsls	r6, r2, #31
 8002dfe:	d427      	bmi.n	8002e50 <__sflush_r+0xb8>
 8002e00:	2200      	movs	r2, #0
 8002e02:	6062      	str	r2, [r4, #4]
 8002e04:	04d9      	lsls	r1, r3, #19
 8002e06:	6922      	ldr	r2, [r4, #16]
 8002e08:	6022      	str	r2, [r4, #0]
 8002e0a:	d504      	bpl.n	8002e16 <__sflush_r+0x7e>
 8002e0c:	1c42      	adds	r2, r0, #1
 8002e0e:	d101      	bne.n	8002e14 <__sflush_r+0x7c>
 8002e10:	682b      	ldr	r3, [r5, #0]
 8002e12:	b903      	cbnz	r3, 8002e16 <__sflush_r+0x7e>
 8002e14:	6560      	str	r0, [r4, #84]	; 0x54
 8002e16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e18:	602f      	str	r7, [r5, #0]
 8002e1a:	2900      	cmp	r1, #0
 8002e1c:	d0c9      	beq.n	8002db2 <__sflush_r+0x1a>
 8002e1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e22:	4299      	cmp	r1, r3
 8002e24:	d002      	beq.n	8002e2c <__sflush_r+0x94>
 8002e26:	4628      	mov	r0, r5
 8002e28:	f7ff fa92 	bl	8002350 <_free_r>
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	6360      	str	r0, [r4, #52]	; 0x34
 8002e30:	e7c0      	b.n	8002db4 <__sflush_r+0x1c>
 8002e32:	2301      	movs	r3, #1
 8002e34:	4628      	mov	r0, r5
 8002e36:	47b0      	blx	r6
 8002e38:	1c41      	adds	r1, r0, #1
 8002e3a:	d1c8      	bne.n	8002dce <__sflush_r+0x36>
 8002e3c:	682b      	ldr	r3, [r5, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0c5      	beq.n	8002dce <__sflush_r+0x36>
 8002e42:	2b1d      	cmp	r3, #29
 8002e44:	d001      	beq.n	8002e4a <__sflush_r+0xb2>
 8002e46:	2b16      	cmp	r3, #22
 8002e48:	d101      	bne.n	8002e4e <__sflush_r+0xb6>
 8002e4a:	602f      	str	r7, [r5, #0]
 8002e4c:	e7b1      	b.n	8002db2 <__sflush_r+0x1a>
 8002e4e:	89a3      	ldrh	r3, [r4, #12]
 8002e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e54:	81a3      	strh	r3, [r4, #12]
 8002e56:	e7ad      	b.n	8002db4 <__sflush_r+0x1c>
 8002e58:	690f      	ldr	r7, [r1, #16]
 8002e5a:	2f00      	cmp	r7, #0
 8002e5c:	d0a9      	beq.n	8002db2 <__sflush_r+0x1a>
 8002e5e:	0793      	lsls	r3, r2, #30
 8002e60:	680e      	ldr	r6, [r1, #0]
 8002e62:	bf08      	it	eq
 8002e64:	694b      	ldreq	r3, [r1, #20]
 8002e66:	600f      	str	r7, [r1, #0]
 8002e68:	bf18      	it	ne
 8002e6a:	2300      	movne	r3, #0
 8002e6c:	eba6 0807 	sub.w	r8, r6, r7
 8002e70:	608b      	str	r3, [r1, #8]
 8002e72:	f1b8 0f00 	cmp.w	r8, #0
 8002e76:	dd9c      	ble.n	8002db2 <__sflush_r+0x1a>
 8002e78:	6a21      	ldr	r1, [r4, #32]
 8002e7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002e7c:	4643      	mov	r3, r8
 8002e7e:	463a      	mov	r2, r7
 8002e80:	4628      	mov	r0, r5
 8002e82:	47b0      	blx	r6
 8002e84:	2800      	cmp	r0, #0
 8002e86:	dc06      	bgt.n	8002e96 <__sflush_r+0xfe>
 8002e88:	89a3      	ldrh	r3, [r4, #12]
 8002e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e8e:	81a3      	strh	r3, [r4, #12]
 8002e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e94:	e78e      	b.n	8002db4 <__sflush_r+0x1c>
 8002e96:	4407      	add	r7, r0
 8002e98:	eba8 0800 	sub.w	r8, r8, r0
 8002e9c:	e7e9      	b.n	8002e72 <__sflush_r+0xda>
 8002e9e:	bf00      	nop
 8002ea0:	dfbffffe 	.word	0xdfbffffe

08002ea4 <_fflush_r>:
 8002ea4:	b538      	push	{r3, r4, r5, lr}
 8002ea6:	690b      	ldr	r3, [r1, #16]
 8002ea8:	4605      	mov	r5, r0
 8002eaa:	460c      	mov	r4, r1
 8002eac:	b913      	cbnz	r3, 8002eb4 <_fflush_r+0x10>
 8002eae:	2500      	movs	r5, #0
 8002eb0:	4628      	mov	r0, r5
 8002eb2:	bd38      	pop	{r3, r4, r5, pc}
 8002eb4:	b118      	cbz	r0, 8002ebe <_fflush_r+0x1a>
 8002eb6:	6a03      	ldr	r3, [r0, #32]
 8002eb8:	b90b      	cbnz	r3, 8002ebe <_fflush_r+0x1a>
 8002eba:	f7ff f921 	bl	8002100 <__sinit>
 8002ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f3      	beq.n	8002eae <_fflush_r+0xa>
 8002ec6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ec8:	07d0      	lsls	r0, r2, #31
 8002eca:	d404      	bmi.n	8002ed6 <_fflush_r+0x32>
 8002ecc:	0599      	lsls	r1, r3, #22
 8002ece:	d402      	bmi.n	8002ed6 <_fflush_r+0x32>
 8002ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ed2:	f7ff fa3a 	bl	800234a <__retarget_lock_acquire_recursive>
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	4621      	mov	r1, r4
 8002eda:	f7ff ff5d 	bl	8002d98 <__sflush_r>
 8002ede:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ee0:	07da      	lsls	r2, r3, #31
 8002ee2:	4605      	mov	r5, r0
 8002ee4:	d4e4      	bmi.n	8002eb0 <_fflush_r+0xc>
 8002ee6:	89a3      	ldrh	r3, [r4, #12]
 8002ee8:	059b      	lsls	r3, r3, #22
 8002eea:	d4e1      	bmi.n	8002eb0 <_fflush_r+0xc>
 8002eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002eee:	f7ff fa2d 	bl	800234c <__retarget_lock_release_recursive>
 8002ef2:	e7dd      	b.n	8002eb0 <_fflush_r+0xc>

08002ef4 <__swbuf_r>:
 8002ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef6:	460e      	mov	r6, r1
 8002ef8:	4614      	mov	r4, r2
 8002efa:	4605      	mov	r5, r0
 8002efc:	b118      	cbz	r0, 8002f06 <__swbuf_r+0x12>
 8002efe:	6a03      	ldr	r3, [r0, #32]
 8002f00:	b90b      	cbnz	r3, 8002f06 <__swbuf_r+0x12>
 8002f02:	f7ff f8fd 	bl	8002100 <__sinit>
 8002f06:	69a3      	ldr	r3, [r4, #24]
 8002f08:	60a3      	str	r3, [r4, #8]
 8002f0a:	89a3      	ldrh	r3, [r4, #12]
 8002f0c:	071a      	lsls	r2, r3, #28
 8002f0e:	d525      	bpl.n	8002f5c <__swbuf_r+0x68>
 8002f10:	6923      	ldr	r3, [r4, #16]
 8002f12:	b31b      	cbz	r3, 8002f5c <__swbuf_r+0x68>
 8002f14:	6823      	ldr	r3, [r4, #0]
 8002f16:	6922      	ldr	r2, [r4, #16]
 8002f18:	1a98      	subs	r0, r3, r2
 8002f1a:	6963      	ldr	r3, [r4, #20]
 8002f1c:	b2f6      	uxtb	r6, r6
 8002f1e:	4283      	cmp	r3, r0
 8002f20:	4637      	mov	r7, r6
 8002f22:	dc04      	bgt.n	8002f2e <__swbuf_r+0x3a>
 8002f24:	4621      	mov	r1, r4
 8002f26:	4628      	mov	r0, r5
 8002f28:	f7ff ffbc 	bl	8002ea4 <_fflush_r>
 8002f2c:	b9e0      	cbnz	r0, 8002f68 <__swbuf_r+0x74>
 8002f2e:	68a3      	ldr	r3, [r4, #8]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	60a3      	str	r3, [r4, #8]
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	6022      	str	r2, [r4, #0]
 8002f3a:	701e      	strb	r6, [r3, #0]
 8002f3c:	6962      	ldr	r2, [r4, #20]
 8002f3e:	1c43      	adds	r3, r0, #1
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d004      	beq.n	8002f4e <__swbuf_r+0x5a>
 8002f44:	89a3      	ldrh	r3, [r4, #12]
 8002f46:	07db      	lsls	r3, r3, #31
 8002f48:	d506      	bpl.n	8002f58 <__swbuf_r+0x64>
 8002f4a:	2e0a      	cmp	r6, #10
 8002f4c:	d104      	bne.n	8002f58 <__swbuf_r+0x64>
 8002f4e:	4621      	mov	r1, r4
 8002f50:	4628      	mov	r0, r5
 8002f52:	f7ff ffa7 	bl	8002ea4 <_fflush_r>
 8002f56:	b938      	cbnz	r0, 8002f68 <__swbuf_r+0x74>
 8002f58:	4638      	mov	r0, r7
 8002f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	4628      	mov	r0, r5
 8002f60:	f000 f806 	bl	8002f70 <__swsetup_r>
 8002f64:	2800      	cmp	r0, #0
 8002f66:	d0d5      	beq.n	8002f14 <__swbuf_r+0x20>
 8002f68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002f6c:	e7f4      	b.n	8002f58 <__swbuf_r+0x64>
	...

08002f70 <__swsetup_r>:
 8002f70:	b538      	push	{r3, r4, r5, lr}
 8002f72:	4b2a      	ldr	r3, [pc, #168]	; (800301c <__swsetup_r+0xac>)
 8002f74:	4605      	mov	r5, r0
 8002f76:	6818      	ldr	r0, [r3, #0]
 8002f78:	460c      	mov	r4, r1
 8002f7a:	b118      	cbz	r0, 8002f84 <__swsetup_r+0x14>
 8002f7c:	6a03      	ldr	r3, [r0, #32]
 8002f7e:	b90b      	cbnz	r3, 8002f84 <__swsetup_r+0x14>
 8002f80:	f7ff f8be 	bl	8002100 <__sinit>
 8002f84:	89a3      	ldrh	r3, [r4, #12]
 8002f86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f8a:	0718      	lsls	r0, r3, #28
 8002f8c:	d422      	bmi.n	8002fd4 <__swsetup_r+0x64>
 8002f8e:	06d9      	lsls	r1, r3, #27
 8002f90:	d407      	bmi.n	8002fa2 <__swsetup_r+0x32>
 8002f92:	2309      	movs	r3, #9
 8002f94:	602b      	str	r3, [r5, #0]
 8002f96:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f9a:	81a3      	strh	r3, [r4, #12]
 8002f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fa0:	e034      	b.n	800300c <__swsetup_r+0x9c>
 8002fa2:	0758      	lsls	r0, r3, #29
 8002fa4:	d512      	bpl.n	8002fcc <__swsetup_r+0x5c>
 8002fa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fa8:	b141      	cbz	r1, 8002fbc <__swsetup_r+0x4c>
 8002faa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fae:	4299      	cmp	r1, r3
 8002fb0:	d002      	beq.n	8002fb8 <__swsetup_r+0x48>
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	f7ff f9cc 	bl	8002350 <_free_r>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	6363      	str	r3, [r4, #52]	; 0x34
 8002fbc:	89a3      	ldrh	r3, [r4, #12]
 8002fbe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fc2:	81a3      	strh	r3, [r4, #12]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	6063      	str	r3, [r4, #4]
 8002fc8:	6923      	ldr	r3, [r4, #16]
 8002fca:	6023      	str	r3, [r4, #0]
 8002fcc:	89a3      	ldrh	r3, [r4, #12]
 8002fce:	f043 0308 	orr.w	r3, r3, #8
 8002fd2:	81a3      	strh	r3, [r4, #12]
 8002fd4:	6923      	ldr	r3, [r4, #16]
 8002fd6:	b94b      	cbnz	r3, 8002fec <__swsetup_r+0x7c>
 8002fd8:	89a3      	ldrh	r3, [r4, #12]
 8002fda:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe2:	d003      	beq.n	8002fec <__swsetup_r+0x7c>
 8002fe4:	4621      	mov	r1, r4
 8002fe6:	4628      	mov	r0, r5
 8002fe8:	f000 f8a7 	bl	800313a <__smakebuf_r>
 8002fec:	89a0      	ldrh	r0, [r4, #12]
 8002fee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ff2:	f010 0301 	ands.w	r3, r0, #1
 8002ff6:	d00a      	beq.n	800300e <__swsetup_r+0x9e>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60a3      	str	r3, [r4, #8]
 8002ffc:	6963      	ldr	r3, [r4, #20]
 8002ffe:	425b      	negs	r3, r3
 8003000:	61a3      	str	r3, [r4, #24]
 8003002:	6923      	ldr	r3, [r4, #16]
 8003004:	b943      	cbnz	r3, 8003018 <__swsetup_r+0xa8>
 8003006:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800300a:	d1c4      	bne.n	8002f96 <__swsetup_r+0x26>
 800300c:	bd38      	pop	{r3, r4, r5, pc}
 800300e:	0781      	lsls	r1, r0, #30
 8003010:	bf58      	it	pl
 8003012:	6963      	ldrpl	r3, [r4, #20]
 8003014:	60a3      	str	r3, [r4, #8]
 8003016:	e7f4      	b.n	8003002 <__swsetup_r+0x92>
 8003018:	2000      	movs	r0, #0
 800301a:	e7f7      	b.n	800300c <__swsetup_r+0x9c>
 800301c:	20000064 	.word	0x20000064

08003020 <memmove>:
 8003020:	4288      	cmp	r0, r1
 8003022:	b510      	push	{r4, lr}
 8003024:	eb01 0402 	add.w	r4, r1, r2
 8003028:	d902      	bls.n	8003030 <memmove+0x10>
 800302a:	4284      	cmp	r4, r0
 800302c:	4623      	mov	r3, r4
 800302e:	d807      	bhi.n	8003040 <memmove+0x20>
 8003030:	1e43      	subs	r3, r0, #1
 8003032:	42a1      	cmp	r1, r4
 8003034:	d008      	beq.n	8003048 <memmove+0x28>
 8003036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800303a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800303e:	e7f8      	b.n	8003032 <memmove+0x12>
 8003040:	4402      	add	r2, r0
 8003042:	4601      	mov	r1, r0
 8003044:	428a      	cmp	r2, r1
 8003046:	d100      	bne.n	800304a <memmove+0x2a>
 8003048:	bd10      	pop	{r4, pc}
 800304a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800304e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003052:	e7f7      	b.n	8003044 <memmove+0x24>

08003054 <_sbrk_r>:
 8003054:	b538      	push	{r3, r4, r5, lr}
 8003056:	4d06      	ldr	r5, [pc, #24]	; (8003070 <_sbrk_r+0x1c>)
 8003058:	2300      	movs	r3, #0
 800305a:	4604      	mov	r4, r0
 800305c:	4608      	mov	r0, r1
 800305e:	602b      	str	r3, [r5, #0]
 8003060:	f7fd fcbc 	bl	80009dc <_sbrk>
 8003064:	1c43      	adds	r3, r0, #1
 8003066:	d102      	bne.n	800306e <_sbrk_r+0x1a>
 8003068:	682b      	ldr	r3, [r5, #0]
 800306a:	b103      	cbz	r3, 800306e <_sbrk_r+0x1a>
 800306c:	6023      	str	r3, [r4, #0]
 800306e:	bd38      	pop	{r3, r4, r5, pc}
 8003070:	20000224 	.word	0x20000224

08003074 <memcpy>:
 8003074:	440a      	add	r2, r1
 8003076:	4291      	cmp	r1, r2
 8003078:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800307c:	d100      	bne.n	8003080 <memcpy+0xc>
 800307e:	4770      	bx	lr
 8003080:	b510      	push	{r4, lr}
 8003082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800308a:	4291      	cmp	r1, r2
 800308c:	d1f9      	bne.n	8003082 <memcpy+0xe>
 800308e:	bd10      	pop	{r4, pc}

08003090 <_realloc_r>:
 8003090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003094:	4680      	mov	r8, r0
 8003096:	4614      	mov	r4, r2
 8003098:	460e      	mov	r6, r1
 800309a:	b921      	cbnz	r1, 80030a6 <_realloc_r+0x16>
 800309c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030a0:	4611      	mov	r1, r2
 80030a2:	f7ff b9c1 	b.w	8002428 <_malloc_r>
 80030a6:	b92a      	cbnz	r2, 80030b4 <_realloc_r+0x24>
 80030a8:	f7ff f952 	bl	8002350 <_free_r>
 80030ac:	4625      	mov	r5, r4
 80030ae:	4628      	mov	r0, r5
 80030b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030b4:	f000 f8a0 	bl	80031f8 <_malloc_usable_size_r>
 80030b8:	4284      	cmp	r4, r0
 80030ba:	4607      	mov	r7, r0
 80030bc:	d802      	bhi.n	80030c4 <_realloc_r+0x34>
 80030be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80030c2:	d812      	bhi.n	80030ea <_realloc_r+0x5a>
 80030c4:	4621      	mov	r1, r4
 80030c6:	4640      	mov	r0, r8
 80030c8:	f7ff f9ae 	bl	8002428 <_malloc_r>
 80030cc:	4605      	mov	r5, r0
 80030ce:	2800      	cmp	r0, #0
 80030d0:	d0ed      	beq.n	80030ae <_realloc_r+0x1e>
 80030d2:	42bc      	cmp	r4, r7
 80030d4:	4622      	mov	r2, r4
 80030d6:	4631      	mov	r1, r6
 80030d8:	bf28      	it	cs
 80030da:	463a      	movcs	r2, r7
 80030dc:	f7ff ffca 	bl	8003074 <memcpy>
 80030e0:	4631      	mov	r1, r6
 80030e2:	4640      	mov	r0, r8
 80030e4:	f7ff f934 	bl	8002350 <_free_r>
 80030e8:	e7e1      	b.n	80030ae <_realloc_r+0x1e>
 80030ea:	4635      	mov	r5, r6
 80030ec:	e7df      	b.n	80030ae <_realloc_r+0x1e>

080030ee <__swhatbuf_r>:
 80030ee:	b570      	push	{r4, r5, r6, lr}
 80030f0:	460c      	mov	r4, r1
 80030f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030f6:	2900      	cmp	r1, #0
 80030f8:	b096      	sub	sp, #88	; 0x58
 80030fa:	4615      	mov	r5, r2
 80030fc:	461e      	mov	r6, r3
 80030fe:	da0d      	bge.n	800311c <__swhatbuf_r+0x2e>
 8003100:	89a3      	ldrh	r3, [r4, #12]
 8003102:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003106:	f04f 0100 	mov.w	r1, #0
 800310a:	bf0c      	ite	eq
 800310c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003110:	2340      	movne	r3, #64	; 0x40
 8003112:	2000      	movs	r0, #0
 8003114:	6031      	str	r1, [r6, #0]
 8003116:	602b      	str	r3, [r5, #0]
 8003118:	b016      	add	sp, #88	; 0x58
 800311a:	bd70      	pop	{r4, r5, r6, pc}
 800311c:	466a      	mov	r2, sp
 800311e:	f000 f849 	bl	80031b4 <_fstat_r>
 8003122:	2800      	cmp	r0, #0
 8003124:	dbec      	blt.n	8003100 <__swhatbuf_r+0x12>
 8003126:	9901      	ldr	r1, [sp, #4]
 8003128:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800312c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003130:	4259      	negs	r1, r3
 8003132:	4159      	adcs	r1, r3
 8003134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003138:	e7eb      	b.n	8003112 <__swhatbuf_r+0x24>

0800313a <__smakebuf_r>:
 800313a:	898b      	ldrh	r3, [r1, #12]
 800313c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800313e:	079d      	lsls	r5, r3, #30
 8003140:	4606      	mov	r6, r0
 8003142:	460c      	mov	r4, r1
 8003144:	d507      	bpl.n	8003156 <__smakebuf_r+0x1c>
 8003146:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800314a:	6023      	str	r3, [r4, #0]
 800314c:	6123      	str	r3, [r4, #16]
 800314e:	2301      	movs	r3, #1
 8003150:	6163      	str	r3, [r4, #20]
 8003152:	b002      	add	sp, #8
 8003154:	bd70      	pop	{r4, r5, r6, pc}
 8003156:	ab01      	add	r3, sp, #4
 8003158:	466a      	mov	r2, sp
 800315a:	f7ff ffc8 	bl	80030ee <__swhatbuf_r>
 800315e:	9900      	ldr	r1, [sp, #0]
 8003160:	4605      	mov	r5, r0
 8003162:	4630      	mov	r0, r6
 8003164:	f7ff f960 	bl	8002428 <_malloc_r>
 8003168:	b948      	cbnz	r0, 800317e <__smakebuf_r+0x44>
 800316a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800316e:	059a      	lsls	r2, r3, #22
 8003170:	d4ef      	bmi.n	8003152 <__smakebuf_r+0x18>
 8003172:	f023 0303 	bic.w	r3, r3, #3
 8003176:	f043 0302 	orr.w	r3, r3, #2
 800317a:	81a3      	strh	r3, [r4, #12]
 800317c:	e7e3      	b.n	8003146 <__smakebuf_r+0xc>
 800317e:	89a3      	ldrh	r3, [r4, #12]
 8003180:	6020      	str	r0, [r4, #0]
 8003182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003186:	81a3      	strh	r3, [r4, #12]
 8003188:	9b00      	ldr	r3, [sp, #0]
 800318a:	6163      	str	r3, [r4, #20]
 800318c:	9b01      	ldr	r3, [sp, #4]
 800318e:	6120      	str	r0, [r4, #16]
 8003190:	b15b      	cbz	r3, 80031aa <__smakebuf_r+0x70>
 8003192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003196:	4630      	mov	r0, r6
 8003198:	f000 f81e 	bl	80031d8 <_isatty_r>
 800319c:	b128      	cbz	r0, 80031aa <__smakebuf_r+0x70>
 800319e:	89a3      	ldrh	r3, [r4, #12]
 80031a0:	f023 0303 	bic.w	r3, r3, #3
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	81a3      	strh	r3, [r4, #12]
 80031aa:	89a3      	ldrh	r3, [r4, #12]
 80031ac:	431d      	orrs	r5, r3
 80031ae:	81a5      	strh	r5, [r4, #12]
 80031b0:	e7cf      	b.n	8003152 <__smakebuf_r+0x18>
	...

080031b4 <_fstat_r>:
 80031b4:	b538      	push	{r3, r4, r5, lr}
 80031b6:	4d07      	ldr	r5, [pc, #28]	; (80031d4 <_fstat_r+0x20>)
 80031b8:	2300      	movs	r3, #0
 80031ba:	4604      	mov	r4, r0
 80031bc:	4608      	mov	r0, r1
 80031be:	4611      	mov	r1, r2
 80031c0:	602b      	str	r3, [r5, #0]
 80031c2:	f7fd fbe2 	bl	800098a <_fstat>
 80031c6:	1c43      	adds	r3, r0, #1
 80031c8:	d102      	bne.n	80031d0 <_fstat_r+0x1c>
 80031ca:	682b      	ldr	r3, [r5, #0]
 80031cc:	b103      	cbz	r3, 80031d0 <_fstat_r+0x1c>
 80031ce:	6023      	str	r3, [r4, #0]
 80031d0:	bd38      	pop	{r3, r4, r5, pc}
 80031d2:	bf00      	nop
 80031d4:	20000224 	.word	0x20000224

080031d8 <_isatty_r>:
 80031d8:	b538      	push	{r3, r4, r5, lr}
 80031da:	4d06      	ldr	r5, [pc, #24]	; (80031f4 <_isatty_r+0x1c>)
 80031dc:	2300      	movs	r3, #0
 80031de:	4604      	mov	r4, r0
 80031e0:	4608      	mov	r0, r1
 80031e2:	602b      	str	r3, [r5, #0]
 80031e4:	f7fd fbe1 	bl	80009aa <_isatty>
 80031e8:	1c43      	adds	r3, r0, #1
 80031ea:	d102      	bne.n	80031f2 <_isatty_r+0x1a>
 80031ec:	682b      	ldr	r3, [r5, #0]
 80031ee:	b103      	cbz	r3, 80031f2 <_isatty_r+0x1a>
 80031f0:	6023      	str	r3, [r4, #0]
 80031f2:	bd38      	pop	{r3, r4, r5, pc}
 80031f4:	20000224 	.word	0x20000224

080031f8 <_malloc_usable_size_r>:
 80031f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031fc:	1f18      	subs	r0, r3, #4
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bfbc      	itt	lt
 8003202:	580b      	ldrlt	r3, [r1, r0]
 8003204:	18c0      	addlt	r0, r0, r3
 8003206:	4770      	bx	lr

08003208 <_init>:
 8003208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320a:	bf00      	nop
 800320c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320e:	bc08      	pop	{r3}
 8003210:	469e      	mov	lr, r3
 8003212:	4770      	bx	lr

08003214 <_fini>:
 8003214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003216:	bf00      	nop
 8003218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321a:	bc08      	pop	{r3}
 800321c:	469e      	mov	lr, r3
 800321e:	4770      	bx	lr
