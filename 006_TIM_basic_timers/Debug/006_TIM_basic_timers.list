
006_TIM_basic_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c58  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009de0  08009de0  00019de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e20  08009e20  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009e20  08009e20  00019e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e28  08009e28  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e28  08009e28  00019e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e2c  08009e2c  00019e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00000af8  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b80  20000b80  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001cb27  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004255  00000000  00000000  0003cc22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001968  00000000  00000000  00040e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013c4  00000000  00000000  000427e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025f60  00000000  00000000  00043ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fc5c  00000000  00000000  00069b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8145  00000000  00000000  00089760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007300  00000000  00000000  001618a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  00168ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009dc8 	.word	0x08009dc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	08009dc8 	.word	0x08009dc8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
  */

#include <stdio.h>

int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fda6 	bl	8001018 <HAL_Init>

  printf("the application is started well!\n");
 80004cc:	480b      	ldr	r0, [pc, #44]	; (80004fc <main+0x38>)
 80004ce:	f009 f991 	bl	80097f4 <puts>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f815 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f9a7 	bl	8000828 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004da:	f000 f87b 	bl	80005d4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004de:	f000 f8a7 	bl	8000630 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e2:	f000 f8d5 	bl	8000690 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e6:	f008 fca9 	bl	8008e3c <MX_USB_HOST_Init>
  MX_TIM6_Init();
 80004ea:	f000 f907 	bl	80006fc <MX_TIM6_Init>
  MX_TIM7_Init();
 80004ee:	f000 f93b 	bl	8000768 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 80004f2:	f000 f96f 	bl	80007d4 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f6:	f008 fcc7 	bl	8008e88 <MX_USB_HOST_Process>
 80004fa:	e7fc      	b.n	80004f6 <main+0x32>
 80004fc:	08009de0 	.word	0x08009de0

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f009 fa50 	bl	80099b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b28      	ldr	r3, [pc, #160]	; (80005cc <SystemClock_Config+0xcc>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a27      	ldr	r2, [pc, #156]	; (80005cc <SystemClock_Config+0xcc>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b25      	ldr	r3, [pc, #148]	; (80005cc <SystemClock_Config+0xcc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <SystemClock_Config+0xd0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a21      	ldr	r2, [pc, #132]	; (80005d0 <SystemClock_Config+0xd0>)
 800054a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <SystemClock_Config+0xd0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055c:	2301      	movs	r3, #1
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000570:	2308      	movs	r3, #8
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000574:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057e:	2307      	movs	r3, #7
 8000580:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	4618      	mov	r0, r3
 8000588:	f003 ffbc 	bl	8004504 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000592:	f000 fa47 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2302      	movs	r3, #2
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2105      	movs	r1, #5
 80005b4:	4618      	mov	r0, r3
 80005b6:	f004 fa1d 	bl	80049f4 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c0:	f000 fa30 	bl	8000a24 <Error_Handler>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3750      	adds	r7, #80	; 0x50
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40007000 	.word	0x40007000

080005d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_I2C1_Init+0x50>)
 80005da:	4a13      	ldr	r2, [pc, #76]	; (8000628 <MX_I2C1_Init+0x54>)
 80005dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_I2C1_Init+0x50>)
 80005e0:	4a12      	ldr	r2, [pc, #72]	; (800062c <MX_I2C1_Init+0x58>)
 80005e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_I2C1_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_I2C1_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_I2C1_Init+0x50>)
 80005f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <MX_I2C1_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_I2C1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <MX_I2C1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_I2C1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_I2C1_Init+0x50>)
 8000612:	f003 f993 	bl	800393c <HAL_I2C_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800061c:	f000 fa02 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000a4 	.word	0x200000a4
 8000628:	40005400 	.word	0x40005400
 800062c:	000186a0 	.word	0x000186a0

08000630 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_I2S3_Init+0x54>)
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <MX_I2S3_Init+0x58>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_I2S3_Init+0x54>)
 800063c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000640:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_I2S3_Init+0x54>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_I2S3_Init+0x54>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MX_I2S3_Init+0x54>)
 8000650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000654:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_I2S3_Init+0x54>)
 8000658:	4a0c      	ldr	r2, [pc, #48]	; (800068c <MX_I2S3_Init+0x5c>)
 800065a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_I2S3_Init+0x54>)
 800065e:	2200      	movs	r2, #0
 8000660:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_I2S3_Init+0x54>)
 8000664:	2200      	movs	r2, #0
 8000666:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_I2S3_Init+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_I2S3_Init+0x54>)
 8000670:	f003 faa8 	bl	8003bc4 <HAL_I2S_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800067a:	f000 f9d3 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200000f8 	.word	0x200000f8
 8000688:	40003c00 	.word	0x40003c00
 800068c:	00017700 	.word	0x00017700

08000690 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_SPI1_Init+0x64>)
 8000696:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <MX_SPI1_Init+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_SPI1_Init+0x64>)
 800069c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006dc:	220a      	movs	r2, #10
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006e2:	f004 fce9 	bl	80050b8 <HAL_SPI_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006ec:	f000 f99a 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000140 	.word	0x20000140
 80006f8:	40013000 	.word	0x40013000

080006fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_TIM6_Init+0x64>)
 800070c:	4a15      	ldr	r2, [pc, #84]	; (8000764 <MX_TIM6_Init+0x68>)
 800070e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_TIM6_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_TIM6_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800071c:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_TIM6_Init+0x64>)
 800071e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000722:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_TIM6_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800072a:	480d      	ldr	r0, [pc, #52]	; (8000760 <MX_TIM6_Init+0x64>)
 800072c:	f004 fd4d 	bl	80051ca <HAL_TIM_Base_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000736:	f000 f975 	bl	8000a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000742:	463b      	mov	r3, r7
 8000744:	4619      	mov	r1, r3
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <MX_TIM6_Init+0x64>)
 8000748:	f004 fe3a 	bl	80053c0 <HAL_TIMEx_MasterConfigSynchronization>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000752:	f000 f967 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000198 	.word	0x20000198
 8000764:	40001000 	.word	0x40001000

08000768 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_TIM7_Init+0x64>)
 8000778:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <MX_TIM7_Init+0x68>)
 800077a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800077c:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_TIM7_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_TIM7_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000788:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_TIM7_Init+0x64>)
 800078a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800078e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_TIM7_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000796:	480d      	ldr	r0, [pc, #52]	; (80007cc <MX_TIM7_Init+0x64>)
 8000798:	f004 fd17 	bl	80051ca <HAL_TIM_Base_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80007a2:	f000 f93f 	bl	8000a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80007ae:	463b      	mov	r3, r7
 80007b0:	4619      	mov	r1, r3
 80007b2:	4806      	ldr	r0, [pc, #24]	; (80007cc <MX_TIM7_Init+0x64>)
 80007b4:	f004 fe04 	bl	80053c0 <HAL_TIMEx_MasterConfigSynchronization>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80007be:	f000 f931 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200001e0 	.word	0x200001e0
 80007d0:	40001400 	.word	0x40001400

080007d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <MX_USART2_UART_Init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_USART2_UART_Init+0x4c>)
 800080c:	f004 fe54 	bl	80054b8 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000816:	f000 f905 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000228 	.word	0x20000228
 8000824:	40004400 	.word	0x40004400

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08c      	sub	sp, #48	; 0x30
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
 8000842:	4b72      	ldr	r3, [pc, #456]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a71      	ldr	r2, [pc, #452]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 8000848:	f043 0310 	orr.w	r3, r3, #16
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b6f      	ldr	r3, [pc, #444]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0310 	and.w	r3, r3, #16
 8000856:	61bb      	str	r3, [r7, #24]
 8000858:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	4b6b      	ldr	r3, [pc, #428]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a6a      	ldr	r2, [pc, #424]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b68      	ldr	r3, [pc, #416]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b64      	ldr	r3, [pc, #400]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a63      	ldr	r2, [pc, #396]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b61      	ldr	r3, [pc, #388]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b5d      	ldr	r3, [pc, #372]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a5c      	ldr	r2, [pc, #368]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b5a      	ldr	r3, [pc, #360]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b56      	ldr	r3, [pc, #344]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a55      	ldr	r2, [pc, #340]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b53      	ldr	r3, [pc, #332]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b4f      	ldr	r3, [pc, #316]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a4e      	ldr	r2, [pc, #312]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b4c      	ldr	r3, [pc, #304]	; (8000a0c <MX_GPIO_Init+0x1e4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2108      	movs	r1, #8
 80008ea:	4849      	ldr	r0, [pc, #292]	; (8000a10 <MX_GPIO_Init+0x1e8>)
 80008ec:	f000 fed8 	bl	80016a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2101      	movs	r1, #1
 80008f4:	4847      	ldr	r0, [pc, #284]	; (8000a14 <MX_GPIO_Init+0x1ec>)
 80008f6:	f000 fed3 	bl	80016a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008fa:	2200      	movs	r2, #0
 80008fc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000900:	4845      	ldr	r0, [pc, #276]	; (8000a18 <MX_GPIO_Init+0x1f0>)
 8000902:	f000 fecd 	bl	80016a0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000906:	2308      	movs	r3, #8
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	483c      	ldr	r0, [pc, #240]	; (8000a10 <MX_GPIO_Init+0x1e8>)
 800091e:	f000 fd23 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000922:	2301      	movs	r3, #1
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4836      	ldr	r0, [pc, #216]	; (8000a14 <MX_GPIO_Init+0x1ec>)
 800093a:	f000 fd15 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800093e:	2308      	movs	r3, #8
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800094e:	2305      	movs	r3, #5
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	482e      	ldr	r0, [pc, #184]	; (8000a14 <MX_GPIO_Init+0x1ec>)
 800095a:	f000 fd05 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800095e:	2301      	movs	r3, #1
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000962:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	482a      	ldr	r0, [pc, #168]	; (8000a1c <MX_GPIO_Init+0x1f4>)
 8000974:	f000 fcf8 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000978:	2304      	movs	r3, #4
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4825      	ldr	r0, [pc, #148]	; (8000a20 <MX_GPIO_Init+0x1f8>)
 800098c:	f000 fcec 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a2:	2305      	movs	r3, #5
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	481c      	ldr	r0, [pc, #112]	; (8000a20 <MX_GPIO_Init+0x1f8>)
 80009ae:	f000 fcdb 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009b2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009b6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4813      	ldr	r0, [pc, #76]	; (8000a18 <MX_GPIO_Init+0x1f0>)
 80009cc:	f000 fccc 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d0:	2320      	movs	r3, #32
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	480d      	ldr	r0, [pc, #52]	; (8000a18 <MX_GPIO_Init+0x1f0>)
 80009e4:	f000 fcc0 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ec:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_GPIO_Init+0x1e8>)
 80009fe:	f000 fcb3 	bl	8001368 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a02:	bf00      	nop
 8000a04:	3730      	adds	r7, #48	; 0x30
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40020800 	.word	0x40020800
 8000a18:	40020c00 	.word	0x40020c00
 8000a1c:	40020000 	.word	0x40020000
 8000a20:	40020400 	.word	0x40020400

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>
	...

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a6e:	2007      	movs	r0, #7
 8000a70:	f000 fc38 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800

08000a80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	; 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a19      	ldr	r2, [pc, #100]	; (8000b04 <HAL_I2C_MspInit+0x84>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d12c      	bne.n	8000afc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <HAL_I2C_MspInit+0x88>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a17      	ldr	r2, [pc, #92]	; (8000b08 <HAL_I2C_MspInit+0x88>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <HAL_I2C_MspInit+0x88>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000abe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac4:	2312      	movs	r3, #18
 8000ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480c      	ldr	r0, [pc, #48]	; (8000b0c <HAL_I2C_MspInit+0x8c>)
 8000adc:	f000 fc44 	bl	8001368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_I2C_MspInit+0x88>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <HAL_I2C_MspInit+0x88>)
 8000aea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aee:	6413      	str	r3, [r2, #64]	; 0x40
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_I2C_MspInit+0x88>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000afc:	bf00      	nop
 8000afe:	3728      	adds	r7, #40	; 0x28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40005400 	.word	0x40005400
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020400 	.word	0x40020400

08000b10 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08e      	sub	sp, #56	; 0x38
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a31      	ldr	r2, [pc, #196]	; (8000c00 <HAL_I2S_MspInit+0xf0>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d15a      	bne.n	8000bf6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b40:	2301      	movs	r3, #1
 8000b42:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b44:	23c0      	movs	r3, #192	; 0xc0
 8000b46:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4618      	mov	r0, r3
 8000b52:	f004 f96f 	bl	8004e34 <HAL_RCCEx_PeriphCLKConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b5c:	f7ff ff62 	bl	8000a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <HAL_I2S_MspInit+0xf4>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	4a26      	ldr	r2, [pc, #152]	; (8000c04 <HAL_I2S_MspInit+0xf4>)
 8000b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b70:	4b24      	ldr	r3, [pc, #144]	; (8000c04 <HAL_I2S_MspInit+0xf4>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <HAL_I2S_MspInit+0xf4>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	4a1f      	ldr	r2, [pc, #124]	; (8000c04 <HAL_I2S_MspInit+0xf4>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <HAL_I2S_MspInit+0xf4>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <HAL_I2S_MspInit+0xf4>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba0:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <HAL_I2S_MspInit+0xf4>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <HAL_I2S_MspInit+0xf4>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bb4:	2310      	movs	r3, #16
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bc4:	2306      	movs	r3, #6
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480e      	ldr	r0, [pc, #56]	; (8000c08 <HAL_I2S_MspInit+0xf8>)
 8000bd0:	f000 fbca 	bl	8001368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bd4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000be6:	2306      	movs	r3, #6
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4806      	ldr	r0, [pc, #24]	; (8000c0c <HAL_I2S_MspInit+0xfc>)
 8000bf2:	f000 fbb9 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3738      	adds	r7, #56	; 0x38
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40003c00 	.word	0x40003c00
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020000 	.word	0x40020000
 8000c0c:	40020800 	.word	0x40020800

08000c10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <HAL_SPI_MspInit+0x84>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d12b      	bne.n	8000c8a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c40:	6453      	str	r3, [r2, #68]	; 0x44
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_SPI_MspInit+0x88>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c6a:	23e0      	movs	r3, #224	; 0xe0
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c7a:	2305      	movs	r3, #5
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <HAL_SPI_MspInit+0x8c>)
 8000c86:	f000 fb6f 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c8a:	bf00      	nop
 8000c8c:	3728      	adds	r7, #40	; 0x28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40013000 	.word	0x40013000
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000

08000ca0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a15      	ldr	r2, [pc, #84]	; (8000d04 <HAL_TIM_Base_MspInit+0x64>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d10e      	bne.n	8000cd0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_TIM_Base_MspInit+0x68>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a13      	ldr	r2, [pc, #76]	; (8000d08 <HAL_TIM_Base_MspInit+0x68>)
 8000cbc:	f043 0310 	orr.w	r3, r3, #16
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_TIM_Base_MspInit+0x68>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f003 0310 	and.w	r3, r3, #16
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000cce:	e012      	b.n	8000cf6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM7)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <HAL_TIM_Base_MspInit+0x6c>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d10d      	bne.n	8000cf6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_TIM_Base_MspInit+0x68>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <HAL_TIM_Base_MspInit+0x68>)
 8000ce4:	f043 0320 	orr.w	r3, r3, #32
 8000ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <HAL_TIM_Base_MspInit+0x68>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f003 0320 	and.w	r3, r3, #32
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
}
 8000cf6:	bf00      	nop
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40001000 	.word	0x40001000
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40001400 	.word	0x40001400

08000d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a19      	ldr	r2, [pc, #100]	; (8000d94 <HAL_UART_MspInit+0x84>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d12b      	bne.n	8000d8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	6413      	str	r3, [r2, #64]	; 0x40
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_UART_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <HAL_UART_MspInit+0x8c>)
 8000d86:	f000 faef 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	; 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40004400 	.word	0x40004400
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020000 	.word	0x40020000

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dec:	f000 f966 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <OTG_FS_IRQHandler+0x10>)
 8000dfa:	f000 ff4b 	bl	8001c94 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000654 	.word	0x20000654

08000e08 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000e12:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <ITM_SendChar+0x48>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <ITM_SendChar+0x48>)
 8000e18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e1c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <ITM_SendChar+0x4c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a0c      	ldr	r2, [pc, #48]	; (8000e54 <ITM_SendChar+0x4c>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000e2a:	bf00      	nop
 8000e2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f8      	beq.n	8000e2c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000e3a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	6013      	str	r3, [r2, #0]
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000edfc 	.word	0xe000edfc
 8000e54:	e0000e00 	.word	0xe0000e00

08000e58 <_read>:
	_kill(status, -1);
	while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	e00a      	b.n	8000e80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e6a:	f3af 8000 	nop.w
 8000e6e:	4601      	mov	r1, r0
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	1c5a      	adds	r2, r3, #1
 8000e74:	60ba      	str	r2, [r7, #8]
 8000e76:	b2ca      	uxtb	r2, r1
 8000e78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	dbf0      	blt.n	8000e6a <_read+0x12>
	}

	return len;
 8000e88:	687b      	ldr	r3, [r7, #4]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
	(void)file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	e009      	b.n	8000eb8 <_write+0x26>
	{
		// __io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	1c5a      	adds	r2, r3, #1
 8000ea8:	60ba      	str	r2, [r7, #8]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ffab 	bl	8000e08 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbf1      	blt.n	8000ea4 <_write+0x12>
	}
	return len;
 8000ec0:	687b      	ldr	r3, [r7, #4]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_close>:

int _close(int file)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
	(void)file;
	return -1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
	(void)file;
	st->st_mode = S_IFCHR;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ef2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <_isatty>:

int _isatty(int file)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	(void)file;
	return 1;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
	(void)file;
	(void)ptr;
	(void)dir;
	return 0;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f3c:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <_sbrk+0x5c>)
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <_sbrk+0x60>)
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d102      	bne.n	8000f56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <_sbrk+0x64>)
 8000f52:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <_sbrk+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d207      	bcs.n	8000f74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f64:	f008 fd84 	bl	8009a70 <__errno>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f72:	e009      	b.n	8000f88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <_sbrk+0x64>)
 8000f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20020000 	.word	0x20020000
 8000f94:	00000400 	.word	0x00000400
 8000f98:	20000270 	.word	0x20000270
 8000f9c:	20000b80 	.word	0x20000b80

08000fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <SystemInit+0x20>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <SystemInit+0x20>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ffc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fc8:	f7ff ffea 	bl	8000fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fce:	490d      	ldr	r1, [pc, #52]	; (8001004 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd4:	e002      	b.n	8000fdc <LoopCopyDataInit>

08000fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fda:	3304      	adds	r3, #4

08000fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe0:	d3f9      	bcc.n	8000fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fe4:	4c0a      	ldr	r4, [pc, #40]	; (8001010 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe8:	e001      	b.n	8000fee <LoopFillZerobss>

08000fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fec:	3204      	adds	r2, #4

08000fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff0:	d3fb      	bcc.n	8000fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f008 fd43 	bl	8009a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff6:	f7ff fa65 	bl	80004c4 <main>
  bx  lr    
 8000ffa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ffc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001004:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001008:	08009e30 	.word	0x08009e30
  ldr r2, =_sbss
 800100c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001010:	20000b80 	.word	0x20000b80

08001014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC_IRQHandler>
	...

08001018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <HAL_Init+0x40>)
 8001022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001026:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <HAL_Init+0x40>)
 800102e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001032:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a07      	ldr	r2, [pc, #28]	; (8001058 <HAL_Init+0x40>)
 800103a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001040:	2003      	movs	r0, #3
 8001042:	f000 f94f 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001046:	2000      	movs	r0, #0
 8001048:	f000 f808 	bl	800105c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800104c:	f7ff fcf0 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023c00 	.word	0x40023c00

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_InitTick+0x54>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_InitTick+0x58>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4619      	mov	r1, r3
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	fbb3 f3f1 	udiv	r3, r3, r1
 8001076:	fbb2 f3f3 	udiv	r3, r2, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f967 	bl	800134e <HAL_SYSTICK_Config>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e00e      	b.n	80010a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d80a      	bhi.n	80010a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001090:	2200      	movs	r2, #0
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001098:	f000 f92f 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4a06      	ldr	r2, [pc, #24]	; (80010b8 <HAL_InitTick+0x5c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000008 	.word	0x20000008
 80010b8:	20000004 	.word	0x20000004

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x20>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x24>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <HAL_IncTick+0x24>)
 80010ce:	6013      	str	r3, [r2, #0]
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	20000008 	.word	0x20000008
 80010e0:	20000274 	.word	0x20000274

080010e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return uwTick;
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <HAL_GetTick+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000274 	.word	0x20000274

080010fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff ffee 	bl	80010e4 <HAL_GetTick>
 8001108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001114:	d005      	beq.n	8001122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_Delay+0x44>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001122:	bf00      	nop
 8001124:	f7ff ffde 	bl	80010e4 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	429a      	cmp	r2, r3
 8001132:	d8f7      	bhi.n	8001124 <HAL_Delay+0x28>
  {
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	; (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff29 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff3e 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff31 	bl	80011a8 <__NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffa2 	bl	80012a0 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	e16b      	b.n	800165c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001384:	2201      	movs	r2, #1
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	429a      	cmp	r2, r3
 800139e:	f040 815a 	bne.w	8001656 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d005      	beq.n	80013ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d130      	bne.n	800141c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f0:	2201      	movs	r2, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	091b      	lsrs	r3, r3, #4
 8001406:	f003 0201 	and.w	r2, r3, #1
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b03      	cmp	r3, #3
 8001426:	d017      	beq.n	8001458 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	2203      	movs	r2, #3
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d123      	bne.n	80014ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	08da      	lsrs	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3208      	adds	r2, #8
 800146c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	220f      	movs	r2, #15
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	69b9      	ldr	r1, [r7, #24]
 80014a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	2203      	movs	r2, #3
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0203 	and.w	r2, r3, #3
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80b4 	beq.w	8001656 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b60      	ldr	r3, [pc, #384]	; (8001674 <HAL_GPIO_Init+0x30c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a5f      	ldr	r2, [pc, #380]	; (8001674 <HAL_GPIO_Init+0x30c>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b5d      	ldr	r3, [pc, #372]	; (8001674 <HAL_GPIO_Init+0x30c>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800150a:	4a5b      	ldr	r2, [pc, #364]	; (8001678 <HAL_GPIO_Init+0x310>)
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	220f      	movs	r2, #15
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a52      	ldr	r2, [pc, #328]	; (800167c <HAL_GPIO_Init+0x314>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d02b      	beq.n	800158e <HAL_GPIO_Init+0x226>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a51      	ldr	r2, [pc, #324]	; (8001680 <HAL_GPIO_Init+0x318>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d025      	beq.n	800158a <HAL_GPIO_Init+0x222>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a50      	ldr	r2, [pc, #320]	; (8001684 <HAL_GPIO_Init+0x31c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d01f      	beq.n	8001586 <HAL_GPIO_Init+0x21e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4f      	ldr	r2, [pc, #316]	; (8001688 <HAL_GPIO_Init+0x320>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d019      	beq.n	8001582 <HAL_GPIO_Init+0x21a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4e      	ldr	r2, [pc, #312]	; (800168c <HAL_GPIO_Init+0x324>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d013      	beq.n	800157e <HAL_GPIO_Init+0x216>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4d      	ldr	r2, [pc, #308]	; (8001690 <HAL_GPIO_Init+0x328>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d00d      	beq.n	800157a <HAL_GPIO_Init+0x212>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4c      	ldr	r2, [pc, #304]	; (8001694 <HAL_GPIO_Init+0x32c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d007      	beq.n	8001576 <HAL_GPIO_Init+0x20e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4b      	ldr	r2, [pc, #300]	; (8001698 <HAL_GPIO_Init+0x330>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d101      	bne.n	8001572 <HAL_GPIO_Init+0x20a>
 800156e:	2307      	movs	r3, #7
 8001570:	e00e      	b.n	8001590 <HAL_GPIO_Init+0x228>
 8001572:	2308      	movs	r3, #8
 8001574:	e00c      	b.n	8001590 <HAL_GPIO_Init+0x228>
 8001576:	2306      	movs	r3, #6
 8001578:	e00a      	b.n	8001590 <HAL_GPIO_Init+0x228>
 800157a:	2305      	movs	r3, #5
 800157c:	e008      	b.n	8001590 <HAL_GPIO_Init+0x228>
 800157e:	2304      	movs	r3, #4
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x228>
 8001582:	2303      	movs	r3, #3
 8001584:	e004      	b.n	8001590 <HAL_GPIO_Init+0x228>
 8001586:	2302      	movs	r3, #2
 8001588:	e002      	b.n	8001590 <HAL_GPIO_Init+0x228>
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <HAL_GPIO_Init+0x228>
 800158e:	2300      	movs	r3, #0
 8001590:	69fa      	ldr	r2, [r7, #28]
 8001592:	f002 0203 	and.w	r2, r2, #3
 8001596:	0092      	lsls	r2, r2, #2
 8001598:	4093      	lsls	r3, r2
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a0:	4935      	ldr	r1, [pc, #212]	; (8001678 <HAL_GPIO_Init+0x310>)
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	3302      	adds	r3, #2
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ae:	4b3b      	ldr	r3, [pc, #236]	; (800169c <HAL_GPIO_Init+0x334>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015d2:	4a32      	ldr	r2, [pc, #200]	; (800169c <HAL_GPIO_Init+0x334>)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d8:	4b30      	ldr	r3, [pc, #192]	; (800169c <HAL_GPIO_Init+0x334>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015fc:	4a27      	ldr	r2, [pc, #156]	; (800169c <HAL_GPIO_Init+0x334>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001602:	4b26      	ldr	r3, [pc, #152]	; (800169c <HAL_GPIO_Init+0x334>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001626:	4a1d      	ldr	r2, [pc, #116]	; (800169c <HAL_GPIO_Init+0x334>)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <HAL_GPIO_Init+0x334>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001650:	4a12      	ldr	r2, [pc, #72]	; (800169c <HAL_GPIO_Init+0x334>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3301      	adds	r3, #1
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	2b0f      	cmp	r3, #15
 8001660:	f67f ae90 	bls.w	8001384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3724      	adds	r7, #36	; 0x24
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40013800 	.word	0x40013800
 800167c:	40020000 	.word	0x40020000
 8001680:	40020400 	.word	0x40020400
 8001684:	40020800 	.word	0x40020800
 8001688:	40020c00 	.word	0x40020c00
 800168c:	40021000 	.word	0x40021000
 8001690:	40021400 	.word	0x40021400
 8001694:	40021800 	.word	0x40021800
 8001698:	40021c00 	.word	0x40021c00
 800169c:	40013c00 	.word	0x40013c00

080016a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
 80016ac:	4613      	mov	r3, r2
 80016ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016b0:	787b      	ldrb	r3, [r7, #1]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b6:	887a      	ldrh	r2, [r7, #2]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016bc:	e003      	b.n	80016c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016be:	887b      	ldrh	r3, [r7, #2]
 80016c0:	041a      	lsls	r2, r3, #16
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	619a      	str	r2, [r3, #24]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af02      	add	r7, sp, #8
 80016d8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e059      	b.n	8001798 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d106      	bne.n	8001704 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f007 fbfa 	bl	8008ef8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2203      	movs	r2, #3
 8001708:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001712:	d102      	bne.n	800171a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f004 fa03 	bl	8005b2a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7c1a      	ldrb	r2, [r3, #16]
 800172c:	f88d 2000 	strb.w	r2, [sp]
 8001730:	3304      	adds	r3, #4
 8001732:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001734:	f004 f984 	bl	8005a40 <USB_CoreInit>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d005      	beq.n	800174a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2202      	movs	r2, #2
 8001742:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e026      	b.n	8001798 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2101      	movs	r1, #1
 8001750:	4618      	mov	r0, r3
 8001752:	f004 f9fb 	bl	8005b4c <USB_SetCurrentMode>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2202      	movs	r2, #2
 8001760:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e017      	b.n	8001798 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	7c1a      	ldrb	r2, [r3, #16]
 8001770:	f88d 2000 	strb.w	r2, [sp]
 8001774:	3304      	adds	r3, #4
 8001776:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001778:	f004 fb9e 	bl	8005eb8 <USB_HostInit>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d005      	beq.n	800178e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2202      	movs	r2, #2
 8001786:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e004      	b.n	8001798 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b08b      	sub	sp, #44	; 0x2c
 80017a4:	af04      	add	r7, sp, #16
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	4608      	mov	r0, r1
 80017aa:	4611      	mov	r1, r2
 80017ac:	461a      	mov	r2, r3
 80017ae:	4603      	mov	r3, r0
 80017b0:	70fb      	strb	r3, [r7, #3]
 80017b2:	460b      	mov	r3, r1
 80017b4:	70bb      	strb	r3, [r7, #2]
 80017b6:	4613      	mov	r3, r2
 80017b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80017ba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80017bc:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d101      	bne.n	80017cc <HAL_HCD_HC_Init+0x2c>
 80017c8:	2302      	movs	r3, #2
 80017ca:	e09d      	b.n	8001908 <HAL_HCD_HC_Init+0x168>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80017d4:	78fa      	ldrb	r2, [r7, #3]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	1a9b      	subs	r3, r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	3319      	adds	r3, #25
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80017e8:	78fa      	ldrb	r2, [r7, #3]
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	1a9b      	subs	r3, r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	3314      	adds	r3, #20
 80017f8:	787a      	ldrb	r2, [r7, #1]
 80017fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017fc:	78fa      	ldrb	r2, [r7, #3]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	3315      	adds	r3, #21
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001810:	78fa      	ldrb	r2, [r7, #3]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	1a9b      	subs	r3, r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	3326      	adds	r3, #38	; 0x26
 8001820:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001824:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001826:	78fa      	ldrb	r2, [r7, #3]
 8001828:	78bb      	ldrb	r3, [r7, #2]
 800182a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800182e:	b2d8      	uxtb	r0, r3
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	4613      	mov	r3, r2
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	1a9b      	subs	r3, r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	440b      	add	r3, r1
 800183c:	3316      	adds	r3, #22
 800183e:	4602      	mov	r2, r0
 8001840:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	4619      	mov	r1, r3
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 fbc8 	bl	8001fdc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800184c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001850:	2b00      	cmp	r3, #0
 8001852:	da0a      	bge.n	800186a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001854:	78fa      	ldrb	r2, [r7, #3]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	011b      	lsls	r3, r3, #4
 800185c:	1a9b      	subs	r3, r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	3317      	adds	r3, #23
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
 8001868:	e009      	b.n	800187e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800186a:	78fa      	ldrb	r2, [r7, #3]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	1a9b      	subs	r3, r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	440b      	add	r3, r1
 8001878:	3317      	adds	r3, #23
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f004 fc7c 	bl	8006180 <USB_GetHostSpeed>
 8001888:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800188a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800188e:	2b01      	cmp	r3, #1
 8001890:	d10b      	bne.n	80018aa <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001892:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001896:	2b01      	cmp	r3, #1
 8001898:	d107      	bne.n	80018aa <HAL_HCD_HC_Init+0x10a>
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d104      	bne.n	80018aa <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	2bbc      	cmp	r3, #188	; 0xbc
 80018a4:	d901      	bls.n	80018aa <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80018a6:	23bc      	movs	r3, #188	; 0xbc
 80018a8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80018aa:	78fa      	ldrb	r2, [r7, #3]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	1a9b      	subs	r3, r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	3318      	adds	r3, #24
 80018ba:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80018be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80018c0:	78fa      	ldrb	r2, [r7, #3]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	b298      	uxth	r0, r3
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	1a9b      	subs	r3, r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	3328      	adds	r3, #40	; 0x28
 80018d4:	4602      	mov	r2, r0
 80018d6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	787c      	ldrb	r4, [r7, #1]
 80018e2:	78ba      	ldrb	r2, [r7, #2]
 80018e4:	78f9      	ldrb	r1, [r7, #3]
 80018e6:	9302      	str	r3, [sp, #8]
 80018e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018ec:	9301      	str	r3, [sp, #4]
 80018ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	4623      	mov	r3, r4
 80018f6:	f004 fc6b 	bl	80061d0 <USB_HC_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8001906:	7bfb      	ldrb	r3, [r7, #15]
}
 8001908:	4618      	mov	r0, r3
 800190a:	371c      	adds	r7, #28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd90      	pop	{r4, r7, pc}

08001910 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_HCD_HC_Halt+0x1e>
 800192a:	2302      	movs	r3, #2
 800192c:	e00f      	b.n	800194e <HAL_HCD_HC_Halt+0x3e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	78fa      	ldrb	r2, [r7, #3]
 800193c:	4611      	mov	r1, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f004 fffd 	bl	800693e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 800194c:	7bfb      	ldrb	r3, [r7, #15]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	4608      	mov	r0, r1
 8001962:	4611      	mov	r1, r2
 8001964:	461a      	mov	r2, r3
 8001966:	4603      	mov	r3, r0
 8001968:	70fb      	strb	r3, [r7, #3]
 800196a:	460b      	mov	r3, r1
 800196c:	70bb      	strb	r3, [r7, #2]
 800196e:	4613      	mov	r3, r2
 8001970:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001972:	78fa      	ldrb	r2, [r7, #3]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	1a9b      	subs	r3, r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	3317      	adds	r3, #23
 8001982:	78ba      	ldrb	r2, [r7, #2]
 8001984:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001986:	78fa      	ldrb	r2, [r7, #3]
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	1a9b      	subs	r3, r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	440b      	add	r3, r1
 8001994:	3326      	adds	r3, #38	; 0x26
 8001996:	787a      	ldrb	r2, [r7, #1]
 8001998:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800199a:	7c3b      	ldrb	r3, [r7, #16]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d114      	bne.n	80019ca <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019a0:	78fa      	ldrb	r2, [r7, #3]
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	1a9b      	subs	r3, r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	332a      	adds	r3, #42	; 0x2a
 80019b0:	2203      	movs	r2, #3
 80019b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	1a9b      	subs	r3, r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	3319      	adds	r3, #25
 80019c4:	7f3a      	ldrb	r2, [r7, #28]
 80019c6:	701a      	strb	r2, [r3, #0]
 80019c8:	e009      	b.n	80019de <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	1a9b      	subs	r3, r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	332a      	adds	r3, #42	; 0x2a
 80019da:	2202      	movs	r2, #2
 80019dc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019de:	787b      	ldrb	r3, [r7, #1]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	f200 8102 	bhi.w	8001bea <HAL_HCD_HC_SubmitRequest+0x292>
 80019e6:	a201      	add	r2, pc, #4	; (adr r2, 80019ec <HAL_HCD_HC_SubmitRequest+0x94>)
 80019e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ec:	080019fd 	.word	0x080019fd
 80019f0:	08001bd5 	.word	0x08001bd5
 80019f4:	08001ac1 	.word	0x08001ac1
 80019f8:	08001b4b 	.word	0x08001b4b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80019fc:	7c3b      	ldrb	r3, [r7, #16]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	f040 80f5 	bne.w	8001bee <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001a04:	78bb      	ldrb	r3, [r7, #2]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d12d      	bne.n	8001a66 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001a0a:	8b3b      	ldrh	r3, [r7, #24]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d109      	bne.n	8001a24 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	1a9b      	subs	r3, r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	333d      	adds	r3, #61	; 0x3d
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a24:	78fa      	ldrb	r2, [r7, #3]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	333d      	adds	r3, #61	; 0x3d
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10a      	bne.n	8001a50 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a3a:	78fa      	ldrb	r2, [r7, #3]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	1a9b      	subs	r3, r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	332a      	adds	r3, #42	; 0x2a
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001a4e:	e0ce      	b.n	8001bee <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a50:	78fa      	ldrb	r2, [r7, #3]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	1a9b      	subs	r3, r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	332a      	adds	r3, #42	; 0x2a
 8001a60:	2202      	movs	r2, #2
 8001a62:	701a      	strb	r2, [r3, #0]
      break;
 8001a64:	e0c3      	b.n	8001bee <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001a66:	78fa      	ldrb	r2, [r7, #3]
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	1a9b      	subs	r3, r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	440b      	add	r3, r1
 8001a74:	331a      	adds	r3, #26
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	f040 80b8 	bne.w	8001bee <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a7e:	78fa      	ldrb	r2, [r7, #3]
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	1a9b      	subs	r3, r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	333c      	adds	r3, #60	; 0x3c
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10a      	bne.n	8001aaa <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a94:	78fa      	ldrb	r2, [r7, #3]
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	1a9b      	subs	r3, r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	332a      	adds	r3, #42	; 0x2a
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
      break;
 8001aa8:	e0a1      	b.n	8001bee <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aaa:	78fa      	ldrb	r2, [r7, #3]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	1a9b      	subs	r3, r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	332a      	adds	r3, #42	; 0x2a
 8001aba:	2202      	movs	r2, #2
 8001abc:	701a      	strb	r2, [r3, #0]
      break;
 8001abe:	e096      	b.n	8001bee <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001ac0:	78bb      	ldrb	r3, [r7, #2]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d120      	bne.n	8001b08 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ac6:	78fa      	ldrb	r2, [r7, #3]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	1a9b      	subs	r3, r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	333d      	adds	r3, #61	; 0x3d
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10a      	bne.n	8001af2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001adc:	78fa      	ldrb	r2, [r7, #3]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	1a9b      	subs	r3, r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	332a      	adds	r3, #42	; 0x2a
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001af0:	e07e      	b.n	8001bf0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001af2:	78fa      	ldrb	r2, [r7, #3]
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	011b      	lsls	r3, r3, #4
 8001afa:	1a9b      	subs	r3, r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	332a      	adds	r3, #42	; 0x2a
 8001b02:	2202      	movs	r2, #2
 8001b04:	701a      	strb	r2, [r3, #0]
      break;
 8001b06:	e073      	b.n	8001bf0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b08:	78fa      	ldrb	r2, [r7, #3]
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	333c      	adds	r3, #60	; 0x3c
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10a      	bne.n	8001b34 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b1e:	78fa      	ldrb	r2, [r7, #3]
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	1a9b      	subs	r3, r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	332a      	adds	r3, #42	; 0x2a
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
      break;
 8001b32:	e05d      	b.n	8001bf0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b34:	78fa      	ldrb	r2, [r7, #3]
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	440b      	add	r3, r1
 8001b42:	332a      	adds	r3, #42	; 0x2a
 8001b44:	2202      	movs	r2, #2
 8001b46:	701a      	strb	r2, [r3, #0]
      break;
 8001b48:	e052      	b.n	8001bf0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b4a:	78bb      	ldrb	r3, [r7, #2]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d120      	bne.n	8001b92 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b50:	78fa      	ldrb	r2, [r7, #3]
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	1a9b      	subs	r3, r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	333d      	adds	r3, #61	; 0x3d
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10a      	bne.n	8001b7c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b66:	78fa      	ldrb	r2, [r7, #3]
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	011b      	lsls	r3, r3, #4
 8001b6e:	1a9b      	subs	r3, r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	440b      	add	r3, r1
 8001b74:	332a      	adds	r3, #42	; 0x2a
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b7a:	e039      	b.n	8001bf0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b7c:	78fa      	ldrb	r2, [r7, #3]
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	1a9b      	subs	r3, r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	440b      	add	r3, r1
 8001b8a:	332a      	adds	r3, #42	; 0x2a
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	701a      	strb	r2, [r3, #0]
      break;
 8001b90:	e02e      	b.n	8001bf0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b92:	78fa      	ldrb	r2, [r7, #3]
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	011b      	lsls	r3, r3, #4
 8001b9a:	1a9b      	subs	r3, r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	333c      	adds	r3, #60	; 0x3c
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10a      	bne.n	8001bbe <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ba8:	78fa      	ldrb	r2, [r7, #3]
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	011b      	lsls	r3, r3, #4
 8001bb0:	1a9b      	subs	r3, r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	332a      	adds	r3, #42	; 0x2a
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
      break;
 8001bbc:	e018      	b.n	8001bf0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bbe:	78fa      	ldrb	r2, [r7, #3]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	1a9b      	subs	r3, r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	440b      	add	r3, r1
 8001bcc:	332a      	adds	r3, #42	; 0x2a
 8001bce:	2202      	movs	r2, #2
 8001bd0:	701a      	strb	r2, [r3, #0]
      break;
 8001bd2:	e00d      	b.n	8001bf0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bd4:	78fa      	ldrb	r2, [r7, #3]
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	1a9b      	subs	r3, r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	332a      	adds	r3, #42	; 0x2a
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
      break;
 8001be8:	e002      	b.n	8001bf0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001bea:	bf00      	nop
 8001bec:	e000      	b.n	8001bf0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001bee:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001bf0:	78fa      	ldrb	r2, [r7, #3]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	1a9b      	subs	r3, r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	332c      	adds	r3, #44	; 0x2c
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c04:	78fa      	ldrb	r2, [r7, #3]
 8001c06:	8b39      	ldrh	r1, [r7, #24]
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	1a9b      	subs	r3, r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4403      	add	r3, r0
 8001c14:	3334      	adds	r3, #52	; 0x34
 8001c16:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c18:	78fa      	ldrb	r2, [r7, #3]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	1a9b      	subs	r3, r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	334c      	adds	r3, #76	; 0x4c
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c2c:	78fa      	ldrb	r2, [r7, #3]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	011b      	lsls	r3, r3, #4
 8001c34:	1a9b      	subs	r3, r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	3338      	adds	r3, #56	; 0x38
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c40:	78fa      	ldrb	r2, [r7, #3]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	1a9b      	subs	r3, r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	3315      	adds	r3, #21
 8001c50:	78fa      	ldrb	r2, [r7, #3]
 8001c52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c54:	78fa      	ldrb	r2, [r7, #3]
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	011b      	lsls	r3, r3, #4
 8001c5c:	1a9b      	subs	r3, r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	440b      	add	r3, r1
 8001c62:	334d      	adds	r3, #77	; 0x4d
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	78fa      	ldrb	r2, [r7, #3]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	1a9b      	subs	r3, r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	3310      	adds	r3, #16
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	1d19      	adds	r1, r3, #4
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	799b      	ldrb	r3, [r3, #6]
 8001c82:	461a      	mov	r2, r3
 8001c84:	f004 fbd0 	bl	8006428 <USB_HC_StartXfer>
 8001c88:	4603      	mov	r3, r0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop

08001c94 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f004 f8c4 	bl	8005e38 <USB_GetMode>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	f040 80fb 	bne.w	8001eae <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f004 f887 	bl	8005dd0 <USB_ReadInterrupts>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80f1 	beq.w	8001eac <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f004 f87e 	bl	8005dd0 <USB_ReadInterrupts>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001cde:	d104      	bne.n	8001cea <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ce8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f004 f86e 	bl	8005dd0 <USB_ReadInterrupts>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cfe:	d104      	bne.n	8001d0a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f004 f85e 	bl	8005dd0 <USB_ReadInterrupts>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d1e:	d104      	bne.n	8001d2a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f004 f84e 	bl	8005dd0 <USB_ReadInterrupts>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d103      	bne.n	8001d46 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2202      	movs	r2, #2
 8001d44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f004 f840 	bl	8005dd0 <USB_ReadInterrupts>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d5a:	d120      	bne.n	8001d9e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d64:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d113      	bne.n	8001d9e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d76:	2110      	movs	r1, #16
 8001d78:	6938      	ldr	r0, [r7, #16]
 8001d7a:	f003 ff33 	bl	8005be4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d7e:	6938      	ldr	r0, [r7, #16]
 8001d80:	f003 ff62 	bl	8005c48 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7a5b      	ldrb	r3, [r3, #9]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d105      	bne.n	8001d98 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2101      	movs	r1, #1
 8001d92:	4618      	mov	r0, r3
 8001d94:	f004 f954 	bl	8006040 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f007 f92b 	bl	8008ff4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f004 f814 	bl	8005dd0 <USB_ReadInterrupts>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db2:	d102      	bne.n	8001dba <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f001 fd4d 	bl	8003854 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f004 f806 	bl	8005dd0 <USB_ReadInterrupts>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d106      	bne.n	8001ddc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f007 f8f4 	bl	8008fbc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2208      	movs	r2, #8
 8001dda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f003 fff5 	bl	8005dd0 <USB_ReadInterrupts>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001df0:	d139      	bne.n	8001e66 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f004 fd90 	bl	800691c <USB_HC_ReadInterrupt>
 8001dfc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	e025      	b.n	8001e50 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d018      	beq.n	8001e4a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	015a      	lsls	r2, r3, #5
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e2e:	d106      	bne.n	8001e3e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	4619      	mov	r1, r3
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f905 	bl	8002046 <HCD_HC_IN_IRQHandler>
 8001e3c:	e005      	b.n	8001e4a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	4619      	mov	r1, r3
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 ff67 	bl	8002d18 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	795b      	ldrb	r3, [r3, #5]
 8001e54:	461a      	mov	r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d3d3      	bcc.n	8001e04 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f003 ffb0 	bl	8005dd0 <USB_ReadInterrupts>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f003 0310 	and.w	r3, r3, #16
 8001e76:	2b10      	cmp	r3, #16
 8001e78:	d101      	bne.n	8001e7e <HAL_HCD_IRQHandler+0x1ea>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_HCD_IRQHandler+0x1ec>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d014      	beq.n	8001eae <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699a      	ldr	r2, [r3, #24]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0210 	bic.w	r2, r2, #16
 8001e92:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f001 fbfe 	bl	8003696 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699a      	ldr	r2, [r3, #24]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f042 0210 	orr.w	r2, r2, #16
 8001ea8:	619a      	str	r2, [r3, #24]
 8001eaa:	e000      	b.n	8001eae <HAL_HCD_IRQHandler+0x21a>
      return;
 8001eac:	bf00      	nop
    }
  }
}
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_HCD_Start+0x16>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e013      	b.n	8001ef2 <HAL_HCD_Start+0x3e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f004 f918 	bl	800610e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f003 fe10 	bl	8005b08 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_HCD_Stop+0x16>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e00d      	b.n	8001f2c <HAL_HCD_Stop+0x32>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f004 fe6b 	bl	8006bf8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f004 f8ba 	bl	80060ba <USB_ResetPort>
 8001f46:	4603      	mov	r3, r0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	1a9b      	subs	r3, r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	334c      	adds	r3, #76	; 0x4c
 8001f6c:	781b      	ldrb	r3, [r3, #0]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	460b      	mov	r3, r1
 8001f84:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	1a9b      	subs	r3, r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	3338      	adds	r3, #56	; 0x38
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f004 f8fc 	bl	80061ae <USB_GetCurrentFrame>
 8001fb6:	4603      	mov	r3, r0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f004 f8d7 	bl	8006180 <USB_GetHostSpeed>
 8001fd2:	4603      	mov	r3, r0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001fe8:	78fa      	ldrb	r2, [r7, #3]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	331a      	adds	r3, #26
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	331b      	adds	r3, #27
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	1a9b      	subs	r3, r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	3325      	adds	r3, #37	; 0x25
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002024:	78fa      	ldrb	r2, [r7, #3]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	1a9b      	subs	r3, r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	3324      	adds	r3, #36	; 0x24
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b086      	sub	sp, #24
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	460b      	mov	r3, r1
 8002050:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f003 fec6 	bl	8005df6 <USB_ReadChInterrupts>
 800206a:	4603      	mov	r3, r0
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b04      	cmp	r3, #4
 8002072:	d11a      	bne.n	80020aa <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002080:	461a      	mov	r2, r3
 8002082:	2304      	movs	r3, #4
 8002084:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002086:	78fa      	ldrb	r2, [r7, #3]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	1a9b      	subs	r3, r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	334d      	adds	r3, #77	; 0x4d
 8002096:	2207      	movs	r2, #7
 8002098:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	78fa      	ldrb	r2, [r7, #3]
 80020a0:	4611      	mov	r1, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f004 fc4b 	bl	800693e <USB_HC_Halt>
 80020a8:	e09e      	b.n	80021e8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	78fa      	ldrb	r2, [r7, #3]
 80020b0:	4611      	mov	r1, r2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f003 fe9f 	bl	8005df6 <USB_ReadChInterrupts>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020c2:	d11b      	bne.n	80020fc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	015a      	lsls	r2, r3, #5
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d0:	461a      	mov	r2, r3
 80020d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	334d      	adds	r3, #77	; 0x4d
 80020e8:	2208      	movs	r2, #8
 80020ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	78fa      	ldrb	r2, [r7, #3]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f004 fc22 	bl	800693e <USB_HC_Halt>
 80020fa:	e075      	b.n	80021e8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	78fa      	ldrb	r2, [r7, #3]
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f003 fe76 	bl	8005df6 <USB_ReadChInterrupts>
 800210a:	4603      	mov	r3, r0
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b08      	cmp	r3, #8
 8002112:	d11a      	bne.n	800214a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4413      	add	r3, r2
 800211c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002120:	461a      	mov	r2, r3
 8002122:	2308      	movs	r3, #8
 8002124:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002126:	78fa      	ldrb	r2, [r7, #3]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	1a9b      	subs	r3, r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	334d      	adds	r3, #77	; 0x4d
 8002136:	2206      	movs	r2, #6
 8002138:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	78fa      	ldrb	r2, [r7, #3]
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f004 fbfb 	bl	800693e <USB_HC_Halt>
 8002148:	e04e      	b.n	80021e8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	78fa      	ldrb	r2, [r7, #3]
 8002150:	4611      	mov	r1, r2
 8002152:	4618      	mov	r0, r3
 8002154:	f003 fe4f 	bl	8005df6 <USB_ReadChInterrupts>
 8002158:	4603      	mov	r3, r0
 800215a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002162:	d11b      	bne.n	800219c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002164:	78fb      	ldrb	r3, [r7, #3]
 8002166:	015a      	lsls	r2, r3, #5
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4413      	add	r3, r2
 800216c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002170:	461a      	mov	r2, r3
 8002172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002176:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	334d      	adds	r3, #77	; 0x4d
 8002188:	2209      	movs	r2, #9
 800218a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	78fa      	ldrb	r2, [r7, #3]
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f004 fbd2 	bl	800693e <USB_HC_Halt>
 800219a:	e025      	b.n	80021e8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	78fa      	ldrb	r2, [r7, #3]
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f003 fe26 	bl	8005df6 <USB_ReadChInterrupts>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b0:	2b80      	cmp	r3, #128	; 0x80
 80021b2:	d119      	bne.n	80021e8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c0:	461a      	mov	r2, r3
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80021c6:	78fa      	ldrb	r2, [r7, #3]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	1a9b      	subs	r3, r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	334d      	adds	r3, #77	; 0x4d
 80021d6:	2207      	movs	r2, #7
 80021d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	78fa      	ldrb	r2, [r7, #3]
 80021e0:	4611      	mov	r1, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f004 fbab 	bl	800693e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	4611      	mov	r1, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f003 fe00 	bl	8005df6 <USB_ReadChInterrupts>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002200:	d112      	bne.n	8002228 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f004 fb97 	bl	800693e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4413      	add	r3, r2
 8002218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221c:	461a      	mov	r2, r3
 800221e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002222:	6093      	str	r3, [r2, #8]
 8002224:	f000 bd75 	b.w	8002d12 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f003 fde0 	bl	8005df6 <USB_ReadChInterrupts>
 8002236:	4603      	mov	r3, r0
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b01      	cmp	r3, #1
 800223e:	f040 8128 	bne.w	8002492 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224e:	461a      	mov	r2, r3
 8002250:	2320      	movs	r3, #32
 8002252:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	331b      	adds	r3, #27
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d119      	bne.n	800229e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800226a:	78fa      	ldrb	r2, [r7, #3]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	331b      	adds	r3, #27
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4413      	add	r3, r2
 8002286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	78fa      	ldrb	r2, [r7, #3]
 800228e:	0151      	lsls	r1, r2, #5
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	440a      	add	r2, r1
 8002294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800229c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	799b      	ldrb	r3, [r3, #6]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d01b      	beq.n	80022de <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022a6:	78fa      	ldrb	r2, [r7, #3]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	3330      	adds	r3, #48	; 0x30
 80022b6:	6819      	ldr	r1, [r3, #0]
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	1ac9      	subs	r1, r1, r3
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	1a9b      	subs	r3, r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4403      	add	r3, r0
 80022da:	3338      	adds	r3, #56	; 0x38
 80022dc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80022de:	78fa      	ldrb	r2, [r7, #3]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	334d      	adds	r3, #77	; 0x4d
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80022f2:	78fa      	ldrb	r2, [r7, #3]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	3344      	adds	r3, #68	; 0x44
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4413      	add	r3, r2
 800230e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002312:	461a      	mov	r2, r3
 8002314:	2301      	movs	r3, #1
 8002316:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002318:	78fa      	ldrb	r2, [r7, #3]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	3326      	adds	r3, #38	; 0x26
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	3326      	adds	r3, #38	; 0x26
 800233e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002340:	2b02      	cmp	r3, #2
 8002342:	d110      	bne.n	8002366 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f004 faf6 	bl	800693e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	015a      	lsls	r2, r3, #5
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4413      	add	r3, r2
 800235a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235e:	461a      	mov	r2, r3
 8002360:	2310      	movs	r3, #16
 8002362:	6093      	str	r3, [r2, #8]
 8002364:	e03d      	b.n	80023e2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002366:	78fa      	ldrb	r2, [r7, #3]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	3326      	adds	r3, #38	; 0x26
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d00a      	beq.n	8002392 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	3326      	adds	r3, #38	; 0x26
 800238c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800238e:	2b01      	cmp	r3, #1
 8002390:	d127      	bne.n	80023e2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4413      	add	r3, r2
 800239a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	0151      	lsls	r1, r2, #5
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	440a      	add	r2, r1
 80023a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023b0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	334c      	adds	r3, #76	; 0x4c
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80023c6:	78fa      	ldrb	r2, [r7, #3]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	334c      	adds	r3, #76	; 0x4c
 80023d6:	781a      	ldrb	r2, [r3, #0]
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	4619      	mov	r1, r3
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f006 fe17 	bl	8009010 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	799b      	ldrb	r3, [r3, #6]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d13b      	bne.n	8002462 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80023ea:	78fa      	ldrb	r2, [r7, #3]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	3338      	adds	r3, #56	; 0x38
 80023fa:	6819      	ldr	r1, [r3, #0]
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4403      	add	r3, r0
 800240a:	3328      	adds	r3, #40	; 0x28
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	440b      	add	r3, r1
 8002410:	1e59      	subs	r1, r3, #1
 8002412:	78fa      	ldrb	r2, [r7, #3]
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4403      	add	r3, r0
 8002420:	3328      	adds	r3, #40	; 0x28
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	fbb1 f3f3 	udiv	r3, r1, r3
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 8470 	beq.w	8002d12 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	333c      	adds	r3, #60	; 0x3c
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	f083 0301 	eor.w	r3, r3, #1
 800244a:	b2d8      	uxtb	r0, r3
 800244c:	6879      	ldr	r1, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	011b      	lsls	r3, r3, #4
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	333c      	adds	r3, #60	; 0x3c
 800245a:	4602      	mov	r2, r0
 800245c:	701a      	strb	r2, [r3, #0]
 800245e:	f000 bc58 	b.w	8002d12 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	1a9b      	subs	r3, r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	333c      	adds	r3, #60	; 0x3c
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	f083 0301 	eor.w	r3, r3, #1
 800247a:	b2d8      	uxtb	r0, r3
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	333c      	adds	r3, #60	; 0x3c
 800248a:	4602      	mov	r2, r0
 800248c:	701a      	strb	r2, [r3, #0]
 800248e:	f000 bc40 	b.w	8002d12 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	4611      	mov	r1, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f003 fcab 	bl	8005df6 <USB_ReadChInterrupts>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f003 0320 	and.w	r3, r3, #32
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	d131      	bne.n	800250e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b6:	461a      	mov	r2, r3
 80024b8:	2320      	movs	r3, #32
 80024ba:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	1a9b      	subs	r3, r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	331a      	adds	r3, #26
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	f040 841f 	bne.w	8002d12 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	331b      	adds	r3, #27
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80024e8:	78fa      	ldrb	r2, [r7, #3]
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	4613      	mov	r3, r2
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	334d      	adds	r3, #77	; 0x4d
 80024f8:	2203      	movs	r2, #3
 80024fa:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	78fa      	ldrb	r2, [r7, #3]
 8002502:	4611      	mov	r1, r2
 8002504:	4618      	mov	r0, r3
 8002506:	f004 fa1a 	bl	800693e <USB_HC_Halt>
 800250a:	f000 bc02 	b.w	8002d12 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	78fa      	ldrb	r2, [r7, #3]
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f003 fc6d 	bl	8005df6 <USB_ReadChInterrupts>
 800251c:	4603      	mov	r3, r0
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b02      	cmp	r3, #2
 8002524:	f040 8305 	bne.w	8002b32 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4413      	add	r3, r2
 8002530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002534:	461a      	mov	r2, r3
 8002536:	2302      	movs	r3, #2
 8002538:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	334d      	adds	r3, #77	; 0x4d
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d114      	bne.n	800257a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	334d      	adds	r3, #77	; 0x4d
 8002560:	2202      	movs	r2, #2
 8002562:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	334c      	adds	r3, #76	; 0x4c
 8002574:	2201      	movs	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
 8002578:	e2cc      	b.n	8002b14 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	334d      	adds	r3, #77	; 0x4d
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b06      	cmp	r3, #6
 800258e:	d114      	bne.n	80025ba <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	334d      	adds	r3, #77	; 0x4d
 80025a0:	2202      	movs	r2, #2
 80025a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80025a4:	78fa      	ldrb	r2, [r7, #3]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	334c      	adds	r3, #76	; 0x4c
 80025b4:	2205      	movs	r2, #5
 80025b6:	701a      	strb	r2, [r3, #0]
 80025b8:	e2ac      	b.n	8002b14 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80025ba:	78fa      	ldrb	r2, [r7, #3]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	334d      	adds	r3, #77	; 0x4d
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b07      	cmp	r3, #7
 80025ce:	d00b      	beq.n	80025e8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	334d      	adds	r3, #77	; 0x4d
 80025e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80025e2:	2b09      	cmp	r3, #9
 80025e4:	f040 80a6 	bne.w	8002734 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	334d      	adds	r3, #77	; 0x4d
 80025f8:	2202      	movs	r2, #2
 80025fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	3344      	adds	r3, #68	; 0x44
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	1c59      	adds	r1, r3, #1
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	1a9b      	subs	r3, r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4403      	add	r3, r0
 800261c:	3344      	adds	r3, #68	; 0x44
 800261e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	3344      	adds	r3, #68	; 0x44
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d943      	bls.n	80026be <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002636:	78fa      	ldrb	r2, [r7, #3]
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	3344      	adds	r3, #68	; 0x44
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800264a:	78fa      	ldrb	r2, [r7, #3]
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	1a9b      	subs	r3, r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	331a      	adds	r3, #26
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d123      	bne.n	80026a8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	331b      	adds	r3, #27
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	331c      	adds	r3, #28
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	78fa      	ldrb	r2, [r7, #3]
 8002698:	0151      	lsls	r1, r2, #5
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	440a      	add	r2, r1
 800269e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80026a8:	78fa      	ldrb	r2, [r7, #3]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	334c      	adds	r3, #76	; 0x4c
 80026b8:	2204      	movs	r2, #4
 80026ba:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80026bc:	e229      	b.n	8002b12 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	1a9b      	subs	r3, r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	334c      	adds	r3, #76	; 0x4c
 80026ce:	2202      	movs	r2, #2
 80026d0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026d2:	78fa      	ldrb	r2, [r7, #3]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	1a9b      	subs	r3, r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	3326      	adds	r3, #38	; 0x26
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00b      	beq.n	8002700 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	3326      	adds	r3, #38	; 0x26
 80026f8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	f040 8209 	bne.w	8002b12 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002716:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800271e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4413      	add	r3, r2
 8002728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272c:	461a      	mov	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002732:	e1ee      	b.n	8002b12 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	334d      	adds	r3, #77	; 0x4d
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b05      	cmp	r3, #5
 8002748:	f040 80c8 	bne.w	80028dc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	334d      	adds	r3, #77	; 0x4d
 800275c:	2202      	movs	r2, #2
 800275e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	331b      	adds	r3, #27
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b01      	cmp	r3, #1
 8002774:	f040 81ce 	bne.w	8002b14 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	3326      	adds	r3, #38	; 0x26
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d16b      	bne.n	8002866 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800278e:	78fa      	ldrb	r2, [r7, #3]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	1a9b      	subs	r3, r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	3348      	adds	r3, #72	; 0x48
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	1c59      	adds	r1, r3, #1
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4403      	add	r3, r0
 80027ae:	3348      	adds	r3, #72	; 0x48
 80027b0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	3348      	adds	r3, #72	; 0x48
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d943      	bls.n	8002850 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80027c8:	78fa      	ldrb	r2, [r7, #3]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	3348      	adds	r3, #72	; 0x48
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	331b      	adds	r3, #27
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	3344      	adds	r3, #68	; 0x44
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d809      	bhi.n	800281a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	331c      	adds	r3, #28
 8002816:	2201      	movs	r2, #1
 8002818:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4413      	add	r3, r2
 8002822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	0151      	lsls	r1, r2, #5
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	440a      	add	r2, r1
 8002830:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002838:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800283a:	78fa      	ldrb	r2, [r7, #3]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	1a9b      	subs	r3, r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	334c      	adds	r3, #76	; 0x4c
 800284a:	2204      	movs	r2, #4
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	e014      	b.n	800287a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	334c      	adds	r3, #76	; 0x4c
 8002860:	2202      	movs	r2, #2
 8002862:	701a      	strb	r2, [r3, #0]
 8002864:	e009      	b.n	800287a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	334c      	adds	r3, #76	; 0x4c
 8002876:	2202      	movs	r2, #2
 8002878:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800287a:	78fa      	ldrb	r2, [r7, #3]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	1a9b      	subs	r3, r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	3326      	adds	r3, #38	; 0x26
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00b      	beq.n	80028a8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	3326      	adds	r3, #38	; 0x26
 80028a0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	f040 8136 	bne.w	8002b14 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028be:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028c6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	015a      	lsls	r2, r3, #5
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d4:	461a      	mov	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e11b      	b.n	8002b14 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	334d      	adds	r3, #77	; 0x4d
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	f040 8081 	bne.w	80029f6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028f4:	78fa      	ldrb	r2, [r7, #3]
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	1a9b      	subs	r3, r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	334d      	adds	r3, #77	; 0x4d
 8002904:	2202      	movs	r2, #2
 8002906:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	331b      	adds	r3, #27
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b01      	cmp	r3, #1
 800291c:	f040 80fa 	bne.w	8002b14 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002920:	78fa      	ldrb	r2, [r7, #3]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	334c      	adds	r3, #76	; 0x4c
 8002930:	2202      	movs	r2, #2
 8002932:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002934:	78fb      	ldrb	r3, [r7, #3]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	0151      	lsls	r1, r2, #5
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	440a      	add	r2, r1
 800294a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800294e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002952:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	78fa      	ldrb	r2, [r7, #3]
 8002964:	0151      	lsls	r1, r2, #5
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	440a      	add	r2, r1
 800296a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800296e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002972:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4413      	add	r3, r2
 800297c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	0151      	lsls	r1, r2, #5
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	440a      	add	r2, r1
 800298a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800298e:	f023 0320 	bic.w	r3, r3, #32
 8002992:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002994:	78fa      	ldrb	r2, [r7, #3]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	3326      	adds	r3, #38	; 0x26
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00b      	beq.n	80029c2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	3326      	adds	r3, #38	; 0x26
 80029ba:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029bc:	2b02      	cmp	r3, #2
 80029be:	f040 80a9 	bne.w	8002b14 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	015a      	lsls	r2, r3, #5
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029d8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029e0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ee:	461a      	mov	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	e08e      	b.n	8002b14 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	334d      	adds	r3, #77	; 0x4d
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d143      	bne.n	8002a94 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	334d      	adds	r3, #77	; 0x4d
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	334c      	adds	r3, #76	; 0x4c
 8002a30:	2202      	movs	r2, #2
 8002a32:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	3326      	adds	r3, #38	; 0x26
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	3326      	adds	r3, #38	; 0x26
 8002a5a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d159      	bne.n	8002b14 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a76:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a7e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	e03f      	b.n	8002b14 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	334d      	adds	r3, #77	; 0x4d
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d126      	bne.n	8002af8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	334d      	adds	r3, #77	; 0x4d
 8002aba:	2202      	movs	r2, #2
 8002abc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	3344      	adds	r3, #68	; 0x44
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	1c59      	adds	r1, r3, #1
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4403      	add	r3, r0
 8002ade:	3344      	adds	r3, #68	; 0x44
 8002ae0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ae2:	78fa      	ldrb	r2, [r7, #3]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	334c      	adds	r3, #76	; 0x4c
 8002af2:	2204      	movs	r2, #4
 8002af4:	701a      	strb	r2, [r3, #0]
 8002af6:	e00d      	b.n	8002b14 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	334d      	adds	r3, #77	; 0x4d
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	f000 8100 	beq.w	8002d10 <HCD_HC_IN_IRQHandler+0xcca>
 8002b10:	e000      	b.n	8002b14 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b12:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	334c      	adds	r3, #76	; 0x4c
 8002b24:	781a      	ldrb	r2, [r3, #0]
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f006 fa70 	bl	8009010 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b30:	e0ef      	b.n	8002d12 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	78fa      	ldrb	r2, [r7, #3]
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f003 f95b 	bl	8005df6 <USB_ReadChInterrupts>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b46:	2b40      	cmp	r3, #64	; 0x40
 8002b48:	d12f      	bne.n	8002baa <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b56:	461a      	mov	r2, r3
 8002b58:	2340      	movs	r3, #64	; 0x40
 8002b5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	334d      	adds	r3, #77	; 0x4d
 8002b6c:	2205      	movs	r2, #5
 8002b6e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002b70:	78fa      	ldrb	r2, [r7, #3]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	1a9b      	subs	r3, r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	331a      	adds	r3, #26
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b86:	78fa      	ldrb	r2, [r7, #3]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	3344      	adds	r3, #68	; 0x44
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f003 fecb 	bl	800693e <USB_HC_Halt>
 8002ba8:	e0b3      	b.n	8002d12 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f003 f91f 	bl	8005df6 <USB_ReadChInterrupts>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b10      	cmp	r3, #16
 8002bc0:	f040 80a7 	bne.w	8002d12 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3326      	adds	r3, #38	; 0x26
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d11b      	bne.n	8002c12 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002bda:	78fa      	ldrb	r2, [r7, #3]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	3344      	adds	r3, #68	; 0x44
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	334d      	adds	r3, #77	; 0x4d
 8002bfe:	2204      	movs	r2, #4
 8002c00:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f003 fe97 	bl	800693e <USB_HC_Halt>
 8002c10:	e03f      	b.n	8002c92 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	3326      	adds	r3, #38	; 0x26
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c28:	78fa      	ldrb	r2, [r7, #3]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	1a9b      	subs	r3, r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	3326      	adds	r3, #38	; 0x26
 8002c38:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d129      	bne.n	8002c92 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c3e:	78fa      	ldrb	r2, [r7, #3]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	3344      	adds	r3, #68	; 0x44
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	799b      	ldrb	r3, [r3, #6]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <HCD_HC_IN_IRQHandler+0xc2a>
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	331b      	adds	r3, #27
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d110      	bne.n	8002c92 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	334d      	adds	r3, #77	; 0x4d
 8002c80:	2204      	movs	r2, #4
 8002c82:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f003 fe56 	bl	800693e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002c92:	78fa      	ldrb	r2, [r7, #3]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	1a9b      	subs	r3, r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	331b      	adds	r3, #27
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d129      	bne.n	8002cfc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	331b      	adds	r3, #27
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	0151      	lsls	r1, r2, #5
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	440a      	add	r2, r1
 8002cd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cda:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	0151      	lsls	r1, r2, #5
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	440a      	add	r2, r1
 8002cf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cf6:	f043 0320 	orr.w	r3, r3, #32
 8002cfa:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d08:	461a      	mov	r2, r3
 8002d0a:	2310      	movs	r3, #16
 8002d0c:	6093      	str	r3, [r2, #8]
 8002d0e:	e000      	b.n	8002d12 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002d10:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	78fa      	ldrb	r2, [r7, #3]
 8002d34:	4611      	mov	r1, r2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f003 f85d 	bl	8005df6 <USB_ReadChInterrupts>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d11b      	bne.n	8002d7e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002d46:	78fb      	ldrb	r3, [r7, #3]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d52:	461a      	mov	r2, r3
 8002d54:	2304      	movs	r3, #4
 8002d56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	334d      	adds	r3, #77	; 0x4d
 8002d68:	2207      	movs	r2, #7
 8002d6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	78fa      	ldrb	r2, [r7, #3]
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f003 fde2 	bl	800693e <USB_HC_Halt>
 8002d7a:	f000 bc89 	b.w	8003690 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f003 f835 	bl	8005df6 <USB_ReadChInterrupts>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	f040 8082 	bne.w	8002e9c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da4:	461a      	mov	r2, r3
 8002da6:	2320      	movs	r3, #32
 8002da8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	3319      	adds	r3, #25
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d124      	bne.n	8002e0a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002dc0:	78fa      	ldrb	r2, [r7, #3]
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	1a9b      	subs	r3, r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	3319      	adds	r3, #25
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	334c      	adds	r3, #76	; 0x4c
 8002de4:	2202      	movs	r2, #2
 8002de6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	1a9b      	subs	r3, r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	334d      	adds	r3, #77	; 0x4d
 8002df8:	2203      	movs	r2, #3
 8002dfa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f003 fd9a 	bl	800693e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	331a      	adds	r3, #26
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	f040 8437 	bne.w	8003690 <HCD_HC_OUT_IRQHandler+0x978>
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	331b      	adds	r3, #27
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f040 842b 	bne.w	8003690 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	3326      	adds	r3, #38	; 0x26
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d009      	beq.n	8002e64 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	331b      	adds	r3, #27
 8002e60:	2201      	movs	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	334d      	adds	r3, #77	; 0x4d
 8002e74:	2203      	movs	r2, #3
 8002e76:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f003 fd5c 	bl	800693e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	3344      	adds	r3, #68	; 0x44
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	e3f9      	b.n	8003690 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f002 ffa6 	bl	8005df6 <USB_ReadChInterrupts>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb4:	d111      	bne.n	8002eda <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ec8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f003 fd33 	bl	800693e <USB_HC_Halt>
 8002ed8:	e3da      	b.n	8003690 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f002 ff87 	bl	8005df6 <USB_ReadChInterrupts>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d168      	bne.n	8002fc4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	3344      	adds	r3, #68	; 0x44
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f002 ff71 	bl	8005df6 <USB_ReadChInterrupts>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1a:	2b40      	cmp	r3, #64	; 0x40
 8002f1c:	d112      	bne.n	8002f44 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	3319      	adds	r3, #25
 8002f2e:	2201      	movs	r2, #1
 8002f30:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2340      	movs	r3, #64	; 0x40
 8002f42:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	331b      	adds	r3, #27
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d019      	beq.n	8002f8e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	331b      	adds	r3, #27
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	0151      	lsls	r1, r2, #5
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	440a      	add	r2, r1
 8002f84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	334d      	adds	r3, #77	; 0x4d
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f003 fcbe 	bl	800693e <USB_HC_Halt>
 8002fc2:	e365      	b.n	8003690 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f002 ff12 	bl	8005df6 <USB_ReadChInterrupts>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d139      	bne.n	8003050 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	334d      	adds	r3, #77	; 0x4d
 8002fec:	2205      	movs	r2, #5
 8002fee:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	331a      	adds	r3, #26
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	3319      	adds	r3, #25
 8003016:	2201      	movs	r2, #1
 8003018:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800301a:	78fa      	ldrb	r2, [r7, #3]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	1a9b      	subs	r3, r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	3344      	adds	r3, #68	; 0x44
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f003 fc81 	bl	800693e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800303c:	78fb      	ldrb	r3, [r7, #3]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4413      	add	r3, r2
 8003044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003048:	461a      	mov	r2, r3
 800304a:	2340      	movs	r3, #64	; 0x40
 800304c:	6093      	str	r3, [r2, #8]
 800304e:	e31f      	b.n	8003690 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	4611      	mov	r1, r2
 8003058:	4618      	mov	r0, r3
 800305a:	f002 fecc 	bl	8005df6 <USB_ReadChInterrupts>
 800305e:	4603      	mov	r3, r0
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b08      	cmp	r3, #8
 8003066:	d11a      	bne.n	800309e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003074:	461a      	mov	r2, r3
 8003076:	2308      	movs	r3, #8
 8003078:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	334d      	adds	r3, #77	; 0x4d
 800308a:	2206      	movs	r2, #6
 800308c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	78fa      	ldrb	r2, [r7, #3]
 8003094:	4611      	mov	r1, r2
 8003096:	4618      	mov	r0, r3
 8003098:	f003 fc51 	bl	800693e <USB_HC_Halt>
 800309c:	e2f8      	b.n	8003690 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f002 fea5 	bl	8005df6 <USB_ReadChInterrupts>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	2b10      	cmp	r3, #16
 80030b4:	d144      	bne.n	8003140 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	3344      	adds	r3, #68	; 0x44
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	334d      	adds	r3, #77	; 0x4d
 80030da:	2204      	movs	r2, #4
 80030dc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	3319      	adds	r3, #25
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d114      	bne.n	800311e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	3318      	adds	r3, #24
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	3319      	adds	r3, #25
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f003 fc09 	bl	800693e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4413      	add	r3, r2
 8003134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003138:	461a      	mov	r2, r3
 800313a:	2310      	movs	r3, #16
 800313c:	6093      	str	r3, [r2, #8]
 800313e:	e2a7      	b.n	8003690 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	4611      	mov	r1, r2
 8003148:	4618      	mov	r0, r3
 800314a:	f002 fe54 	bl	8005df6 <USB_ReadChInterrupts>
 800314e:	4603      	mov	r3, r0
 8003150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003154:	2b80      	cmp	r3, #128	; 0x80
 8003156:	f040 8083 	bne.w	8003260 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	799b      	ldrb	r3, [r3, #6]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d111      	bne.n	8003186 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	334d      	adds	r3, #77	; 0x4d
 8003172:	2207      	movs	r2, #7
 8003174:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	78fa      	ldrb	r2, [r7, #3]
 800317c:	4611      	mov	r1, r2
 800317e:	4618      	mov	r0, r3
 8003180:	f003 fbdd 	bl	800693e <USB_HC_Halt>
 8003184:	e062      	b.n	800324c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	3344      	adds	r3, #68	; 0x44
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	1c59      	adds	r1, r3, #1
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	1a9b      	subs	r3, r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4403      	add	r3, r0
 80031a6:	3344      	adds	r3, #68	; 0x44
 80031a8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	3344      	adds	r3, #68	; 0x44
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d922      	bls.n	8003206 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	3344      	adds	r3, #68	; 0x44
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	334c      	adds	r3, #76	; 0x4c
 80031e4:	2204      	movs	r2, #4
 80031e6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	334c      	adds	r3, #76	; 0x4c
 80031f8:	781a      	ldrb	r2, [r3, #0]
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	4619      	mov	r1, r3
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f005 ff06 	bl	8009010 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003204:	e022      	b.n	800324c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	334c      	adds	r3, #76	; 0x4c
 8003216:	2202      	movs	r2, #2
 8003218:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800321a:	78fb      	ldrb	r3, [r7, #3]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4413      	add	r3, r2
 8003222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003230:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003238:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4413      	add	r3, r2
 8003242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003246:	461a      	mov	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4413      	add	r3, r2
 8003254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003258:	461a      	mov	r2, r3
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	6093      	str	r3, [r2, #8]
 800325e:	e217      	b.n	8003690 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	4611      	mov	r1, r2
 8003268:	4618      	mov	r0, r3
 800326a:	f002 fdc4 	bl	8005df6 <USB_ReadChInterrupts>
 800326e:	4603      	mov	r3, r0
 8003270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003278:	d11b      	bne.n	80032b2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	334d      	adds	r3, #77	; 0x4d
 800328a:	2209      	movs	r2, #9
 800328c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f003 fb51 	bl	800693e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a8:	461a      	mov	r2, r3
 80032aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032ae:	6093      	str	r3, [r2, #8]
 80032b0:	e1ee      	b.n	8003690 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	4611      	mov	r1, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f002 fd9b 	bl	8005df6 <USB_ReadChInterrupts>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	f040 81df 	bne.w	800368a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d8:	461a      	mov	r2, r3
 80032da:	2302      	movs	r3, #2
 80032dc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80032de:	78fa      	ldrb	r2, [r7, #3]
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	334d      	adds	r3, #77	; 0x4d
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	f040 8093 	bne.w	800341c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032f6:	78fa      	ldrb	r2, [r7, #3]
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	334d      	adds	r3, #77	; 0x4d
 8003306:	2202      	movs	r2, #2
 8003308:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	334c      	adds	r3, #76	; 0x4c
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	3326      	adds	r3, #38	; 0x26
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d00b      	beq.n	800334c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	3326      	adds	r3, #38	; 0x26
 8003344:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003346:	2b03      	cmp	r3, #3
 8003348:	f040 8190 	bne.w	800366c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	799b      	ldrb	r3, [r3, #6]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d115      	bne.n	8003380 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003354:	78fa      	ldrb	r2, [r7, #3]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	333d      	adds	r3, #61	; 0x3d
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	f083 0301 	eor.w	r3, r3, #1
 800336c:	b2d8      	uxtb	r0, r3
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	333d      	adds	r3, #61	; 0x3d
 800337c:	4602      	mov	r2, r0
 800337e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	799b      	ldrb	r3, [r3, #6]
 8003384:	2b01      	cmp	r3, #1
 8003386:	f040 8171 	bne.w	800366c <HCD_HC_OUT_IRQHandler+0x954>
 800338a:	78fa      	ldrb	r2, [r7, #3]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	3334      	adds	r3, #52	; 0x34
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 8165 	beq.w	800366c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	3334      	adds	r3, #52	; 0x34
 80033b2:	6819      	ldr	r1, [r3, #0]
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4403      	add	r3, r0
 80033c2:	3328      	adds	r3, #40	; 0x28
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	440b      	add	r3, r1
 80033c8:	1e59      	subs	r1, r3, #1
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4403      	add	r3, r0
 80033d8:	3328      	adds	r3, #40	; 0x28
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80033e0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 813f 	beq.w	800366c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80033ee:	78fa      	ldrb	r2, [r7, #3]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	333d      	adds	r3, #61	; 0x3d
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	f083 0301 	eor.w	r3, r3, #1
 8003406:	b2d8      	uxtb	r0, r3
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	333d      	adds	r3, #61	; 0x3d
 8003416:	4602      	mov	r2, r0
 8003418:	701a      	strb	r2, [r3, #0]
 800341a:	e127      	b.n	800366c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800341c:	78fa      	ldrb	r2, [r7, #3]
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	1a9b      	subs	r3, r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	334d      	adds	r3, #77	; 0x4d
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b03      	cmp	r3, #3
 8003430:	d120      	bne.n	8003474 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	334d      	adds	r3, #77	; 0x4d
 8003442:	2202      	movs	r2, #2
 8003444:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	331b      	adds	r3, #27
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b01      	cmp	r3, #1
 800345a:	f040 8107 	bne.w	800366c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	334c      	adds	r3, #76	; 0x4c
 800346e:	2202      	movs	r2, #2
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	e0fb      	b.n	800366c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	334d      	adds	r3, #77	; 0x4d
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b04      	cmp	r3, #4
 8003488:	d13a      	bne.n	8003500 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	334d      	adds	r3, #77	; 0x4d
 800349a:	2202      	movs	r2, #2
 800349c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	334c      	adds	r3, #76	; 0x4c
 80034ae:	2202      	movs	r2, #2
 80034b0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80034b2:	78fa      	ldrb	r2, [r7, #3]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	331b      	adds	r3, #27
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	f040 80d1 	bne.w	800366c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	331b      	adds	r3, #27
 80034da:	2200      	movs	r2, #0
 80034dc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	0151      	lsls	r1, r2, #5
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	440a      	add	r2, r1
 80034f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034fc:	6053      	str	r3, [r2, #4]
 80034fe:	e0b5      	b.n	800366c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	334d      	adds	r3, #77	; 0x4d
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b05      	cmp	r3, #5
 8003514:	d114      	bne.n	8003540 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	334d      	adds	r3, #77	; 0x4d
 8003526:	2202      	movs	r2, #2
 8003528:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800352a:	78fa      	ldrb	r2, [r7, #3]
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	1a9b      	subs	r3, r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	334c      	adds	r3, #76	; 0x4c
 800353a:	2202      	movs	r2, #2
 800353c:	701a      	strb	r2, [r3, #0]
 800353e:	e095      	b.n	800366c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003540:	78fa      	ldrb	r2, [r7, #3]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	334d      	adds	r3, #77	; 0x4d
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b06      	cmp	r3, #6
 8003554:	d114      	bne.n	8003580 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003556:	78fa      	ldrb	r2, [r7, #3]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	334d      	adds	r3, #77	; 0x4d
 8003566:	2202      	movs	r2, #2
 8003568:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	334c      	adds	r3, #76	; 0x4c
 800357a:	2205      	movs	r2, #5
 800357c:	701a      	strb	r2, [r3, #0]
 800357e:	e075      	b.n	800366c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003580:	78fa      	ldrb	r2, [r7, #3]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	334d      	adds	r3, #77	; 0x4d
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b07      	cmp	r3, #7
 8003594:	d00a      	beq.n	80035ac <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	334d      	adds	r3, #77	; 0x4d
 80035a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80035a8:	2b09      	cmp	r3, #9
 80035aa:	d170      	bne.n	800368e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035ac:	78fa      	ldrb	r2, [r7, #3]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	334d      	adds	r3, #77	; 0x4d
 80035bc:	2202      	movs	r2, #2
 80035be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80035c0:	78fa      	ldrb	r2, [r7, #3]
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	3344      	adds	r3, #68	; 0x44
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	1c59      	adds	r1, r3, #1
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4403      	add	r3, r0
 80035e0:	3344      	adds	r3, #68	; 0x44
 80035e2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035e4:	78fa      	ldrb	r2, [r7, #3]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	3344      	adds	r3, #68	; 0x44
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d914      	bls.n	8003624 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	3344      	adds	r3, #68	; 0x44
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800360e:	78fa      	ldrb	r2, [r7, #3]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	1a9b      	subs	r3, r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	334c      	adds	r3, #76	; 0x4c
 800361e:	2204      	movs	r2, #4
 8003620:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003622:	e022      	b.n	800366a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003624:	78fa      	ldrb	r2, [r7, #3]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	334c      	adds	r3, #76	; 0x4c
 8003634:	2202      	movs	r2, #2
 8003636:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4413      	add	r3, r2
 8003640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800364e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003656:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4413      	add	r3, r2
 8003660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003664:	461a      	mov	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800366a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800366c:	78fa      	ldrb	r2, [r7, #3]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	334c      	adds	r3, #76	; 0x4c
 800367c:	781a      	ldrb	r2, [r3, #0]
 800367e:	78fb      	ldrb	r3, [r7, #3]
 8003680:	4619      	mov	r1, r3
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f005 fcc4 	bl	8009010 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003688:	e002      	b.n	8003690 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800368a:	bf00      	nop
 800368c:	e000      	b.n	8003690 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800368e:	bf00      	nop
  }
}
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b08a      	sub	sp, #40	; 0x28
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	0c5b      	lsrs	r3, r3, #17
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	091b      	lsrs	r3, r3, #4
 80036c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036ca:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d004      	beq.n	80036dc <HCD_RXQLVL_IRQHandler+0x46>
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b05      	cmp	r3, #5
 80036d6:	f000 80b6 	beq.w	8003846 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80036da:	e0b7      	b.n	800384c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 80b3 	beq.w	800384a <HCD_RXQLVL_IRQHandler+0x1b4>
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4613      	mov	r3, r2
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	332c      	adds	r3, #44	; 0x2c
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 80a7 	beq.w	800384a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4613      	mov	r3, r2
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	1a9b      	subs	r3, r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	3338      	adds	r3, #56	; 0x38
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	18d1      	adds	r1, r2, r3
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4613      	mov	r3, r2
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4403      	add	r3, r0
 8003720:	3334      	adds	r3, #52	; 0x34
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4299      	cmp	r1, r3
 8003726:	f200 8083 	bhi.w	8003830 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4613      	mov	r3, r2
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	332c      	adds	r3, #44	; 0x2c
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	b292      	uxth	r2, r2
 8003744:	4619      	mov	r1, r3
 8003746:	f002 faeb 	bl	8005d20 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4613      	mov	r3, r2
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	332c      	adds	r3, #44	; 0x2c
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	18d1      	adds	r1, r2, r3
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4613      	mov	r3, r2
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4403      	add	r3, r0
 800376e:	332c      	adds	r3, #44	; 0x2c
 8003770:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4613      	mov	r3, r2
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	3338      	adds	r3, #56	; 0x38
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	18d1      	adds	r1, r2, r3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4613      	mov	r3, r2
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4403      	add	r3, r0
 8003796:	3338      	adds	r3, #56	; 0x38
 8003798:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	0cdb      	lsrs	r3, r3, #19
 80037aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037ae:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4613      	mov	r3, r2
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	3328      	adds	r3, #40	; 0x28
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d13f      	bne.n	800384a <HCD_RXQLVL_IRQHandler+0x1b4>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d03c      	beq.n	800384a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037e6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037ee:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fc:	461a      	mov	r2, r3
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4613      	mov	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	333c      	adds	r3, #60	; 0x3c
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	f083 0301 	eor.w	r3, r3, #1
 8003818:	b2d8      	uxtb	r0, r3
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4613      	mov	r3, r2
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	333c      	adds	r3, #60	; 0x3c
 800382a:	4602      	mov	r2, r0
 800382c:	701a      	strb	r2, [r3, #0]
      break;
 800382e:	e00c      	b.n	800384a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4613      	mov	r3, r2
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	334c      	adds	r3, #76	; 0x4c
 8003840:	2204      	movs	r2, #4
 8003842:	701a      	strb	r2, [r3, #0]
      break;
 8003844:	e001      	b.n	800384a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003846:	bf00      	nop
 8003848:	e000      	b.n	800384c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800384a:	bf00      	nop
  }
}
 800384c:	bf00      	nop
 800384e:	3728      	adds	r7, #40	; 0x28
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003880:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b02      	cmp	r3, #2
 800388a:	d10b      	bne.n	80038a4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b01      	cmp	r3, #1
 8003894:	d102      	bne.n	800389c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f005 fb9e 	bl	8008fd8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f043 0302 	orr.w	r3, r3, #2
 80038a2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d132      	bne.n	8003914 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f043 0308 	orr.w	r3, r3, #8
 80038b4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d126      	bne.n	800390e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	7a5b      	ldrb	r3, [r3, #9]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d113      	bne.n	80038f0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80038ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038d2:	d106      	bne.n	80038e2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2102      	movs	r1, #2
 80038da:	4618      	mov	r0, r3
 80038dc:	f002 fbb0 	bl	8006040 <USB_InitFSLSPClkSel>
 80038e0:	e011      	b.n	8003906 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2101      	movs	r1, #1
 80038e8:	4618      	mov	r0, r3
 80038ea:	f002 fba9 	bl	8006040 <USB_InitFSLSPClkSel>
 80038ee:	e00a      	b.n	8003906 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	79db      	ldrb	r3, [r3, #7]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d106      	bne.n	8003906 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038fe:	461a      	mov	r2, r3
 8003900:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003904:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f005 fb90 	bl	800902c <HAL_HCD_PortEnabled_Callback>
 800390c:	e002      	b.n	8003914 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f005 fb9a 	bl	8009048 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 0320 	and.w	r3, r3, #32
 800391a:	2b20      	cmp	r3, #32
 800391c:	d103      	bne.n	8003926 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	f043 0320 	orr.w	r3, r3, #32
 8003924:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800392c:	461a      	mov	r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	6013      	str	r3, [r2, #0]
}
 8003932:	bf00      	nop
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e12b      	b.n	8003ba6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fd f88c 	bl	8000a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2224      	movs	r2, #36	; 0x24
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800398e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800399e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039a0:	f001 fa20 	bl	8004de4 <HAL_RCC_GetPCLK1Freq>
 80039a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4a81      	ldr	r2, [pc, #516]	; (8003bb0 <HAL_I2C_Init+0x274>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d807      	bhi.n	80039c0 <HAL_I2C_Init+0x84>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4a80      	ldr	r2, [pc, #512]	; (8003bb4 <HAL_I2C_Init+0x278>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	bf94      	ite	ls
 80039b8:	2301      	movls	r3, #1
 80039ba:	2300      	movhi	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	e006      	b.n	80039ce <HAL_I2C_Init+0x92>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4a7d      	ldr	r2, [pc, #500]	; (8003bb8 <HAL_I2C_Init+0x27c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	bf94      	ite	ls
 80039c8:	2301      	movls	r3, #1
 80039ca:	2300      	movhi	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e0e7      	b.n	8003ba6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4a78      	ldr	r2, [pc, #480]	; (8003bbc <HAL_I2C_Init+0x280>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	0c9b      	lsrs	r3, r3, #18
 80039e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	4a6a      	ldr	r2, [pc, #424]	; (8003bb0 <HAL_I2C_Init+0x274>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d802      	bhi.n	8003a10 <HAL_I2C_Init+0xd4>
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	e009      	b.n	8003a24 <HAL_I2C_Init+0xe8>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	4a69      	ldr	r2, [pc, #420]	; (8003bc0 <HAL_I2C_Init+0x284>)
 8003a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a20:	099b      	lsrs	r3, r3, #6
 8003a22:	3301      	adds	r3, #1
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	495c      	ldr	r1, [pc, #368]	; (8003bb0 <HAL_I2C_Init+0x274>)
 8003a40:	428b      	cmp	r3, r1
 8003a42:	d819      	bhi.n	8003a78 <HAL_I2C_Init+0x13c>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	1e59      	subs	r1, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a52:	1c59      	adds	r1, r3, #1
 8003a54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a58:	400b      	ands	r3, r1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_I2C_Init+0x138>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1e59      	subs	r1, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a72:	e051      	b.n	8003b18 <HAL_I2C_Init+0x1dc>
 8003a74:	2304      	movs	r3, #4
 8003a76:	e04f      	b.n	8003b18 <HAL_I2C_Init+0x1dc>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d111      	bne.n	8003aa4 <HAL_I2C_Init+0x168>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	1e58      	subs	r0, r3, #1
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	440b      	add	r3, r1
 8003a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a92:	3301      	adds	r3, #1
 8003a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf0c      	ite	eq
 8003a9c:	2301      	moveq	r3, #1
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	e012      	b.n	8003aca <HAL_I2C_Init+0x18e>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1e58      	subs	r0, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	0099      	lsls	r1, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aba:	3301      	adds	r3, #1
 8003abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	bf0c      	ite	eq
 8003ac4:	2301      	moveq	r3, #1
 8003ac6:	2300      	movne	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_I2C_Init+0x196>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e022      	b.n	8003b18 <HAL_I2C_Init+0x1dc>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10e      	bne.n	8003af8 <HAL_I2C_Init+0x1bc>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1e58      	subs	r0, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6859      	ldr	r1, [r3, #4]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	440b      	add	r3, r1
 8003ae8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aec:	3301      	adds	r3, #1
 8003aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af6:	e00f      	b.n	8003b18 <HAL_I2C_Init+0x1dc>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1e58      	subs	r0, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6859      	ldr	r1, [r3, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	0099      	lsls	r1, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b0e:	3301      	adds	r3, #1
 8003b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	6809      	ldr	r1, [r1, #0]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69da      	ldr	r2, [r3, #28]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6911      	ldr	r1, [r2, #16]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	68d2      	ldr	r2, [r2, #12]
 8003b52:	4311      	orrs	r1, r2
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6812      	ldr	r2, [r2, #0]
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	000186a0 	.word	0x000186a0
 8003bb4:	001e847f 	.word	0x001e847f
 8003bb8:	003d08ff 	.word	0x003d08ff
 8003bbc:	431bde83 	.word	0x431bde83
 8003bc0:	10624dd3 	.word	0x10624dd3

08003bc4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e128      	b.n	8003e28 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d109      	bne.n	8003bf6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a90      	ldr	r2, [pc, #576]	; (8003e30 <HAL_I2S_Init+0x26c>)
 8003bee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7fc ff8d 	bl	8000b10 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003c0c:	f023 030f 	bic.w	r3, r3, #15
 8003c10:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2202      	movs	r2, #2
 8003c18:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d060      	beq.n	8003ce4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d102      	bne.n	8003c30 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003c2a:	2310      	movs	r3, #16
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	e001      	b.n	8003c34 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003c30:	2320      	movs	r3, #32
 8003c32:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d802      	bhi.n	8003c42 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003c42:	2001      	movs	r0, #1
 8003c44:	f001 f9d8 	bl	8004ff8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c48:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c52:	d125      	bne.n	8003ca0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d010      	beq.n	8003c7e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	461a      	mov	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c78:	3305      	adds	r3, #5
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	e01f      	b.n	8003cbe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	461a      	mov	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9a:	3305      	adds	r3, #5
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	e00e      	b.n	8003cbe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cba:	3305      	adds	r3, #5
 8003cbc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	4a5c      	ldr	r2, [pc, #368]	; (8003e34 <HAL_I2S_Init+0x270>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	08db      	lsrs	r3, r3, #3
 8003cc8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	61bb      	str	r3, [r7, #24]
 8003ce2:	e003      	b.n	8003cec <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d902      	bls.n	8003cf8 <HAL_I2S_Init+0x134>
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	2bff      	cmp	r3, #255	; 0xff
 8003cf6:	d907      	bls.n	8003d08 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfc:	f043 0210 	orr.w	r2, r3, #16
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e08f      	b.n	8003e28 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	ea42 0103 	orr.w	r1, r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d26:	f023 030f 	bic.w	r3, r3, #15
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6851      	ldr	r1, [r2, #4]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6892      	ldr	r2, [r2, #8]
 8003d32:	4311      	orrs	r1, r2
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	68d2      	ldr	r2, [r2, #12]
 8003d38:	4311      	orrs	r1, r2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6992      	ldr	r2, [r2, #24]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d4a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d161      	bne.n	8003e18 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a38      	ldr	r2, [pc, #224]	; (8003e38 <HAL_I2S_Init+0x274>)
 8003d58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a37      	ldr	r2, [pc, #220]	; (8003e3c <HAL_I2S_Init+0x278>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d101      	bne.n	8003d68 <HAL_I2S_Init+0x1a4>
 8003d64:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <HAL_I2S_Init+0x27c>)
 8003d66:	e001      	b.n	8003d6c <HAL_I2S_Init+0x1a8>
 8003d68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	4932      	ldr	r1, [pc, #200]	; (8003e3c <HAL_I2S_Init+0x278>)
 8003d74:	428a      	cmp	r2, r1
 8003d76:	d101      	bne.n	8003d7c <HAL_I2S_Init+0x1b8>
 8003d78:	4a31      	ldr	r2, [pc, #196]	; (8003e40 <HAL_I2S_Init+0x27c>)
 8003d7a:	e001      	b.n	8003d80 <HAL_I2S_Init+0x1bc>
 8003d7c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003d80:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d84:	f023 030f 	bic.w	r3, r3, #15
 8003d88:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a2b      	ldr	r2, [pc, #172]	; (8003e3c <HAL_I2S_Init+0x278>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d101      	bne.n	8003d98 <HAL_I2S_Init+0x1d4>
 8003d94:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <HAL_I2S_Init+0x27c>)
 8003d96:	e001      	b.n	8003d9c <HAL_I2S_Init+0x1d8>
 8003d98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a25      	ldr	r2, [pc, #148]	; (8003e3c <HAL_I2S_Init+0x278>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d101      	bne.n	8003dae <HAL_I2S_Init+0x1ea>
 8003daa:	4b25      	ldr	r3, [pc, #148]	; (8003e40 <HAL_I2S_Init+0x27c>)
 8003dac:	e001      	b.n	8003db2 <HAL_I2S_Init+0x1ee>
 8003dae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dbe:	d003      	beq.n	8003dc8 <HAL_I2S_Init+0x204>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d103      	bne.n	8003dd0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	e001      	b.n	8003dd4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003dde:	4313      	orrs	r3, r2
 8003de0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003de8:	4313      	orrs	r3, r2
 8003dea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003df2:	4313      	orrs	r3, r2
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	897b      	ldrh	r3, [r7, #10]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e00:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a0d      	ldr	r2, [pc, #52]	; (8003e3c <HAL_I2S_Init+0x278>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d101      	bne.n	8003e10 <HAL_I2S_Init+0x24c>
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <HAL_I2S_Init+0x27c>)
 8003e0e:	e001      	b.n	8003e14 <HAL_I2S_Init+0x250>
 8003e10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e14:	897a      	ldrh	r2, [r7, #10]
 8003e16:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3720      	adds	r7, #32
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	08003f3b 	.word	0x08003f3b
 8003e34:	cccccccd 	.word	0xcccccccd
 8003e38:	08004051 	.word	0x08004051
 8003e3c:	40003800 	.word	0x40003800
 8003e40:	40003400 	.word	0x40003400

08003e44 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	881a      	ldrh	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	1c9a      	adds	r2, r3, #2
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10e      	bne.n	8003ed4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ec4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff ffb8 	bl	8003e44 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	b292      	uxth	r2, r2
 8003ef0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	1c9a      	adds	r2, r3, #2
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10e      	bne.n	8003f32 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f22:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7ff ff93 	bl	8003e58 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b086      	sub	sp, #24
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d13a      	bne.n	8003fcc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d109      	bne.n	8003f74 <I2S_IRQHandler+0x3a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6a:	2b40      	cmp	r3, #64	; 0x40
 8003f6c:	d102      	bne.n	8003f74 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff ffb4 	bl	8003edc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7a:	2b40      	cmp	r3, #64	; 0x40
 8003f7c:	d126      	bne.n	8003fcc <I2S_IRQHandler+0x92>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b20      	cmp	r3, #32
 8003f8a:	d11f      	bne.n	8003fcc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f9a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbe:	f043 0202 	orr.w	r2, r3, #2
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff ff50 	bl	8003e6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b03      	cmp	r3, #3
 8003fd6:	d136      	bne.n	8004046 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d109      	bne.n	8003ff6 <I2S_IRQHandler+0xbc>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fec:	2b80      	cmp	r3, #128	; 0x80
 8003fee:	d102      	bne.n	8003ff6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff ff45 	bl	8003e80 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d122      	bne.n	8004046 <I2S_IRQHandler+0x10c>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b20      	cmp	r3, #32
 800400c:	d11b      	bne.n	8004046 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800401c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004038:	f043 0204 	orr.w	r2, r3, #4
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff ff13 	bl	8003e6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004046:	bf00      	nop
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a92      	ldr	r2, [pc, #584]	; (80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d101      	bne.n	800406e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800406a:	4b92      	ldr	r3, [pc, #584]	; (80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800406c:	e001      	b.n	8004072 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800406e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a8b      	ldr	r2, [pc, #556]	; (80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d101      	bne.n	800408c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004088:	4b8a      	ldr	r3, [pc, #552]	; (80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800408a:	e001      	b.n	8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800408c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800409c:	d004      	beq.n	80040a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f040 8099 	bne.w	80041da <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d107      	bne.n	80040c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f925 	bl	800430c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d107      	bne.n	80040dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f9c8 	bl	800446c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e2:	2b40      	cmp	r3, #64	; 0x40
 80040e4:	d13a      	bne.n	800415c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f003 0320 	and.w	r3, r3, #32
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d035      	beq.n	800415c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a6e      	ldr	r2, [pc, #440]	; (80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d101      	bne.n	80040fe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80040fa:	4b6e      	ldr	r3, [pc, #440]	; (80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040fc:	e001      	b.n	8004102 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80040fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4969      	ldr	r1, [pc, #420]	; (80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800410a:	428b      	cmp	r3, r1
 800410c:	d101      	bne.n	8004112 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800410e:	4b69      	ldr	r3, [pc, #420]	; (80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004110:	e001      	b.n	8004116 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004112:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004116:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800411a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800412a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	f043 0202 	orr.w	r2, r3, #2
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff fe88 	bl	8003e6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b08      	cmp	r3, #8
 8004164:	f040 80c3 	bne.w	80042ee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 80bd 	beq.w	80042ee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004182:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a49      	ldr	r2, [pc, #292]	; (80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d101      	bne.n	8004192 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800418e:	4b49      	ldr	r3, [pc, #292]	; (80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004190:	e001      	b.n	8004196 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004192:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4944      	ldr	r1, [pc, #272]	; (80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800419e:	428b      	cmp	r3, r1
 80041a0:	d101      	bne.n	80041a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80041a2:	4b44      	ldr	r3, [pc, #272]	; (80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041a4:	e001      	b.n	80041aa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80041a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041ae:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80041b0:	2300      	movs	r3, #0
 80041b2:	60bb      	str	r3, [r7, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	60bb      	str	r3, [r7, #8]
 80041bc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ca:	f043 0204 	orr.w	r2, r3, #4
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7ff fe4a 	bl	8003e6c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041d8:	e089      	b.n	80042ee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d107      	bne.n	80041f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f8be 	bl	8004370 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d107      	bne.n	800420e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f8fd 	bl	8004408 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004214:	2b40      	cmp	r3, #64	; 0x40
 8004216:	d12f      	bne.n	8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d02a      	beq.n	8004278 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004230:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a1e      	ldr	r2, [pc, #120]	; (80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d101      	bne.n	8004240 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800423c:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800423e:	e001      	b.n	8004244 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004240:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4919      	ldr	r1, [pc, #100]	; (80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800424c:	428b      	cmp	r3, r1
 800424e:	d101      	bne.n	8004254 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004250:	4b18      	ldr	r3, [pc, #96]	; (80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004252:	e001      	b.n	8004258 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004254:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004258:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800425c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426a:	f043 0202 	orr.w	r2, r3, #2
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff fdfa 	bl	8003e6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b08      	cmp	r3, #8
 8004280:	d136      	bne.n	80042f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b00      	cmp	r3, #0
 800428a:	d031      	beq.n	80042f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a07      	ldr	r2, [pc, #28]	; (80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d101      	bne.n	800429a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004296:	4b07      	ldr	r3, [pc, #28]	; (80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004298:	e001      	b.n	800429e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800429a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4902      	ldr	r1, [pc, #8]	; (80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042a6:	428b      	cmp	r3, r1
 80042a8:	d106      	bne.n	80042b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80042aa:	4b02      	ldr	r3, [pc, #8]	; (80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042ac:	e006      	b.n	80042bc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80042ae:	bf00      	nop
 80042b0:	40003800 	.word	0x40003800
 80042b4:	40003400 	.word	0x40003400
 80042b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042c0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042d0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	f043 0204 	orr.w	r2, r3, #4
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff fdc0 	bl	8003e6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042ec:	e000      	b.n	80042f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042ee:	bf00      	nop
}
 80042f0:	bf00      	nop
 80042f2:	3720      	adds	r7, #32
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	1c99      	adds	r1, r3, #2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6251      	str	r1, [r2, #36]	; 0x24
 800431e:	881a      	ldrh	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d113      	bne.n	8004366 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800434c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d106      	bne.n	8004366 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff ffc9 	bl	80042f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	1c99      	adds	r1, r3, #2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6251      	str	r1, [r2, #36]	; 0x24
 8004382:	8819      	ldrh	r1, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1d      	ldr	r2, [pc, #116]	; (8004400 <I2SEx_TxISR_I2SExt+0x90>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d101      	bne.n	8004392 <I2SEx_TxISR_I2SExt+0x22>
 800438e:	4b1d      	ldr	r3, [pc, #116]	; (8004404 <I2SEx_TxISR_I2SExt+0x94>)
 8004390:	e001      	b.n	8004396 <I2SEx_TxISR_I2SExt+0x26>
 8004392:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004396:	460a      	mov	r2, r1
 8004398:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d121      	bne.n	80043f6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a12      	ldr	r2, [pc, #72]	; (8004400 <I2SEx_TxISR_I2SExt+0x90>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d101      	bne.n	80043c0 <I2SEx_TxISR_I2SExt+0x50>
 80043bc:	4b11      	ldr	r3, [pc, #68]	; (8004404 <I2SEx_TxISR_I2SExt+0x94>)
 80043be:	e001      	b.n	80043c4 <I2SEx_TxISR_I2SExt+0x54>
 80043c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	490d      	ldr	r1, [pc, #52]	; (8004400 <I2SEx_TxISR_I2SExt+0x90>)
 80043cc:	428b      	cmp	r3, r1
 80043ce:	d101      	bne.n	80043d4 <I2SEx_TxISR_I2SExt+0x64>
 80043d0:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <I2SEx_TxISR_I2SExt+0x94>)
 80043d2:	e001      	b.n	80043d8 <I2SEx_TxISR_I2SExt+0x68>
 80043d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d106      	bne.n	80043f6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff ff81 	bl	80042f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40003800 	.word	0x40003800
 8004404:	40003400 	.word	0x40003400

08004408 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68d8      	ldr	r0, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	1c99      	adds	r1, r3, #2
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004420:	b282      	uxth	r2, r0
 8004422:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004428:	b29b      	uxth	r3, r3
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d113      	bne.n	8004464 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800444a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff ff4a 	bl	80042f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004464:	bf00      	nop
 8004466:	3708      	adds	r7, #8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a20      	ldr	r2, [pc, #128]	; (80044fc <I2SEx_RxISR_I2SExt+0x90>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d101      	bne.n	8004482 <I2SEx_RxISR_I2SExt+0x16>
 800447e:	4b20      	ldr	r3, [pc, #128]	; (8004500 <I2SEx_RxISR_I2SExt+0x94>)
 8004480:	e001      	b.n	8004486 <I2SEx_RxISR_I2SExt+0x1a>
 8004482:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004486:	68d8      	ldr	r0, [r3, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	1c99      	adds	r1, r3, #2
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004492:	b282      	uxth	r2, r0
 8004494:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d121      	bne.n	80044f2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a12      	ldr	r2, [pc, #72]	; (80044fc <I2SEx_RxISR_I2SExt+0x90>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d101      	bne.n	80044bc <I2SEx_RxISR_I2SExt+0x50>
 80044b8:	4b11      	ldr	r3, [pc, #68]	; (8004500 <I2SEx_RxISR_I2SExt+0x94>)
 80044ba:	e001      	b.n	80044c0 <I2SEx_RxISR_I2SExt+0x54>
 80044bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	490d      	ldr	r1, [pc, #52]	; (80044fc <I2SEx_RxISR_I2SExt+0x90>)
 80044c8:	428b      	cmp	r3, r1
 80044ca:	d101      	bne.n	80044d0 <I2SEx_RxISR_I2SExt+0x64>
 80044cc:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <I2SEx_RxISR_I2SExt+0x94>)
 80044ce:	e001      	b.n	80044d4 <I2SEx_RxISR_I2SExt+0x68>
 80044d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044d8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d106      	bne.n	80044f2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff ff03 	bl	80042f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044f2:	bf00      	nop
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40003800 	.word	0x40003800
 8004500:	40003400 	.word	0x40003400

08004504 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e267      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d075      	beq.n	800460e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004522:	4b88      	ldr	r3, [pc, #544]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b04      	cmp	r3, #4
 800452c:	d00c      	beq.n	8004548 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800452e:	4b85      	ldr	r3, [pc, #532]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004536:	2b08      	cmp	r3, #8
 8004538:	d112      	bne.n	8004560 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800453a:	4b82      	ldr	r3, [pc, #520]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004546:	d10b      	bne.n	8004560 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004548:	4b7e      	ldr	r3, [pc, #504]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d05b      	beq.n	800460c <HAL_RCC_OscConfig+0x108>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d157      	bne.n	800460c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e242      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004568:	d106      	bne.n	8004578 <HAL_RCC_OscConfig+0x74>
 800456a:	4b76      	ldr	r3, [pc, #472]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a75      	ldr	r2, [pc, #468]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	e01d      	b.n	80045b4 <HAL_RCC_OscConfig+0xb0>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004580:	d10c      	bne.n	800459c <HAL_RCC_OscConfig+0x98>
 8004582:	4b70      	ldr	r3, [pc, #448]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a6f      	ldr	r2, [pc, #444]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	4b6d      	ldr	r3, [pc, #436]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a6c      	ldr	r2, [pc, #432]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	e00b      	b.n	80045b4 <HAL_RCC_OscConfig+0xb0>
 800459c:	4b69      	ldr	r3, [pc, #420]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a68      	ldr	r2, [pc, #416]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 80045a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	4b66      	ldr	r3, [pc, #408]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a65      	ldr	r2, [pc, #404]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 80045ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d013      	beq.n	80045e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045bc:	f7fc fd92 	bl	80010e4 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c4:	f7fc fd8e 	bl	80010e4 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b64      	cmp	r3, #100	; 0x64
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e207      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d6:	4b5b      	ldr	r3, [pc, #364]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0f0      	beq.n	80045c4 <HAL_RCC_OscConfig+0xc0>
 80045e2:	e014      	b.n	800460e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e4:	f7fc fd7e 	bl	80010e4 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045ec:	f7fc fd7a 	bl	80010e4 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b64      	cmp	r3, #100	; 0x64
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e1f3      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fe:	4b51      	ldr	r3, [pc, #324]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0xe8>
 800460a:	e000      	b.n	800460e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800460c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d063      	beq.n	80046e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800461a:	4b4a      	ldr	r3, [pc, #296]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00b      	beq.n	800463e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004626:	4b47      	ldr	r3, [pc, #284]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800462e:	2b08      	cmp	r3, #8
 8004630:	d11c      	bne.n	800466c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004632:	4b44      	ldr	r3, [pc, #272]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d116      	bne.n	800466c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463e:	4b41      	ldr	r3, [pc, #260]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <HAL_RCC_OscConfig+0x152>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d001      	beq.n	8004656 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e1c7      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004656:	4b3b      	ldr	r3, [pc, #236]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4937      	ldr	r1, [pc, #220]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004666:	4313      	orrs	r3, r2
 8004668:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800466a:	e03a      	b.n	80046e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d020      	beq.n	80046b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004674:	4b34      	ldr	r3, [pc, #208]	; (8004748 <HAL_RCC_OscConfig+0x244>)
 8004676:	2201      	movs	r2, #1
 8004678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467a:	f7fc fd33 	bl	80010e4 <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004682:	f7fc fd2f 	bl	80010e4 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e1a8      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004694:	4b2b      	ldr	r3, [pc, #172]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0f0      	beq.n	8004682 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a0:	4b28      	ldr	r3, [pc, #160]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	4925      	ldr	r1, [pc, #148]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	600b      	str	r3, [r1, #0]
 80046b4:	e015      	b.n	80046e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046b6:	4b24      	ldr	r3, [pc, #144]	; (8004748 <HAL_RCC_OscConfig+0x244>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046bc:	f7fc fd12 	bl	80010e4 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c4:	f7fc fd0e 	bl	80010e4 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e187      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d6:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f0      	bne.n	80046c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d036      	beq.n	800475c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d016      	beq.n	8004724 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046f6:	4b15      	ldr	r3, [pc, #84]	; (800474c <HAL_RCC_OscConfig+0x248>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fc:	f7fc fcf2 	bl	80010e4 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004704:	f7fc fcee 	bl	80010e4 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e167      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004716:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCC_OscConfig+0x200>
 8004722:	e01b      	b.n	800475c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <HAL_RCC_OscConfig+0x248>)
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800472a:	f7fc fcdb 	bl	80010e4 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004730:	e00e      	b.n	8004750 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004732:	f7fc fcd7 	bl	80010e4 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d907      	bls.n	8004750 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e150      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
 8004744:	40023800 	.word	0x40023800
 8004748:	42470000 	.word	0x42470000
 800474c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004750:	4b88      	ldr	r3, [pc, #544]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1ea      	bne.n	8004732 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8097 	beq.w	8004898 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800476a:	2300      	movs	r3, #0
 800476c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800476e:	4b81      	ldr	r3, [pc, #516]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10f      	bne.n	800479a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800477a:	2300      	movs	r3, #0
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	4b7d      	ldr	r3, [pc, #500]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	4a7c      	ldr	r2, [pc, #496]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004788:	6413      	str	r3, [r2, #64]	; 0x40
 800478a:	4b7a      	ldr	r3, [pc, #488]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004792:	60bb      	str	r3, [r7, #8]
 8004794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004796:	2301      	movs	r3, #1
 8004798:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479a:	4b77      	ldr	r3, [pc, #476]	; (8004978 <HAL_RCC_OscConfig+0x474>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d118      	bne.n	80047d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047a6:	4b74      	ldr	r3, [pc, #464]	; (8004978 <HAL_RCC_OscConfig+0x474>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a73      	ldr	r2, [pc, #460]	; (8004978 <HAL_RCC_OscConfig+0x474>)
 80047ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047b2:	f7fc fc97 	bl	80010e4 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ba:	f7fc fc93 	bl	80010e4 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e10c      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047cc:	4b6a      	ldr	r3, [pc, #424]	; (8004978 <HAL_RCC_OscConfig+0x474>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f0      	beq.n	80047ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d106      	bne.n	80047ee <HAL_RCC_OscConfig+0x2ea>
 80047e0:	4b64      	ldr	r3, [pc, #400]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e4:	4a63      	ldr	r2, [pc, #396]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 80047e6:	f043 0301 	orr.w	r3, r3, #1
 80047ea:	6713      	str	r3, [r2, #112]	; 0x70
 80047ec:	e01c      	b.n	8004828 <HAL_RCC_OscConfig+0x324>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b05      	cmp	r3, #5
 80047f4:	d10c      	bne.n	8004810 <HAL_RCC_OscConfig+0x30c>
 80047f6:	4b5f      	ldr	r3, [pc, #380]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 80047f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fa:	4a5e      	ldr	r2, [pc, #376]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 80047fc:	f043 0304 	orr.w	r3, r3, #4
 8004800:	6713      	str	r3, [r2, #112]	; 0x70
 8004802:	4b5c      	ldr	r3, [pc, #368]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	4a5b      	ldr	r2, [pc, #364]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004808:	f043 0301 	orr.w	r3, r3, #1
 800480c:	6713      	str	r3, [r2, #112]	; 0x70
 800480e:	e00b      	b.n	8004828 <HAL_RCC_OscConfig+0x324>
 8004810:	4b58      	ldr	r3, [pc, #352]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004814:	4a57      	ldr	r2, [pc, #348]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004816:	f023 0301 	bic.w	r3, r3, #1
 800481a:	6713      	str	r3, [r2, #112]	; 0x70
 800481c:	4b55      	ldr	r3, [pc, #340]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 800481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004820:	4a54      	ldr	r2, [pc, #336]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004822:	f023 0304 	bic.w	r3, r3, #4
 8004826:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d015      	beq.n	800485c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004830:	f7fc fc58 	bl	80010e4 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004836:	e00a      	b.n	800484e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004838:	f7fc fc54 	bl	80010e4 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	; 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e0cb      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800484e:	4b49      	ldr	r3, [pc, #292]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0ee      	beq.n	8004838 <HAL_RCC_OscConfig+0x334>
 800485a:	e014      	b.n	8004886 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800485c:	f7fc fc42 	bl	80010e4 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004862:	e00a      	b.n	800487a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004864:	f7fc fc3e 	bl	80010e4 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e0b5      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800487a:	4b3e      	ldr	r3, [pc, #248]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1ee      	bne.n	8004864 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004886:	7dfb      	ldrb	r3, [r7, #23]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d105      	bne.n	8004898 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800488c:	4b39      	ldr	r3, [pc, #228]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	4a38      	ldr	r2, [pc, #224]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004896:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80a1 	beq.w	80049e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048a2:	4b34      	ldr	r3, [pc, #208]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d05c      	beq.n	8004968 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d141      	bne.n	800493a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b6:	4b31      	ldr	r3, [pc, #196]	; (800497c <HAL_RCC_OscConfig+0x478>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048bc:	f7fc fc12 	bl	80010e4 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c4:	f7fc fc0e 	bl	80010e4 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e087      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d6:	4b27      	ldr	r3, [pc, #156]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69da      	ldr	r2, [r3, #28]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	019b      	lsls	r3, r3, #6
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	085b      	lsrs	r3, r3, #1
 80048fa:	3b01      	subs	r3, #1
 80048fc:	041b      	lsls	r3, r3, #16
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	061b      	lsls	r3, r3, #24
 8004906:	491b      	ldr	r1, [pc, #108]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004908:	4313      	orrs	r3, r2
 800490a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800490c:	4b1b      	ldr	r3, [pc, #108]	; (800497c <HAL_RCC_OscConfig+0x478>)
 800490e:	2201      	movs	r2, #1
 8004910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004912:	f7fc fbe7 	bl	80010e4 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800491a:	f7fc fbe3 	bl	80010e4 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e05c      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800492c:	4b11      	ldr	r3, [pc, #68]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f0      	beq.n	800491a <HAL_RCC_OscConfig+0x416>
 8004938:	e054      	b.n	80049e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800493a:	4b10      	ldr	r3, [pc, #64]	; (800497c <HAL_RCC_OscConfig+0x478>)
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004940:	f7fc fbd0 	bl	80010e4 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004948:	f7fc fbcc 	bl	80010e4 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e045      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x444>
 8004966:	e03d      	b.n	80049e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d107      	bne.n	8004980 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e038      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
 8004974:	40023800 	.word	0x40023800
 8004978:	40007000 	.word	0x40007000
 800497c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004980:	4b1b      	ldr	r3, [pc, #108]	; (80049f0 <HAL_RCC_OscConfig+0x4ec>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d028      	beq.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004998:	429a      	cmp	r2, r3
 800499a:	d121      	bne.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d11a      	bne.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049b0:	4013      	ands	r3, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d111      	bne.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	085b      	lsrs	r3, r3, #1
 80049c8:	3b01      	subs	r3, #1
 80049ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d107      	bne.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d001      	beq.n	80049e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e000      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40023800 	.word	0x40023800

080049f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0cc      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a08:	4b68      	ldr	r3, [pc, #416]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d90c      	bls.n	8004a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a16:	4b65      	ldr	r3, [pc, #404]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1e:	4b63      	ldr	r3, [pc, #396]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d001      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e0b8      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d020      	beq.n	8004a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d005      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a48:	4b59      	ldr	r3, [pc, #356]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	4a58      	ldr	r2, [pc, #352]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a60:	4b53      	ldr	r3, [pc, #332]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	4a52      	ldr	r2, [pc, #328]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a6c:	4b50      	ldr	r3, [pc, #320]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	494d      	ldr	r1, [pc, #308]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d044      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d107      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a92:	4b47      	ldr	r3, [pc, #284]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d119      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e07f      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d003      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aae:	2b03      	cmp	r3, #3
 8004ab0:	d107      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab2:	4b3f      	ldr	r3, [pc, #252]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e06f      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac2:	4b3b      	ldr	r3, [pc, #236]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e067      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ad2:	4b37      	ldr	r3, [pc, #220]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f023 0203 	bic.w	r2, r3, #3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	4934      	ldr	r1, [pc, #208]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ae4:	f7fc fafe 	bl	80010e4 <HAL_GetTick>
 8004ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aea:	e00a      	b.n	8004b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aec:	f7fc fafa 	bl	80010e4 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e04f      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b02:	4b2b      	ldr	r3, [pc, #172]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 020c 	and.w	r2, r3, #12
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d1eb      	bne.n	8004aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b14:	4b25      	ldr	r3, [pc, #148]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d20c      	bcs.n	8004b3c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b22:	4b22      	ldr	r3, [pc, #136]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2a:	4b20      	ldr	r3, [pc, #128]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d001      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e032      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d008      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b48:	4b19      	ldr	r3, [pc, #100]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	4916      	ldr	r1, [pc, #88]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d009      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b66:	4b12      	ldr	r3, [pc, #72]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	490e      	ldr	r1, [pc, #56]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b7a:	f000 f821 	bl	8004bc0 <HAL_RCC_GetSysClockFreq>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	091b      	lsrs	r3, r3, #4
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	490a      	ldr	r1, [pc, #40]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b8c:	5ccb      	ldrb	r3, [r1, r3]
 8004b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b92:	4a09      	ldr	r2, [pc, #36]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b96:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <HAL_RCC_ClockConfig+0x1c8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fc fa5e 	bl	800105c <HAL_InitTick>

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40023c00 	.word	0x40023c00
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	08009e08 	.word	0x08009e08
 8004bb8:	20000000 	.word	0x20000000
 8004bbc:	20000004 	.word	0x20000004

08004bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc4:	b094      	sub	sp, #80	; 0x50
 8004bc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bd8:	4b79      	ldr	r3, [pc, #484]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 030c 	and.w	r3, r3, #12
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d00d      	beq.n	8004c00 <HAL_RCC_GetSysClockFreq+0x40>
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	f200 80e1 	bhi.w	8004dac <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d003      	beq.n	8004bfa <HAL_RCC_GetSysClockFreq+0x3a>
 8004bf2:	e0db      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bf4:	4b73      	ldr	r3, [pc, #460]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bf6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bf8:	e0db      	b.n	8004db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bfa:	4b73      	ldr	r3, [pc, #460]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004bfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bfe:	e0d8      	b.n	8004db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c00:	4b6f      	ldr	r3, [pc, #444]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c08:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c0a:	4b6d      	ldr	r3, [pc, #436]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d063      	beq.n	8004cde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c16:	4b6a      	ldr	r3, [pc, #424]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	099b      	lsrs	r3, r3, #6
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c28:	633b      	str	r3, [r7, #48]	; 0x30
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c32:	4622      	mov	r2, r4
 8004c34:	462b      	mov	r3, r5
 8004c36:	f04f 0000 	mov.w	r0, #0
 8004c3a:	f04f 0100 	mov.w	r1, #0
 8004c3e:	0159      	lsls	r1, r3, #5
 8004c40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c44:	0150      	lsls	r0, r2, #5
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	1a51      	subs	r1, r2, r1
 8004c4e:	6139      	str	r1, [r7, #16]
 8004c50:	4629      	mov	r1, r5
 8004c52:	eb63 0301 	sbc.w	r3, r3, r1
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c64:	4659      	mov	r1, fp
 8004c66:	018b      	lsls	r3, r1, #6
 8004c68:	4651      	mov	r1, sl
 8004c6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c6e:	4651      	mov	r1, sl
 8004c70:	018a      	lsls	r2, r1, #6
 8004c72:	4651      	mov	r1, sl
 8004c74:	ebb2 0801 	subs.w	r8, r2, r1
 8004c78:	4659      	mov	r1, fp
 8004c7a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	f04f 0300 	mov.w	r3, #0
 8004c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c92:	4690      	mov	r8, r2
 8004c94:	4699      	mov	r9, r3
 8004c96:	4623      	mov	r3, r4
 8004c98:	eb18 0303 	adds.w	r3, r8, r3
 8004c9c:	60bb      	str	r3, [r7, #8]
 8004c9e:	462b      	mov	r3, r5
 8004ca0:	eb49 0303 	adc.w	r3, r9, r3
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	f04f 0300 	mov.w	r3, #0
 8004cae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cb2:	4629      	mov	r1, r5
 8004cb4:	024b      	lsls	r3, r1, #9
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	024a      	lsls	r2, r1, #9
 8004cc0:	4610      	mov	r0, r2
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ccc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cd0:	f7fb fa7a 	bl	80001c8 <__aeabi_uldivmod>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4613      	mov	r3, r2
 8004cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cdc:	e058      	b.n	8004d90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cde:	4b38      	ldr	r3, [pc, #224]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	099b      	lsrs	r3, r3, #6
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	4611      	mov	r1, r2
 8004cea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cee:	623b      	str	r3, [r7, #32]
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	464b      	mov	r3, r9
 8004cfc:	f04f 0000 	mov.w	r0, #0
 8004d00:	f04f 0100 	mov.w	r1, #0
 8004d04:	0159      	lsls	r1, r3, #5
 8004d06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d0a:	0150      	lsls	r0, r2, #5
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4641      	mov	r1, r8
 8004d12:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d16:	4649      	mov	r1, r9
 8004d18:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d1c:	f04f 0200 	mov.w	r2, #0
 8004d20:	f04f 0300 	mov.w	r3, #0
 8004d24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d30:	ebb2 040a 	subs.w	r4, r2, sl
 8004d34:	eb63 050b 	sbc.w	r5, r3, fp
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	00eb      	lsls	r3, r5, #3
 8004d42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d46:	00e2      	lsls	r2, r4, #3
 8004d48:	4614      	mov	r4, r2
 8004d4a:	461d      	mov	r5, r3
 8004d4c:	4643      	mov	r3, r8
 8004d4e:	18e3      	adds	r3, r4, r3
 8004d50:	603b      	str	r3, [r7, #0]
 8004d52:	464b      	mov	r3, r9
 8004d54:	eb45 0303 	adc.w	r3, r5, r3
 8004d58:	607b      	str	r3, [r7, #4]
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d66:	4629      	mov	r1, r5
 8004d68:	028b      	lsls	r3, r1, #10
 8004d6a:	4621      	mov	r1, r4
 8004d6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d70:	4621      	mov	r1, r4
 8004d72:	028a      	lsls	r2, r1, #10
 8004d74:	4610      	mov	r0, r2
 8004d76:	4619      	mov	r1, r3
 8004d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	61bb      	str	r3, [r7, #24]
 8004d7e:	61fa      	str	r2, [r7, #28]
 8004d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d84:	f7fb fa20 	bl	80001c8 <__aeabi_uldivmod>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d90:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	0c1b      	lsrs	r3, r3, #16
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004da0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004daa:	e002      	b.n	8004db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dac:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3750      	adds	r7, #80	; 0x50
 8004db8:	46bd      	mov	sp, r7
 8004dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	00f42400 	.word	0x00f42400
 8004dc8:	007a1200 	.word	0x007a1200

08004dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dd0:	4b03      	ldr	r3, [pc, #12]	; (8004de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	20000000 	.word	0x20000000

08004de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004de8:	f7ff fff0 	bl	8004dcc <HAL_RCC_GetHCLKFreq>
 8004dec:	4602      	mov	r2, r0
 8004dee:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	0a9b      	lsrs	r3, r3, #10
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	4903      	ldr	r1, [pc, #12]	; (8004e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dfa:	5ccb      	ldrb	r3, [r1, r3]
 8004dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40023800 	.word	0x40023800
 8004e08:	08009e18 	.word	0x08009e18

08004e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e10:	f7ff ffdc 	bl	8004dcc <HAL_RCC_GetHCLKFreq>
 8004e14:	4602      	mov	r2, r0
 8004e16:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	0b5b      	lsrs	r3, r3, #13
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	4903      	ldr	r1, [pc, #12]	; (8004e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e22:	5ccb      	ldrb	r3, [r1, r3]
 8004e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	08009e18 	.word	0x08009e18

08004e34 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d105      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d035      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e5c:	4b62      	ldr	r3, [pc, #392]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e62:	f7fc f93f 	bl	80010e4 <HAL_GetTick>
 8004e66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e68:	e008      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e6a:	f7fc f93b 	bl	80010e4 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e0b0      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e7c:	4b5b      	ldr	r3, [pc, #364]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1f0      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	019a      	lsls	r2, r3, #6
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	071b      	lsls	r3, r3, #28
 8004e94:	4955      	ldr	r1, [pc, #340]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e9c:	4b52      	ldr	r3, [pc, #328]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ea2:	f7fc f91f 	bl	80010e4 <HAL_GetTick>
 8004ea6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004eaa:	f7fc f91b 	bl	80010e4 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e090      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ebc:	4b4b      	ldr	r3, [pc, #300]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0f0      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 8083 	beq.w	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	4b44      	ldr	r3, [pc, #272]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	4a43      	ldr	r2, [pc, #268]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ee6:	4b41      	ldr	r3, [pc, #260]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ef2:	4b3f      	ldr	r3, [pc, #252]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a3e      	ldr	r2, [pc, #248]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004efc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004efe:	f7fc f8f1 	bl	80010e4 <HAL_GetTick>
 8004f02:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004f04:	e008      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f06:	f7fc f8ed 	bl	80010e4 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e062      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004f18:	4b35      	ldr	r3, [pc, #212]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0f0      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f24:	4b31      	ldr	r3, [pc, #196]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f2c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d02f      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d028      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f42:	4b2a      	ldr	r3, [pc, #168]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f4a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f4c:	4b29      	ldr	r3, [pc, #164]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f52:	4b28      	ldr	r3, [pc, #160]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f58:	4a24      	ldr	r2, [pc, #144]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f5e:	4b23      	ldr	r3, [pc, #140]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d114      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f6a:	f7fc f8bb 	bl	80010e4 <HAL_GetTick>
 8004f6e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f70:	e00a      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f72:	f7fc f8b7 	bl	80010e4 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e02a      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f88:	4b18      	ldr	r3, [pc, #96]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0ee      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fa0:	d10d      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004fa2:	4b12      	ldr	r3, [pc, #72]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb6:	490d      	ldr	r1, [pc, #52]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	608b      	str	r3, [r1, #8]
 8004fbc:	e005      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004fbe:	4b0b      	ldr	r3, [pc, #44]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	4a0a      	ldr	r2, [pc, #40]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fc4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004fc8:	6093      	str	r3, [r2, #8]
 8004fca:	4b08      	ldr	r3, [pc, #32]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd6:	4905      	ldr	r1, [pc, #20]	; (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	670b      	str	r3, [r1, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	42470068 	.word	0x42470068
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	40007000 	.word	0x40007000
 8004ff4:	42470e40 	.word	0x42470e40

08004ff8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d13f      	bne.n	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005016:	4b24      	ldr	r3, [pc, #144]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d006      	beq.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800502c:	d12f      	bne.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800502e:	4b1f      	ldr	r3, [pc, #124]	; (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005030:	617b      	str	r3, [r7, #20]
          break;
 8005032:	e02f      	b.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005034:	4b1c      	ldr	r3, [pc, #112]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800503c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005040:	d108      	bne.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005042:	4b19      	ldr	r3, [pc, #100]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800504a:	4a19      	ldr	r2, [pc, #100]	; (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800504c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005050:	613b      	str	r3, [r7, #16]
 8005052:	e007      	b.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005054:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800505c:	4a15      	ldr	r2, [pc, #84]	; (80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800505e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005062:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005064:	4b10      	ldr	r3, [pc, #64]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800506a:	099b      	lsrs	r3, r3, #6
 800506c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	fb02 f303 	mul.w	r3, r2, r3
 8005076:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005078:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800507a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800507e:	0f1b      	lsrs	r3, r3, #28
 8005080:	f003 0307 	and.w	r3, r3, #7
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	fbb2 f3f3 	udiv	r3, r2, r3
 800508a:	617b      	str	r3, [r7, #20]
          break;
 800508c:	e002      	b.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
          break;
 8005092:	bf00      	nop
        }
      }
      break;
 8005094:	e000      	b.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005096:	bf00      	nop
    }
  }
  return frequency;
 8005098:	697b      	ldr	r3, [r7, #20]
}
 800509a:	4618      	mov	r0, r3
 800509c:	371c      	adds	r7, #28
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40023800 	.word	0x40023800
 80050ac:	00bb8000 	.word	0x00bb8000
 80050b0:	007a1200 	.word	0x007a1200
 80050b4:	00f42400 	.word	0x00f42400

080050b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e07b      	b.n	80051c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d108      	bne.n	80050e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050da:	d009      	beq.n	80050f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	61da      	str	r2, [r3, #28]
 80050e2:	e005      	b.n	80050f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7fb fd80 	bl	8000c10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005126:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005142:	431a      	orrs	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005174:	ea42 0103 	orr.w	r1, r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	0c1b      	lsrs	r3, r3, #16
 800518e:	f003 0104 	and.w	r1, r3, #4
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	f003 0210 	and.w	r2, r3, #16
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69da      	ldr	r2, [r3, #28]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b082      	sub	sp, #8
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e041      	b.n	8005260 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d106      	bne.n	80051f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7fb fd55 	bl	8000ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2202      	movs	r2, #2
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3304      	adds	r3, #4
 8005206:	4619      	mov	r1, r3
 8005208:	4610      	mov	r0, r2
 800520a:	f000 f82d 	bl	8005268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a46      	ldr	r2, [pc, #280]	; (8005394 <TIM_Base_SetConfig+0x12c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d013      	beq.n	80052a8 <TIM_Base_SetConfig+0x40>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005286:	d00f      	beq.n	80052a8 <TIM_Base_SetConfig+0x40>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a43      	ldr	r2, [pc, #268]	; (8005398 <TIM_Base_SetConfig+0x130>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00b      	beq.n	80052a8 <TIM_Base_SetConfig+0x40>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a42      	ldr	r2, [pc, #264]	; (800539c <TIM_Base_SetConfig+0x134>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d007      	beq.n	80052a8 <TIM_Base_SetConfig+0x40>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a41      	ldr	r2, [pc, #260]	; (80053a0 <TIM_Base_SetConfig+0x138>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d003      	beq.n	80052a8 <TIM_Base_SetConfig+0x40>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a40      	ldr	r2, [pc, #256]	; (80053a4 <TIM_Base_SetConfig+0x13c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d108      	bne.n	80052ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a35      	ldr	r2, [pc, #212]	; (8005394 <TIM_Base_SetConfig+0x12c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d02b      	beq.n	800531a <TIM_Base_SetConfig+0xb2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c8:	d027      	beq.n	800531a <TIM_Base_SetConfig+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a32      	ldr	r2, [pc, #200]	; (8005398 <TIM_Base_SetConfig+0x130>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d023      	beq.n	800531a <TIM_Base_SetConfig+0xb2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a31      	ldr	r2, [pc, #196]	; (800539c <TIM_Base_SetConfig+0x134>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d01f      	beq.n	800531a <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a30      	ldr	r2, [pc, #192]	; (80053a0 <TIM_Base_SetConfig+0x138>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d01b      	beq.n	800531a <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a2f      	ldr	r2, [pc, #188]	; (80053a4 <TIM_Base_SetConfig+0x13c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d017      	beq.n	800531a <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a2e      	ldr	r2, [pc, #184]	; (80053a8 <TIM_Base_SetConfig+0x140>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d013      	beq.n	800531a <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a2d      	ldr	r2, [pc, #180]	; (80053ac <TIM_Base_SetConfig+0x144>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d00f      	beq.n	800531a <TIM_Base_SetConfig+0xb2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a2c      	ldr	r2, [pc, #176]	; (80053b0 <TIM_Base_SetConfig+0x148>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d00b      	beq.n	800531a <TIM_Base_SetConfig+0xb2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a2b      	ldr	r2, [pc, #172]	; (80053b4 <TIM_Base_SetConfig+0x14c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d007      	beq.n	800531a <TIM_Base_SetConfig+0xb2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a2a      	ldr	r2, [pc, #168]	; (80053b8 <TIM_Base_SetConfig+0x150>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d003      	beq.n	800531a <TIM_Base_SetConfig+0xb2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a29      	ldr	r2, [pc, #164]	; (80053bc <TIM_Base_SetConfig+0x154>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d108      	bne.n	800532c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a10      	ldr	r2, [pc, #64]	; (8005394 <TIM_Base_SetConfig+0x12c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d003      	beq.n	8005360 <TIM_Base_SetConfig+0xf8>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a12      	ldr	r2, [pc, #72]	; (80053a4 <TIM_Base_SetConfig+0x13c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d103      	bne.n	8005368 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b01      	cmp	r3, #1
 8005378:	d105      	bne.n	8005386 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f023 0201 	bic.w	r2, r3, #1
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	611a      	str	r2, [r3, #16]
  }
}
 8005386:	bf00      	nop
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40010000 	.word	0x40010000
 8005398:	40000400 	.word	0x40000400
 800539c:	40000800 	.word	0x40000800
 80053a0:	40000c00 	.word	0x40000c00
 80053a4:	40010400 	.word	0x40010400
 80053a8:	40014000 	.word	0x40014000
 80053ac:	40014400 	.word	0x40014400
 80053b0:	40014800 	.word	0x40014800
 80053b4:	40001800 	.word	0x40001800
 80053b8:	40001c00 	.word	0x40001c00
 80053bc:	40002000 	.word	0x40002000

080053c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e05a      	b.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a21      	ldr	r2, [pc, #132]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d022      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005424:	d01d      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a1d      	ldr	r2, [pc, #116]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d018      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1b      	ldr	r2, [pc, #108]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d013      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1a      	ldr	r2, [pc, #104]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00e      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a18      	ldr	r2, [pc, #96]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d009      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a17      	ldr	r2, [pc, #92]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d004      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a15      	ldr	r2, [pc, #84]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d10c      	bne.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005468:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	4313      	orrs	r3, r2
 8005472:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40010000 	.word	0x40010000
 80054a0:	40000400 	.word	0x40000400
 80054a4:	40000800 	.word	0x40000800
 80054a8:	40000c00 	.word	0x40000c00
 80054ac:	40010400 	.word	0x40010400
 80054b0:	40014000 	.word	0x40014000
 80054b4:	40001800 	.word	0x40001800

080054b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e042      	b.n	8005550 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d106      	bne.n	80054e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7fb fc16 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2224      	movs	r2, #36	; 0x24
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f82b 	bl	8005558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	691a      	ldr	r2, [r3, #16]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005510:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695a      	ldr	r2, [r3, #20]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005520:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68da      	ldr	r2, [r3, #12]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005530:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800555c:	b0c0      	sub	sp, #256	; 0x100
 800555e:	af00      	add	r7, sp, #0
 8005560:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005574:	68d9      	ldr	r1, [r3, #12]
 8005576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	ea40 0301 	orr.w	r3, r0, r1
 8005580:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	431a      	orrs	r2, r3
 8005590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	431a      	orrs	r2, r3
 8005598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055b0:	f021 010c 	bic.w	r1, r1, #12
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055be:	430b      	orrs	r3, r1
 80055c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d2:	6999      	ldr	r1, [r3, #24]
 80055d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	ea40 0301 	orr.w	r3, r0, r1
 80055de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	4b8f      	ldr	r3, [pc, #572]	; (8005824 <UART_SetConfig+0x2cc>)
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d005      	beq.n	80055f8 <UART_SetConfig+0xa0>
 80055ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4b8d      	ldr	r3, [pc, #564]	; (8005828 <UART_SetConfig+0x2d0>)
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d104      	bne.n	8005602 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055f8:	f7ff fc08 	bl	8004e0c <HAL_RCC_GetPCLK2Freq>
 80055fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005600:	e003      	b.n	800560a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005602:	f7ff fbef 	bl	8004de4 <HAL_RCC_GetPCLK1Freq>
 8005606:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800560a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005614:	f040 810c 	bne.w	8005830 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800561c:	2200      	movs	r2, #0
 800561e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005622:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005626:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800562a:	4622      	mov	r2, r4
 800562c:	462b      	mov	r3, r5
 800562e:	1891      	adds	r1, r2, r2
 8005630:	65b9      	str	r1, [r7, #88]	; 0x58
 8005632:	415b      	adcs	r3, r3
 8005634:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005636:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800563a:	4621      	mov	r1, r4
 800563c:	eb12 0801 	adds.w	r8, r2, r1
 8005640:	4629      	mov	r1, r5
 8005642:	eb43 0901 	adc.w	r9, r3, r1
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	f04f 0300 	mov.w	r3, #0
 800564e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005652:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005656:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800565a:	4690      	mov	r8, r2
 800565c:	4699      	mov	r9, r3
 800565e:	4623      	mov	r3, r4
 8005660:	eb18 0303 	adds.w	r3, r8, r3
 8005664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005668:	462b      	mov	r3, r5
 800566a:	eb49 0303 	adc.w	r3, r9, r3
 800566e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800567e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005682:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005686:	460b      	mov	r3, r1
 8005688:	18db      	adds	r3, r3, r3
 800568a:	653b      	str	r3, [r7, #80]	; 0x50
 800568c:	4613      	mov	r3, r2
 800568e:	eb42 0303 	adc.w	r3, r2, r3
 8005692:	657b      	str	r3, [r7, #84]	; 0x54
 8005694:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005698:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800569c:	f7fa fd94 	bl	80001c8 <__aeabi_uldivmod>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4b61      	ldr	r3, [pc, #388]	; (800582c <UART_SetConfig+0x2d4>)
 80056a6:	fba3 2302 	umull	r2, r3, r3, r2
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	011c      	lsls	r4, r3, #4
 80056ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056b2:	2200      	movs	r2, #0
 80056b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80056bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80056c0:	4642      	mov	r2, r8
 80056c2:	464b      	mov	r3, r9
 80056c4:	1891      	adds	r1, r2, r2
 80056c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80056c8:	415b      	adcs	r3, r3
 80056ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80056d0:	4641      	mov	r1, r8
 80056d2:	eb12 0a01 	adds.w	sl, r2, r1
 80056d6:	4649      	mov	r1, r9
 80056d8:	eb43 0b01 	adc.w	fp, r3, r1
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	f04f 0300 	mov.w	r3, #0
 80056e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056f0:	4692      	mov	sl, r2
 80056f2:	469b      	mov	fp, r3
 80056f4:	4643      	mov	r3, r8
 80056f6:	eb1a 0303 	adds.w	r3, sl, r3
 80056fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056fe:	464b      	mov	r3, r9
 8005700:	eb4b 0303 	adc.w	r3, fp, r3
 8005704:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005714:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005718:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800571c:	460b      	mov	r3, r1
 800571e:	18db      	adds	r3, r3, r3
 8005720:	643b      	str	r3, [r7, #64]	; 0x40
 8005722:	4613      	mov	r3, r2
 8005724:	eb42 0303 	adc.w	r3, r2, r3
 8005728:	647b      	str	r3, [r7, #68]	; 0x44
 800572a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800572e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005732:	f7fa fd49 	bl	80001c8 <__aeabi_uldivmod>
 8005736:	4602      	mov	r2, r0
 8005738:	460b      	mov	r3, r1
 800573a:	4611      	mov	r1, r2
 800573c:	4b3b      	ldr	r3, [pc, #236]	; (800582c <UART_SetConfig+0x2d4>)
 800573e:	fba3 2301 	umull	r2, r3, r3, r1
 8005742:	095b      	lsrs	r3, r3, #5
 8005744:	2264      	movs	r2, #100	; 0x64
 8005746:	fb02 f303 	mul.w	r3, r2, r3
 800574a:	1acb      	subs	r3, r1, r3
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005752:	4b36      	ldr	r3, [pc, #216]	; (800582c <UART_SetConfig+0x2d4>)
 8005754:	fba3 2302 	umull	r2, r3, r3, r2
 8005758:	095b      	lsrs	r3, r3, #5
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005760:	441c      	add	r4, r3
 8005762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005766:	2200      	movs	r2, #0
 8005768:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800576c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005770:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005774:	4642      	mov	r2, r8
 8005776:	464b      	mov	r3, r9
 8005778:	1891      	adds	r1, r2, r2
 800577a:	63b9      	str	r1, [r7, #56]	; 0x38
 800577c:	415b      	adcs	r3, r3
 800577e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005780:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005784:	4641      	mov	r1, r8
 8005786:	1851      	adds	r1, r2, r1
 8005788:	6339      	str	r1, [r7, #48]	; 0x30
 800578a:	4649      	mov	r1, r9
 800578c:	414b      	adcs	r3, r1
 800578e:	637b      	str	r3, [r7, #52]	; 0x34
 8005790:	f04f 0200 	mov.w	r2, #0
 8005794:	f04f 0300 	mov.w	r3, #0
 8005798:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800579c:	4659      	mov	r1, fp
 800579e:	00cb      	lsls	r3, r1, #3
 80057a0:	4651      	mov	r1, sl
 80057a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057a6:	4651      	mov	r1, sl
 80057a8:	00ca      	lsls	r2, r1, #3
 80057aa:	4610      	mov	r0, r2
 80057ac:	4619      	mov	r1, r3
 80057ae:	4603      	mov	r3, r0
 80057b0:	4642      	mov	r2, r8
 80057b2:	189b      	adds	r3, r3, r2
 80057b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057b8:	464b      	mov	r3, r9
 80057ba:	460a      	mov	r2, r1
 80057bc:	eb42 0303 	adc.w	r3, r2, r3
 80057c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80057d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80057d8:	460b      	mov	r3, r1
 80057da:	18db      	adds	r3, r3, r3
 80057dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80057de:	4613      	mov	r3, r2
 80057e0:	eb42 0303 	adc.w	r3, r2, r3
 80057e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80057ee:	f7fa fceb 	bl	80001c8 <__aeabi_uldivmod>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	4b0d      	ldr	r3, [pc, #52]	; (800582c <UART_SetConfig+0x2d4>)
 80057f8:	fba3 1302 	umull	r1, r3, r3, r2
 80057fc:	095b      	lsrs	r3, r3, #5
 80057fe:	2164      	movs	r1, #100	; 0x64
 8005800:	fb01 f303 	mul.w	r3, r1, r3
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	3332      	adds	r3, #50	; 0x32
 800580a:	4a08      	ldr	r2, [pc, #32]	; (800582c <UART_SetConfig+0x2d4>)
 800580c:	fba2 2303 	umull	r2, r3, r2, r3
 8005810:	095b      	lsrs	r3, r3, #5
 8005812:	f003 0207 	and.w	r2, r3, #7
 8005816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4422      	add	r2, r4
 800581e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005820:	e106      	b.n	8005a30 <UART_SetConfig+0x4d8>
 8005822:	bf00      	nop
 8005824:	40011000 	.word	0x40011000
 8005828:	40011400 	.word	0x40011400
 800582c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005834:	2200      	movs	r2, #0
 8005836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800583a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800583e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005842:	4642      	mov	r2, r8
 8005844:	464b      	mov	r3, r9
 8005846:	1891      	adds	r1, r2, r2
 8005848:	6239      	str	r1, [r7, #32]
 800584a:	415b      	adcs	r3, r3
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
 800584e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005852:	4641      	mov	r1, r8
 8005854:	1854      	adds	r4, r2, r1
 8005856:	4649      	mov	r1, r9
 8005858:	eb43 0501 	adc.w	r5, r3, r1
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	00eb      	lsls	r3, r5, #3
 8005866:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800586a:	00e2      	lsls	r2, r4, #3
 800586c:	4614      	mov	r4, r2
 800586e:	461d      	mov	r5, r3
 8005870:	4643      	mov	r3, r8
 8005872:	18e3      	adds	r3, r4, r3
 8005874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005878:	464b      	mov	r3, r9
 800587a:	eb45 0303 	adc.w	r3, r5, r3
 800587e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800588e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005892:	f04f 0200 	mov.w	r2, #0
 8005896:	f04f 0300 	mov.w	r3, #0
 800589a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800589e:	4629      	mov	r1, r5
 80058a0:	008b      	lsls	r3, r1, #2
 80058a2:	4621      	mov	r1, r4
 80058a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058a8:	4621      	mov	r1, r4
 80058aa:	008a      	lsls	r2, r1, #2
 80058ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058b0:	f7fa fc8a 	bl	80001c8 <__aeabi_uldivmod>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4b60      	ldr	r3, [pc, #384]	; (8005a3c <UART_SetConfig+0x4e4>)
 80058ba:	fba3 2302 	umull	r2, r3, r3, r2
 80058be:	095b      	lsrs	r3, r3, #5
 80058c0:	011c      	lsls	r4, r3, #4
 80058c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058c6:	2200      	movs	r2, #0
 80058c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80058d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80058d4:	4642      	mov	r2, r8
 80058d6:	464b      	mov	r3, r9
 80058d8:	1891      	adds	r1, r2, r2
 80058da:	61b9      	str	r1, [r7, #24]
 80058dc:	415b      	adcs	r3, r3
 80058de:	61fb      	str	r3, [r7, #28]
 80058e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058e4:	4641      	mov	r1, r8
 80058e6:	1851      	adds	r1, r2, r1
 80058e8:	6139      	str	r1, [r7, #16]
 80058ea:	4649      	mov	r1, r9
 80058ec:	414b      	adcs	r3, r1
 80058ee:	617b      	str	r3, [r7, #20]
 80058f0:	f04f 0200 	mov.w	r2, #0
 80058f4:	f04f 0300 	mov.w	r3, #0
 80058f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058fc:	4659      	mov	r1, fp
 80058fe:	00cb      	lsls	r3, r1, #3
 8005900:	4651      	mov	r1, sl
 8005902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005906:	4651      	mov	r1, sl
 8005908:	00ca      	lsls	r2, r1, #3
 800590a:	4610      	mov	r0, r2
 800590c:	4619      	mov	r1, r3
 800590e:	4603      	mov	r3, r0
 8005910:	4642      	mov	r2, r8
 8005912:	189b      	adds	r3, r3, r2
 8005914:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005918:	464b      	mov	r3, r9
 800591a:	460a      	mov	r2, r1
 800591c:	eb42 0303 	adc.w	r3, r2, r3
 8005920:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	67bb      	str	r3, [r7, #120]	; 0x78
 800592e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005930:	f04f 0200 	mov.w	r2, #0
 8005934:	f04f 0300 	mov.w	r3, #0
 8005938:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800593c:	4649      	mov	r1, r9
 800593e:	008b      	lsls	r3, r1, #2
 8005940:	4641      	mov	r1, r8
 8005942:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005946:	4641      	mov	r1, r8
 8005948:	008a      	lsls	r2, r1, #2
 800594a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800594e:	f7fa fc3b 	bl	80001c8 <__aeabi_uldivmod>
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	4611      	mov	r1, r2
 8005958:	4b38      	ldr	r3, [pc, #224]	; (8005a3c <UART_SetConfig+0x4e4>)
 800595a:	fba3 2301 	umull	r2, r3, r3, r1
 800595e:	095b      	lsrs	r3, r3, #5
 8005960:	2264      	movs	r2, #100	; 0x64
 8005962:	fb02 f303 	mul.w	r3, r2, r3
 8005966:	1acb      	subs	r3, r1, r3
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	3332      	adds	r3, #50	; 0x32
 800596c:	4a33      	ldr	r2, [pc, #204]	; (8005a3c <UART_SetConfig+0x4e4>)
 800596e:	fba2 2303 	umull	r2, r3, r2, r3
 8005972:	095b      	lsrs	r3, r3, #5
 8005974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005978:	441c      	add	r4, r3
 800597a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800597e:	2200      	movs	r2, #0
 8005980:	673b      	str	r3, [r7, #112]	; 0x70
 8005982:	677a      	str	r2, [r7, #116]	; 0x74
 8005984:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005988:	4642      	mov	r2, r8
 800598a:	464b      	mov	r3, r9
 800598c:	1891      	adds	r1, r2, r2
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	415b      	adcs	r3, r3
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005998:	4641      	mov	r1, r8
 800599a:	1851      	adds	r1, r2, r1
 800599c:	6039      	str	r1, [r7, #0]
 800599e:	4649      	mov	r1, r9
 80059a0:	414b      	adcs	r3, r1
 80059a2:	607b      	str	r3, [r7, #4]
 80059a4:	f04f 0200 	mov.w	r2, #0
 80059a8:	f04f 0300 	mov.w	r3, #0
 80059ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059b0:	4659      	mov	r1, fp
 80059b2:	00cb      	lsls	r3, r1, #3
 80059b4:	4651      	mov	r1, sl
 80059b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ba:	4651      	mov	r1, sl
 80059bc:	00ca      	lsls	r2, r1, #3
 80059be:	4610      	mov	r0, r2
 80059c0:	4619      	mov	r1, r3
 80059c2:	4603      	mov	r3, r0
 80059c4:	4642      	mov	r2, r8
 80059c6:	189b      	adds	r3, r3, r2
 80059c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80059ca:	464b      	mov	r3, r9
 80059cc:	460a      	mov	r2, r1
 80059ce:	eb42 0303 	adc.w	r3, r2, r3
 80059d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	663b      	str	r3, [r7, #96]	; 0x60
 80059de:	667a      	str	r2, [r7, #100]	; 0x64
 80059e0:	f04f 0200 	mov.w	r2, #0
 80059e4:	f04f 0300 	mov.w	r3, #0
 80059e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80059ec:	4649      	mov	r1, r9
 80059ee:	008b      	lsls	r3, r1, #2
 80059f0:	4641      	mov	r1, r8
 80059f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059f6:	4641      	mov	r1, r8
 80059f8:	008a      	lsls	r2, r1, #2
 80059fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80059fe:	f7fa fbe3 	bl	80001c8 <__aeabi_uldivmod>
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	4b0d      	ldr	r3, [pc, #52]	; (8005a3c <UART_SetConfig+0x4e4>)
 8005a08:	fba3 1302 	umull	r1, r3, r3, r2
 8005a0c:	095b      	lsrs	r3, r3, #5
 8005a0e:	2164      	movs	r1, #100	; 0x64
 8005a10:	fb01 f303 	mul.w	r3, r1, r3
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	3332      	adds	r3, #50	; 0x32
 8005a1a:	4a08      	ldr	r2, [pc, #32]	; (8005a3c <UART_SetConfig+0x4e4>)
 8005a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a20:	095b      	lsrs	r3, r3, #5
 8005a22:	f003 020f 	and.w	r2, r3, #15
 8005a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4422      	add	r2, r4
 8005a2e:	609a      	str	r2, [r3, #8]
}
 8005a30:	bf00      	nop
 8005a32:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a36:	46bd      	mov	sp, r7
 8005a38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a3c:	51eb851f 	.word	0x51eb851f

08005a40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a40:	b084      	sub	sp, #16
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	f107 001c 	add.w	r0, r7, #28
 8005a4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a52:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d123      	bne.n	8005aa2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d105      	bne.n	8005a96 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f9dc 	bl	8005e54 <USB_CoreReset>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	73fb      	strb	r3, [r7, #15]
 8005aa0:	e01b      	b.n	8005ada <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f9d0 	bl	8005e54 <USB_CoreReset>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ab8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d106      	bne.n	8005ace <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38
 8005acc:	e005      	b.n	8005ada <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ada:	7fbb      	ldrb	r3, [r7, #30]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d10b      	bne.n	8005af8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f043 0206 	orr.w	r2, r3, #6
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f043 0220 	orr.w	r2, r3, #32
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b04:	b004      	add	sp, #16
 8005b06:	4770      	bx	lr

08005b08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f043 0201 	orr.w	r2, r3, #1
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f023 0201 	bic.w	r2, r3, #1
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b68:	78fb      	ldrb	r3, [r7, #3]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d115      	bne.n	8005b9a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005b7a:	200a      	movs	r0, #10
 8005b7c:	f7fb fabe 	bl	80010fc <HAL_Delay>
      ms += 10U;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	330a      	adds	r3, #10
 8005b84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f956 	bl	8005e38 <USB_GetMode>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d01e      	beq.n	8005bd0 <USB_SetCurrentMode+0x84>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2bc7      	cmp	r3, #199	; 0xc7
 8005b96:	d9f0      	bls.n	8005b7a <USB_SetCurrentMode+0x2e>
 8005b98:	e01a      	b.n	8005bd0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b9a:	78fb      	ldrb	r3, [r7, #3]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d115      	bne.n	8005bcc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005bac:	200a      	movs	r0, #10
 8005bae:	f7fb faa5 	bl	80010fc <HAL_Delay>
      ms += 10U;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	330a      	adds	r3, #10
 8005bb6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f93d 	bl	8005e38 <USB_GetMode>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d005      	beq.n	8005bd0 <USB_SetCurrentMode+0x84>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2bc7      	cmp	r3, #199	; 0xc7
 8005bc8:	d9f0      	bls.n	8005bac <USB_SetCurrentMode+0x60>
 8005bca:	e001      	b.n	8005bd0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e005      	b.n	8005bdc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2bc8      	cmp	r3, #200	; 0xc8
 8005bd4:	d101      	bne.n	8005bda <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005bfe:	d901      	bls.n	8005c04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e01b      	b.n	8005c3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	daf2      	bge.n	8005bf2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	019b      	lsls	r3, r3, #6
 8005c14:	f043 0220 	orr.w	r2, r3, #32
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005c28:	d901      	bls.n	8005c2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e006      	b.n	8005c3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	f003 0320 	and.w	r3, r3, #32
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	d0f0      	beq.n	8005c1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3301      	adds	r3, #1
 8005c58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005c60:	d901      	bls.n	8005c66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e018      	b.n	8005c98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	daf2      	bge.n	8005c54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2210      	movs	r2, #16
 8005c76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005c84:	d901      	bls.n	8005c8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e006      	b.n	8005c98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f003 0310 	and.w	r3, r3, #16
 8005c92:	2b10      	cmp	r3, #16
 8005c94:	d0f0      	beq.n	8005c78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b089      	sub	sp, #36	; 0x24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	4611      	mov	r1, r2
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	71fb      	strb	r3, [r7, #7]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005cc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d123      	bne.n	8005d12 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005cca:	88bb      	ldrh	r3, [r7, #4]
 8005ccc:	3303      	adds	r3, #3
 8005cce:	089b      	lsrs	r3, r3, #2
 8005cd0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61bb      	str	r3, [r7, #24]
 8005cd6:	e018      	b.n	8005d0a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005cd8:	79fb      	ldrb	r3, [r7, #7]
 8005cda:	031a      	lsls	r2, r3, #12
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	3301      	adds	r3, #1
 8005d02:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	3301      	adds	r3, #1
 8005d08:	61bb      	str	r3, [r7, #24]
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d3e2      	bcc.n	8005cd8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3724      	adds	r7, #36	; 0x24
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b08b      	sub	sp, #44	; 0x2c
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d36:	88fb      	ldrh	r3, [r7, #6]
 8005d38:	089b      	lsrs	r3, r3, #2
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d3e:	88fb      	ldrh	r3, [r7, #6]
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d46:	2300      	movs	r3, #0
 8005d48:	623b      	str	r3, [r7, #32]
 8005d4a:	e014      	b.n	8005d76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	3301      	adds	r3, #1
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d66:	3301      	adds	r3, #1
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	3301      	adds	r3, #1
 8005d74:	623b      	str	r3, [r7, #32]
 8005d76:	6a3a      	ldr	r2, [r7, #32]
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d3e6      	bcc.n	8005d4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d7e:	8bfb      	ldrh	r3, [r7, #30]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d01e      	beq.n	8005dc2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f107 0310 	add.w	r3, r7, #16
 8005d94:	6812      	ldr	r2, [r2, #0]
 8005d96:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	fa22 f303 	lsr.w	r3, r2, r3
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	701a      	strb	r2, [r3, #0]
      i++;
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	3301      	adds	r3, #1
 8005dae:	623b      	str	r3, [r7, #32]
      pDest++;
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	3301      	adds	r3, #1
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005db6:	8bfb      	ldrh	r3, [r7, #30]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005dbc:	8bfb      	ldrh	r3, [r7, #30]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1ea      	bne.n	8005d98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	372c      	adds	r7, #44	; 0x2c
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4013      	ands	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005de8:	68fb      	ldr	r3, [r7, #12]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b085      	sub	sp, #20
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005e06:	78fb      	ldrb	r3, [r7, #3]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	4013      	ands	r3, r2
 8005e28:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	f003 0301 	and.w	r3, r3, #1
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	3301      	adds	r3, #1
 8005e64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005e6c:	d901      	bls.n	8005e72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e01b      	b.n	8005eaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	daf2      	bge.n	8005e60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f043 0201 	orr.w	r2, r3, #1
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005e96:	d901      	bls.n	8005e9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e006      	b.n	8005eaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d0f0      	beq.n	8005e8a <USB_CoreReset+0x36>

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
	...

08005eb8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005eb8:	b084      	sub	sp, #16
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b086      	sub	sp, #24
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ed8:	461a      	mov	r2, r3
 8005eda:	2300      	movs	r3, #0
 8005edc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eee:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d119      	bne.n	8005f42 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d10a      	bne.n	8005f2c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f24:	f043 0304 	orr.w	r3, r3, #4
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	e014      	b.n	8005f56 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f3a:	f023 0304 	bic.w	r3, r3, #4
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	e009      	b.n	8005f56 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f50:	f023 0304 	bic.w	r3, r3, #4
 8005f54:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f56:	2110      	movs	r1, #16
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7ff fe43 	bl	8005be4 <USB_FlushTxFifo>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7ff fe6d 	bl	8005c48 <USB_FlushRxFifo>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d001      	beq.n	8005f78 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f78:	2300      	movs	r3, #0
 8005f7a:	613b      	str	r3, [r7, #16]
 8005f7c:	e015      	b.n	8005faa <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f90:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	613b      	str	r3, [r7, #16]
 8005faa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005fae:	461a      	mov	r2, r3
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d3e3      	bcc.n	8005f7e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fc2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a18      	ldr	r2, [pc, #96]	; (8006028 <USB_HostInit+0x170>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d10b      	bne.n	8005fe4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fd2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a15      	ldr	r2, [pc, #84]	; (800602c <USB_HostInit+0x174>)
 8005fd8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a14      	ldr	r2, [pc, #80]	; (8006030 <USB_HostInit+0x178>)
 8005fde:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005fe2:	e009      	b.n	8005ff8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2280      	movs	r2, #128	; 0x80
 8005fe8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a11      	ldr	r2, [pc, #68]	; (8006034 <USB_HostInit+0x17c>)
 8005fee:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a11      	ldr	r2, [pc, #68]	; (8006038 <USB_HostInit+0x180>)
 8005ff4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ff8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d105      	bne.n	800600c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	f043 0210 	orr.w	r2, r3, #16
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	699a      	ldr	r2, [r3, #24]
 8006010:	4b0a      	ldr	r3, [pc, #40]	; (800603c <USB_HostInit+0x184>)
 8006012:	4313      	orrs	r3, r2
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006018:	7dfb      	ldrb	r3, [r7, #23]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3718      	adds	r7, #24
 800601e:	46bd      	mov	sp, r7
 8006020:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006024:	b004      	add	sp, #16
 8006026:	4770      	bx	lr
 8006028:	40040000 	.word	0x40040000
 800602c:	01000200 	.word	0x01000200
 8006030:	00e00300 	.word	0x00e00300
 8006034:	00600080 	.word	0x00600080
 8006038:	004000e0 	.word	0x004000e0
 800603c:	a3200008 	.word	0xa3200008

08006040 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800605e:	f023 0303 	bic.w	r3, r3, #3
 8006062:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	f003 0303 	and.w	r3, r3, #3
 8006072:	68f9      	ldr	r1, [r7, #12]
 8006074:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006078:	4313      	orrs	r3, r2
 800607a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800607c:	78fb      	ldrb	r3, [r7, #3]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d107      	bne.n	8006092 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006088:	461a      	mov	r2, r3
 800608a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800608e:	6053      	str	r3, [r2, #4]
 8006090:	e00c      	b.n	80060ac <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006092:	78fb      	ldrb	r3, [r7, #3]
 8006094:	2b02      	cmp	r3, #2
 8006096:	d107      	bne.n	80060a8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800609e:	461a      	mov	r2, r3
 80060a0:	f241 7370 	movw	r3, #6000	; 0x1770
 80060a4:	6053      	str	r3, [r2, #4]
 80060a6:	e001      	b.n	80060ac <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e000      	b.n	80060ae <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b084      	sub	sp, #16
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80060da:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060e8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80060ea:	2064      	movs	r0, #100	; 0x64
 80060ec:	f7fb f806 	bl	80010fc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060fc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80060fe:	200a      	movs	r0, #10
 8006100:	f7fa fffc 	bl	80010fc <HAL_Delay>

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	460b      	mov	r3, r1
 8006118:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800611e:	2300      	movs	r3, #0
 8006120:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006132:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d109      	bne.n	8006152 <USB_DriveVbus+0x44>
 800613e:	78fb      	ldrb	r3, [r7, #3]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d106      	bne.n	8006152 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800614c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006150:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800615c:	d109      	bne.n	8006172 <USB_DriveVbus+0x64>
 800615e:	78fb      	ldrb	r3, [r7, #3]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d106      	bne.n	8006172 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800616c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006170:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	0c5b      	lsrs	r3, r3, #17
 800619e:	f003 0303 	and.w	r3, r3, #3
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b085      	sub	sp, #20
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	b29b      	uxth	r3, r3
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	4608      	mov	r0, r1
 80061da:	4611      	mov	r1, r2
 80061dc:	461a      	mov	r2, r3
 80061de:	4603      	mov	r3, r0
 80061e0:	70fb      	strb	r3, [r7, #3]
 80061e2:	460b      	mov	r3, r1
 80061e4:	70bb      	strb	r3, [r7, #2]
 80061e6:	4613      	mov	r3, r2
 80061e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80061f2:	78fb      	ldrb	r3, [r7, #3]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fe:	461a      	mov	r2, r3
 8006200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006204:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006206:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800620a:	2b03      	cmp	r3, #3
 800620c:	d87c      	bhi.n	8006308 <USB_HC_Init+0x138>
 800620e:	a201      	add	r2, pc, #4	; (adr r2, 8006214 <USB_HC_Init+0x44>)
 8006210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006214:	08006225 	.word	0x08006225
 8006218:	080062cb 	.word	0x080062cb
 800621c:	08006225 	.word	0x08006225
 8006220:	0800628d 	.word	0x0800628d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006224:	78fb      	ldrb	r3, [r7, #3]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	4413      	add	r3, r2
 800622c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006230:	461a      	mov	r2, r3
 8006232:	f240 439d 	movw	r3, #1181	; 0x49d
 8006236:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006238:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800623c:	2b00      	cmp	r3, #0
 800623e:	da10      	bge.n	8006262 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	4413      	add	r3, r2
 8006248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	78fa      	ldrb	r2, [r7, #3]
 8006250:	0151      	lsls	r1, r2, #5
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	440a      	add	r2, r1
 8006256:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800625a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800625e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006260:	e055      	b.n	800630e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a6f      	ldr	r2, [pc, #444]	; (8006424 <USB_HC_Init+0x254>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d151      	bne.n	800630e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	4413      	add	r3, r2
 8006272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	78fa      	ldrb	r2, [r7, #3]
 800627a:	0151      	lsls	r1, r2, #5
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	440a      	add	r2, r1
 8006280:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006284:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006288:	60d3      	str	r3, [r2, #12]
      break;
 800628a:	e040      	b.n	800630e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800628c:	78fb      	ldrb	r3, [r7, #3]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	4413      	add	r3, r2
 8006294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006298:	461a      	mov	r2, r3
 800629a:	f240 639d 	movw	r3, #1693	; 0x69d
 800629e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80062a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	da34      	bge.n	8006312 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	78fa      	ldrb	r2, [r7, #3]
 80062b8:	0151      	lsls	r1, r2, #5
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	440a      	add	r2, r1
 80062be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80062c8:	e023      	b.n	8006312 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062ca:	78fb      	ldrb	r3, [r7, #3]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d6:	461a      	mov	r2, r3
 80062d8:	f240 2325 	movw	r3, #549	; 0x225
 80062dc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80062de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	da17      	bge.n	8006316 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80062e6:	78fb      	ldrb	r3, [r7, #3]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	78fa      	ldrb	r2, [r7, #3]
 80062f6:	0151      	lsls	r1, r2, #5
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	440a      	add	r2, r1
 80062fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006300:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006304:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006306:	e006      	b.n	8006316 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	77fb      	strb	r3, [r7, #31]
      break;
 800630c:	e004      	b.n	8006318 <USB_HC_Init+0x148>
      break;
 800630e:	bf00      	nop
 8006310:	e002      	b.n	8006318 <USB_HC_Init+0x148>
      break;
 8006312:	bf00      	nop
 8006314:	e000      	b.n	8006318 <USB_HC_Init+0x148>
      break;
 8006316:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006318:	78fb      	ldrb	r3, [r7, #3]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	4413      	add	r3, r2
 8006320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006324:	461a      	mov	r2, r3
 8006326:	2300      	movs	r3, #0
 8006328:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800632a:	78fb      	ldrb	r3, [r7, #3]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	4413      	add	r3, r2
 8006332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	78fa      	ldrb	r2, [r7, #3]
 800633a:	0151      	lsls	r1, r2, #5
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	440a      	add	r2, r1
 8006340:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006344:	f043 0302 	orr.w	r3, r3, #2
 8006348:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006350:	699a      	ldr	r2, [r3, #24]
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	f003 030f 	and.w	r3, r3, #15
 8006358:	2101      	movs	r1, #1
 800635a:	fa01 f303 	lsl.w	r3, r1, r3
 800635e:	6939      	ldr	r1, [r7, #16]
 8006360:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006364:	4313      	orrs	r3, r2
 8006366:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006374:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006378:	2b00      	cmp	r3, #0
 800637a:	da03      	bge.n	8006384 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800637c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	e001      	b.n	8006388 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7ff fef9 	bl	8006180 <USB_GetHostSpeed>
 800638e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006390:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006394:	2b02      	cmp	r3, #2
 8006396:	d106      	bne.n	80063a6 <USB_HC_Init+0x1d6>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2b02      	cmp	r3, #2
 800639c:	d003      	beq.n	80063a6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800639e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	e001      	b.n	80063aa <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063aa:	787b      	ldrb	r3, [r7, #1]
 80063ac:	059b      	lsls	r3, r3, #22
 80063ae:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80063b2:	78bb      	ldrb	r3, [r7, #2]
 80063b4:	02db      	lsls	r3, r3, #11
 80063b6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063ba:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80063bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80063c0:	049b      	lsls	r3, r3, #18
 80063c2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80063c6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80063c8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80063ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80063ce:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	431a      	orrs	r2, r3
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063d8:	78fa      	ldrb	r2, [r7, #3]
 80063da:	0151      	lsls	r1, r2, #5
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	440a      	add	r2, r1
 80063e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80063e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063e8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80063ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d003      	beq.n	80063fa <USB_HC_Init+0x22a>
 80063f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d10f      	bne.n	800641a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80063fa:	78fb      	ldrb	r3, [r7, #3]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	4413      	add	r3, r2
 8006402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	78fa      	ldrb	r2, [r7, #3]
 800640a:	0151      	lsls	r1, r2, #5
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	440a      	add	r2, r1
 8006410:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006414:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006418:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800641a:	7ffb      	ldrb	r3, [r7, #31]
}
 800641c:	4618      	mov	r0, r3
 800641e:	3720      	adds	r7, #32
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	40040000 	.word	0x40040000

08006428 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b08c      	sub	sp, #48	; 0x30
 800642c:	af02      	add	r7, sp, #8
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	4613      	mov	r3, r2
 8006434:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	785b      	ldrb	r3, [r3, #1]
 800643e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006444:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	4a5d      	ldr	r2, [pc, #372]	; (80065c0 <USB_HC_StartXfer+0x198>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d12f      	bne.n	80064ae <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800644e:	79fb      	ldrb	r3, [r7, #7]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d11c      	bne.n	800648e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	7c9b      	ldrb	r3, [r3, #18]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <USB_HC_StartXfer+0x3c>
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	7c9b      	ldrb	r3, [r3, #18]
 8006460:	2b02      	cmp	r3, #2
 8006462:	d124      	bne.n	80064ae <USB_HC_StartXfer+0x86>
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	799b      	ldrb	r3, [r3, #6]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d120      	bne.n	80064ae <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	4413      	add	r3, r2
 8006474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	69fa      	ldr	r2, [r7, #28]
 800647c:	0151      	lsls	r1, r2, #5
 800647e:	6a3a      	ldr	r2, [r7, #32]
 8006480:	440a      	add	r2, r1
 8006482:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648a:	60d3      	str	r3, [r2, #12]
 800648c:	e00f      	b.n	80064ae <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	791b      	ldrb	r3, [r3, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10b      	bne.n	80064ae <USB_HC_StartXfer+0x86>
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	795b      	ldrb	r3, [r3, #5]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d107      	bne.n	80064ae <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	785b      	ldrb	r3, [r3, #1]
 80064a2:	4619      	mov	r1, r3
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 fb6b 	bl	8006b80 <USB_DoPing>
        return HAL_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	e232      	b.n	8006914 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	799b      	ldrb	r3, [r3, #6]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d158      	bne.n	8006568 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80064b6:	2301      	movs	r3, #1
 80064b8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	78db      	ldrb	r3, [r3, #3]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d007      	beq.n	80064d2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80064c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	8a92      	ldrh	r2, [r2, #20]
 80064c8:	fb03 f202 	mul.w	r2, r3, r2
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	61da      	str	r2, [r3, #28]
 80064d0:	e07c      	b.n	80065cc <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	7c9b      	ldrb	r3, [r3, #18]
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d130      	bne.n	800653c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	2bbc      	cmp	r3, #188	; 0xbc
 80064e0:	d918      	bls.n	8006514 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	8a9b      	ldrh	r3, [r3, #20]
 80064e6:	461a      	mov	r2, r3
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	69da      	ldr	r2, [r3, #28]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d003      	beq.n	8006504 <USB_HC_StartXfer+0xdc>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	2b02      	cmp	r3, #2
 8006502:	d103      	bne.n	800650c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2202      	movs	r2, #2
 8006508:	60da      	str	r2, [r3, #12]
 800650a:	e05f      	b.n	80065cc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2201      	movs	r2, #1
 8006510:	60da      	str	r2, [r3, #12]
 8006512:	e05b      	b.n	80065cc <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	6a1a      	ldr	r2, [r3, #32]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d007      	beq.n	8006534 <USB_HC_StartXfer+0x10c>
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	2b02      	cmp	r3, #2
 800652a:	d003      	beq.n	8006534 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2204      	movs	r2, #4
 8006530:	60da      	str	r2, [r3, #12]
 8006532:	e04b      	b.n	80065cc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2203      	movs	r2, #3
 8006538:	60da      	str	r2, [r3, #12]
 800653a:	e047      	b.n	80065cc <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800653c:	79fb      	ldrb	r3, [r7, #7]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d10d      	bne.n	800655e <USB_HC_StartXfer+0x136>
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	8a92      	ldrh	r2, [r2, #20]
 800654a:	4293      	cmp	r3, r2
 800654c:	d907      	bls.n	800655e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800654e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	8a92      	ldrh	r2, [r2, #20]
 8006554:	fb03 f202 	mul.w	r2, r3, r2
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	61da      	str	r2, [r3, #28]
 800655c:	e036      	b.n	80065cc <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	6a1a      	ldr	r2, [r3, #32]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	61da      	str	r2, [r3, #28]
 8006566:	e031      	b.n	80065cc <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d018      	beq.n	80065a2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	8a92      	ldrh	r2, [r2, #20]
 8006578:	4413      	add	r3, r2
 800657a:	3b01      	subs	r3, #1
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	8a92      	ldrh	r2, [r2, #20]
 8006580:	fbb3 f3f2 	udiv	r3, r3, r2
 8006584:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8006586:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006588:	8b7b      	ldrh	r3, [r7, #26]
 800658a:	429a      	cmp	r2, r3
 800658c:	d90b      	bls.n	80065a6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800658e:	8b7b      	ldrh	r3, [r7, #26]
 8006590:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006592:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	8a92      	ldrh	r2, [r2, #20]
 8006598:	fb03 f202 	mul.w	r2, r3, r2
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	61da      	str	r2, [r3, #28]
 80065a0:	e001      	b.n	80065a6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80065a2:	2301      	movs	r3, #1
 80065a4:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	78db      	ldrb	r3, [r3, #3]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80065ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	8a92      	ldrh	r2, [r2, #20]
 80065b4:	fb03 f202 	mul.w	r2, r3, r2
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	61da      	str	r2, [r3, #28]
 80065bc:	e006      	b.n	80065cc <USB_HC_StartXfer+0x1a4>
 80065be:	bf00      	nop
 80065c0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	6a1a      	ldr	r2, [r3, #32]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065d6:	04d9      	lsls	r1, r3, #19
 80065d8:	4ba3      	ldr	r3, [pc, #652]	; (8006868 <USB_HC_StartXfer+0x440>)
 80065da:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065dc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	7d9b      	ldrb	r3, [r3, #22]
 80065e2:	075b      	lsls	r3, r3, #29
 80065e4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065e8:	69f9      	ldr	r1, [r7, #28]
 80065ea:	0148      	lsls	r0, r1, #5
 80065ec:	6a39      	ldr	r1, [r7, #32]
 80065ee:	4401      	add	r1, r0
 80065f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065f4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065f6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80065f8:	79fb      	ldrb	r3, [r7, #7]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d009      	beq.n	8006612 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	6999      	ldr	r1, [r3, #24]
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	4413      	add	r3, r2
 800660a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660e:	460a      	mov	r2, r1
 8006610:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	bf0c      	ite	eq
 8006622:	2301      	moveq	r3, #1
 8006624:	2300      	movne	r3, #0
 8006626:	b2db      	uxtb	r3, r3
 8006628:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	4413      	add	r3, r2
 8006632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	69fa      	ldr	r2, [r7, #28]
 800663a:	0151      	lsls	r1, r2, #5
 800663c:	6a3a      	ldr	r2, [r7, #32]
 800663e:	440a      	add	r2, r1
 8006640:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006644:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006648:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	4413      	add	r3, r2
 8006652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	7e7b      	ldrb	r3, [r7, #25]
 800665a:	075b      	lsls	r3, r3, #29
 800665c:	69f9      	ldr	r1, [r7, #28]
 800665e:	0148      	lsls	r0, r1, #5
 8006660:	6a39      	ldr	r1, [r7, #32]
 8006662:	4401      	add	r1, r0
 8006664:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006668:	4313      	orrs	r3, r2
 800666a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	799b      	ldrb	r3, [r3, #6]
 8006670:	2b01      	cmp	r3, #1
 8006672:	f040 80c3 	bne.w	80067fc <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	7c5b      	ldrb	r3, [r3, #17]
 800667a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006680:	4313      	orrs	r3, r2
 8006682:	69fa      	ldr	r2, [r7, #28]
 8006684:	0151      	lsls	r1, r2, #5
 8006686:	6a3a      	ldr	r2, [r7, #32]
 8006688:	440a      	add	r2, r1
 800668a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800668e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006692:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	4413      	add	r3, r2
 800669c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	69fa      	ldr	r2, [r7, #28]
 80066a4:	0151      	lsls	r1, r2, #5
 80066a6:	6a3a      	ldr	r2, [r7, #32]
 80066a8:	440a      	add	r2, r1
 80066aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80066b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	79db      	ldrb	r3, [r3, #7]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d123      	bne.n	8006704 <USB_HC_StartXfer+0x2dc>
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	78db      	ldrb	r3, [r3, #3]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d11f      	bne.n	8006704 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	69fa      	ldr	r2, [r7, #28]
 80066d4:	0151      	lsls	r1, r2, #5
 80066d6:	6a3a      	ldr	r2, [r7, #32]
 80066d8:	440a      	add	r2, r1
 80066da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066e2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	6a3b      	ldr	r3, [r7, #32]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	0151      	lsls	r1, r2, #5
 80066f6:	6a3a      	ldr	r2, [r7, #32]
 80066f8:	440a      	add	r2, r1
 80066fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006702:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	7c9b      	ldrb	r3, [r3, #18]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d003      	beq.n	8006714 <USB_HC_StartXfer+0x2ec>
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	7c9b      	ldrb	r3, [r3, #18]
 8006710:	2b03      	cmp	r3, #3
 8006712:	d117      	bne.n	8006744 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006718:	2b01      	cmp	r3, #1
 800671a:	d113      	bne.n	8006744 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	78db      	ldrb	r3, [r3, #3]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d10f      	bne.n	8006744 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	4413      	add	r3, r2
 800672c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	69fa      	ldr	r2, [r7, #28]
 8006734:	0151      	lsls	r1, r2, #5
 8006736:	6a3a      	ldr	r2, [r7, #32]
 8006738:	440a      	add	r2, r1
 800673a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800673e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006742:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	7c9b      	ldrb	r3, [r3, #18]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d162      	bne.n	8006812 <USB_HC_StartXfer+0x3ea>
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	78db      	ldrb	r3, [r3, #3]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d15e      	bne.n	8006812 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	3b01      	subs	r3, #1
 800675a:	2b03      	cmp	r3, #3
 800675c:	d858      	bhi.n	8006810 <USB_HC_StartXfer+0x3e8>
 800675e:	a201      	add	r2, pc, #4	; (adr r2, 8006764 <USB_HC_StartXfer+0x33c>)
 8006760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006764:	08006775 	.word	0x08006775
 8006768:	08006797 	.word	0x08006797
 800676c:	080067b9 	.word	0x080067b9
 8006770:	080067db 	.word	0x080067db
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	4413      	add	r3, r2
 800677c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	69fa      	ldr	r2, [r7, #28]
 8006784:	0151      	lsls	r1, r2, #5
 8006786:	6a3a      	ldr	r2, [r7, #32]
 8006788:	440a      	add	r2, r1
 800678a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800678e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006792:	6053      	str	r3, [r2, #4]
          break;
 8006794:	e03d      	b.n	8006812 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	4413      	add	r3, r2
 800679e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	69fa      	ldr	r2, [r7, #28]
 80067a6:	0151      	lsls	r1, r2, #5
 80067a8:	6a3a      	ldr	r2, [r7, #32]
 80067aa:	440a      	add	r2, r1
 80067ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067b0:	f043 030e 	orr.w	r3, r3, #14
 80067b4:	6053      	str	r3, [r2, #4]
          break;
 80067b6:	e02c      	b.n	8006812 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	015a      	lsls	r2, r3, #5
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	69fa      	ldr	r2, [r7, #28]
 80067c8:	0151      	lsls	r1, r2, #5
 80067ca:	6a3a      	ldr	r2, [r7, #32]
 80067cc:	440a      	add	r2, r1
 80067ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067d6:	6053      	str	r3, [r2, #4]
          break;
 80067d8:	e01b      	b.n	8006812 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	69fa      	ldr	r2, [r7, #28]
 80067ea:	0151      	lsls	r1, r2, #5
 80067ec:	6a3a      	ldr	r2, [r7, #32]
 80067ee:	440a      	add	r2, r1
 80067f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067f8:	6053      	str	r3, [r2, #4]
          break;
 80067fa:	e00a      	b.n	8006812 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	6a3b      	ldr	r3, [r7, #32]
 8006802:	4413      	add	r3, r2
 8006804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006808:	461a      	mov	r2, r3
 800680a:	2300      	movs	r3, #0
 800680c:	6053      	str	r3, [r2, #4]
 800680e:	e000      	b.n	8006812 <USB_HC_StartXfer+0x3ea>
          break;
 8006810:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	4413      	add	r3, r2
 800681a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006828:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	78db      	ldrb	r3, [r3, #3]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d004      	beq.n	800683c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006838:	613b      	str	r3, [r7, #16]
 800683a:	e003      	b.n	8006844 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006842:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800684a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	4413      	add	r3, r2
 8006854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006858:	461a      	mov	r2, r3
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800685e:	79fb      	ldrb	r3, [r7, #7]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d003      	beq.n	800686c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	e055      	b.n	8006914 <USB_HC_StartXfer+0x4ec>
 8006868:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	78db      	ldrb	r3, [r3, #3]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d14e      	bne.n	8006912 <USB_HC_StartXfer+0x4ea>
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d04a      	beq.n	8006912 <USB_HC_StartXfer+0x4ea>
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	79db      	ldrb	r3, [r3, #7]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d146      	bne.n	8006912 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	7c9b      	ldrb	r3, [r3, #18]
 8006888:	2b03      	cmp	r3, #3
 800688a:	d831      	bhi.n	80068f0 <USB_HC_StartXfer+0x4c8>
 800688c:	a201      	add	r2, pc, #4	; (adr r2, 8006894 <USB_HC_StartXfer+0x46c>)
 800688e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006892:	bf00      	nop
 8006894:	080068a5 	.word	0x080068a5
 8006898:	080068c9 	.word	0x080068c9
 800689c:	080068a5 	.word	0x080068a5
 80068a0:	080068c9 	.word	0x080068c9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	3303      	adds	r3, #3
 80068aa:	089b      	lsrs	r3, r3, #2
 80068ac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80068ae:	8afa      	ldrh	r2, [r7, #22]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d91c      	bls.n	80068f4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	f043 0220 	orr.w	r2, r3, #32
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80068c6:	e015      	b.n	80068f4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	3303      	adds	r3, #3
 80068ce:	089b      	lsrs	r3, r3, #2
 80068d0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80068d2:	8afa      	ldrh	r2, [r7, #22]
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	b29b      	uxth	r3, r3
 80068de:	429a      	cmp	r2, r3
 80068e0:	d90a      	bls.n	80068f8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80068ee:	e003      	b.n	80068f8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80068f0:	bf00      	nop
 80068f2:	e002      	b.n	80068fa <USB_HC_StartXfer+0x4d2>
        break;
 80068f4:	bf00      	nop
 80068f6:	e000      	b.n	80068fa <USB_HC_StartXfer+0x4d2>
        break;
 80068f8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	6999      	ldr	r1, [r3, #24]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	785a      	ldrb	r2, [r3, #1]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	b29b      	uxth	r3, r3
 8006908:	2000      	movs	r0, #0
 800690a:	9000      	str	r0, [sp, #0]
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f7ff f9c9 	bl	8005ca4 <USB_WritePacket>
  }

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3728      	adds	r7, #40	; 0x28
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	b29b      	uxth	r3, r3
}
 8006932:	4618      	mov	r0, r3
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800693e:	b480      	push	{r7}
 8006940:	b089      	sub	sp, #36	; 0x24
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	460b      	mov	r3, r1
 8006948:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800694e:	78fb      	ldrb	r3, [r7, #3]
 8006950:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006952:	2300      	movs	r3, #0
 8006954:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	4413      	add	r3, r2
 800695e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	0c9b      	lsrs	r3, r3, #18
 8006966:	f003 0303 	and.w	r3, r3, #3
 800696a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	4413      	add	r3, r2
 8006974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	0fdb      	lsrs	r3, r3, #31
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	4413      	add	r3, r2
 800698a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	0fdb      	lsrs	r3, r3, #31
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f003 0320 	and.w	r3, r3, #32
 80069a0:	2b20      	cmp	r3, #32
 80069a2:	d10d      	bne.n	80069c0 <USB_HC_Halt+0x82>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10a      	bne.n	80069c0 <USB_HC_Halt+0x82>
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d005      	beq.n	80069bc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d002      	beq.n	80069bc <USB_HC_Halt+0x7e>
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d101      	bne.n	80069c0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	e0d8      	b.n	8006b72 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d002      	beq.n	80069cc <USB_HC_Halt+0x8e>
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d173      	bne.n	8006ab4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	69ba      	ldr	r2, [r7, #24]
 80069dc:	0151      	lsls	r1, r2, #5
 80069de:	69fa      	ldr	r2, [r7, #28]
 80069e0:	440a      	add	r2, r1
 80069e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069ea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f003 0320 	and.w	r3, r3, #32
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d14a      	bne.n	8006a8e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d133      	bne.n	8006a6c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	0151      	lsls	r1, r2, #5
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	440a      	add	r2, r1
 8006a1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a22:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	0151      	lsls	r1, r2, #5
 8006a36:	69fa      	ldr	r2, [r7, #28]
 8006a38:	440a      	add	r2, r1
 8006a3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a42:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	3301      	adds	r3, #1
 8006a48:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a50:	d82e      	bhi.n	8006ab0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a68:	d0ec      	beq.n	8006a44 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a6a:	e081      	b.n	8006b70 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	0151      	lsls	r1, r2, #5
 8006a7e:	69fa      	ldr	r2, [r7, #28]
 8006a80:	440a      	add	r2, r1
 8006a82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a8a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a8c:	e070      	b.n	8006b70 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	0151      	lsls	r1, r2, #5
 8006aa0:	69fa      	ldr	r2, [r7, #28]
 8006aa2:	440a      	add	r2, r1
 8006aa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006aac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006aae:	e05f      	b.n	8006b70 <USB_HC_Halt+0x232>
            break;
 8006ab0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ab2:	e05d      	b.n	8006b70 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	0151      	lsls	r1, r2, #5
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	440a      	add	r2, r1
 8006aca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ace:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ad2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d133      	bne.n	8006b4c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	0151      	lsls	r1, r2, #5
 8006af6:	69fa      	ldr	r2, [r7, #28]
 8006af8:	440a      	add	r2, r1
 8006afa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006afe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b02:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	015a      	lsls	r2, r3, #5
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	0151      	lsls	r1, r2, #5
 8006b16:	69fa      	ldr	r2, [r7, #28]
 8006b18:	440a      	add	r2, r1
 8006b1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b22:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	3301      	adds	r3, #1
 8006b28:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b30:	d81d      	bhi.n	8006b6e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b48:	d0ec      	beq.n	8006b24 <USB_HC_Halt+0x1e6>
 8006b4a:	e011      	b.n	8006b70 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	69ba      	ldr	r2, [r7, #24]
 8006b5c:	0151      	lsls	r1, r2, #5
 8006b5e:	69fa      	ldr	r2, [r7, #28]
 8006b60:	440a      	add	r2, r1
 8006b62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	e000      	b.n	8006b70 <USB_HC_Halt+0x232>
          break;
 8006b6e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3724      	adds	r7, #36	; 0x24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
	...

08006b80 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006b90:	78fb      	ldrb	r3, [r7, #3]
 8006b92:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006b94:	2301      	movs	r3, #1
 8006b96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	04da      	lsls	r2, r3, #19
 8006b9c:	4b15      	ldr	r3, [pc, #84]	; (8006bf4 <USB_DoPing+0x74>)
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	0151      	lsls	r1, r2, #5
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	440a      	add	r2, r1
 8006ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bb0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bc8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bd0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bde:	461a      	mov	r2, r3
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	371c      	adds	r7, #28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	1ff80000 	.word	0x1ff80000

08006bf8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b088      	sub	sp, #32
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7fe ff8c 	bl	8005b2a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c12:	2110      	movs	r1, #16
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7fe ffe5 	bl	8005be4 <USB_FlushTxFifo>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7ff f80f 	bl	8005c48 <USB_FlushRxFifo>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006c34:	2300      	movs	r3, #0
 8006c36:	61bb      	str	r3, [r7, #24]
 8006c38:	e01f      	b.n	8006c7a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c50:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c58:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c60:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6e:	461a      	mov	r2, r3
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	3301      	adds	r3, #1
 8006c78:	61bb      	str	r3, [r7, #24]
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	2b0f      	cmp	r3, #15
 8006c7e:	d9dc      	bls.n	8006c3a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006c80:	2300      	movs	r3, #0
 8006c82:	61bb      	str	r3, [r7, #24]
 8006c84:	e034      	b.n	8006cf0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c9c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ca4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cba:	461a      	mov	r2, r3
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ccc:	d80c      	bhi.n	8006ce8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ce4:	d0ec      	beq.n	8006cc0 <USB_StopHost+0xc8>
 8006ce6:	e000      	b.n	8006cea <USB_StopHost+0xf2>
        break;
 8006ce8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	3301      	adds	r3, #1
 8006cee:	61bb      	str	r3, [r7, #24]
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	2b0f      	cmp	r3, #15
 8006cf4:	d9c7      	bls.n	8006c86 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d02:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d0a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7fe fefb 	bl	8005b08 <USB_EnableGlobalInt>

  return ret;
 8006d12:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3720      	adds	r7, #32
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006d1c:	b590      	push	{r4, r7, lr}
 8006d1e:	b089      	sub	sp, #36	; 0x24
 8006d20:	af04      	add	r7, sp, #16
 8006d22:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006d24:	2301      	movs	r3, #1
 8006d26:	2202      	movs	r2, #2
 8006d28:	2102      	movs	r1, #2
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 fc85 	bl	800763a <USBH_FindInterface>
 8006d30:	4603      	mov	r3, r0
 8006d32:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
 8006d36:	2bff      	cmp	r3, #255	; 0xff
 8006d38:	d002      	beq.n	8006d40 <USBH_CDC_InterfaceInit+0x24>
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d901      	bls.n	8006d44 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d40:	2302      	movs	r3, #2
 8006d42:	e13d      	b.n	8006fc0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fc5a 	bl	8007602 <USBH_SelectInterface>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006d52:	7bbb      	ldrb	r3, [r7, #14]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d001      	beq.n	8006d5c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e131      	b.n	8006fc0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006d62:	2050      	movs	r0, #80	; 0x50
 8006d64:	f002 fb74 	bl	8009450 <malloc>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d72:	69db      	ldr	r3, [r3, #28]
 8006d74:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e11f      	b.n	8006fc0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006d80:	2250      	movs	r2, #80	; 0x50
 8006d82:	2100      	movs	r1, #0
 8006d84:	68b8      	ldr	r0, [r7, #8]
 8006d86:	f002 fe15 	bl	80099b4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	211a      	movs	r1, #26
 8006d90:	fb01 f303 	mul.w	r3, r1, r3
 8006d94:	4413      	add	r3, r2
 8006d96:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	b25b      	sxtb	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	da15      	bge.n	8006dce <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	211a      	movs	r1, #26
 8006da8:	fb01 f303 	mul.w	r3, r1, r3
 8006dac:	4413      	add	r3, r2
 8006dae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006db2:	781a      	ldrb	r2, [r3, #0]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	211a      	movs	r1, #26
 8006dbe:	fb01 f303 	mul.w	r3, r1, r3
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006dc8:	881a      	ldrh	r2, [r3, #0]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	785b      	ldrb	r3, [r3, #1]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f001 ffce 	bl	8008d76 <USBH_AllocPipe>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	461a      	mov	r2, r3
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	7819      	ldrb	r1, [r3, #0]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	7858      	ldrb	r0, [r3, #1]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	8952      	ldrh	r2, [r2, #10]
 8006dfa:	9202      	str	r2, [sp, #8]
 8006dfc:	2203      	movs	r2, #3
 8006dfe:	9201      	str	r2, [sp, #4]
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	4623      	mov	r3, r4
 8006e04:	4602      	mov	r2, r0
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 ff86 	bl	8008d18 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	2200      	movs	r2, #0
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f002 fa95 	bl	8009344 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	210a      	movs	r1, #10
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fc0a 	bl	800763a <USBH_FindInterface>
 8006e26:	4603      	mov	r3, r0
 8006e28:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	2bff      	cmp	r3, #255	; 0xff
 8006e2e:	d002      	beq.n	8006e36 <USBH_CDC_InterfaceInit+0x11a>
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d901      	bls.n	8006e3a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e36:	2302      	movs	r3, #2
 8006e38:	e0c2      	b.n	8006fc0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	211a      	movs	r1, #26
 8006e40:	fb01 f303 	mul.w	r3, r1, r3
 8006e44:	4413      	add	r3, r2
 8006e46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	b25b      	sxtb	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	da16      	bge.n	8006e80 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	211a      	movs	r1, #26
 8006e58:	fb01 f303 	mul.w	r3, r1, r3
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e62:	781a      	ldrb	r2, [r3, #0]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	211a      	movs	r1, #26
 8006e6e:	fb01 f303 	mul.w	r3, r1, r3
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e78:	881a      	ldrh	r2, [r3, #0]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	835a      	strh	r2, [r3, #26]
 8006e7e:	e015      	b.n	8006eac <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	211a      	movs	r1, #26
 8006e86:	fb01 f303 	mul.w	r3, r1, r3
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e90:	781a      	ldrb	r2, [r3, #0]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	211a      	movs	r1, #26
 8006e9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ea6:	881a      	ldrh	r2, [r3, #0]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	211a      	movs	r1, #26
 8006eb2:	fb01 f303 	mul.w	r3, r1, r3
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	b25b      	sxtb	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	da16      	bge.n	8006ef2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	211a      	movs	r1, #26
 8006eca:	fb01 f303 	mul.w	r3, r1, r3
 8006ece:	4413      	add	r3, r2
 8006ed0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ed4:	781a      	ldrb	r2, [r3, #0]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	211a      	movs	r1, #26
 8006ee0:	fb01 f303 	mul.w	r3, r1, r3
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006eea:	881a      	ldrh	r2, [r3, #0]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	835a      	strh	r2, [r3, #26]
 8006ef0:	e015      	b.n	8006f1e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	211a      	movs	r1, #26
 8006ef8:	fb01 f303 	mul.w	r3, r1, r3
 8006efc:	4413      	add	r3, r2
 8006efe:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006f02:	781a      	ldrb	r2, [r3, #0]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	211a      	movs	r1, #26
 8006f0e:	fb01 f303 	mul.w	r3, r1, r3
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006f18:	881a      	ldrh	r2, [r3, #0]
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	7b9b      	ldrb	r3, [r3, #14]
 8006f22:	4619      	mov	r1, r3
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f001 ff26 	bl	8008d76 <USBH_AllocPipe>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	7bdb      	ldrb	r3, [r3, #15]
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 ff1c 	bl	8008d76 <USBH_AllocPipe>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	461a      	mov	r2, r3
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	7b59      	ldrb	r1, [r3, #13]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	7b98      	ldrb	r0, [r3, #14]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	8b12      	ldrh	r2, [r2, #24]
 8006f5e:	9202      	str	r2, [sp, #8]
 8006f60:	2202      	movs	r2, #2
 8006f62:	9201      	str	r2, [sp, #4]
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	4623      	mov	r3, r4
 8006f68:	4602      	mov	r2, r0
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 fed4 	bl	8008d18 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	7b19      	ldrb	r1, [r3, #12]
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	7bd8      	ldrb	r0, [r3, #15]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	8b52      	ldrh	r2, [r2, #26]
 8006f88:	9202      	str	r2, [sp, #8]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	9201      	str	r2, [sp, #4]
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	4623      	mov	r3, r4
 8006f92:	4602      	mov	r2, r0
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 febf 	bl	8008d18 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	7b5b      	ldrb	r3, [r3, #13]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f002 f9ca 	bl	8009344 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	7b1b      	ldrb	r3, [r3, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f002 f9c3 	bl	8009344 <USBH_LL_SetToggle>

  return USBH_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd90      	pop	{r4, r7, pc}

08006fc8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fd6:	69db      	ldr	r3, [r3, #28]
 8006fd8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00e      	beq.n	8007000 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f001 feb4 	bl	8008d56 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f001 fedf 	bl	8008db8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	7b1b      	ldrb	r3, [r3, #12]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00e      	beq.n	8007026 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	7b1b      	ldrb	r3, [r3, #12]
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f001 fea1 	bl	8008d56 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	7b1b      	ldrb	r3, [r3, #12]
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f001 fecc 	bl	8008db8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	7b5b      	ldrb	r3, [r3, #13]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00e      	beq.n	800704c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	7b5b      	ldrb	r3, [r3, #13]
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 fe8e 	bl	8008d56 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	7b5b      	ldrb	r3, [r3, #13]
 800703e:	4619      	mov	r1, r3
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f001 feb9 	bl	8008db8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00b      	beq.n	8007070 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	4618      	mov	r0, r3
 8007062:	f002 f9fd 	bl	8009460 <free>
    phost->pActiveClass->pData = 0U;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800706c:	2200      	movs	r2, #0
 800706e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	3340      	adds	r3, #64	; 0x40
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f8b1 	bl	80071fa <GetLineCoding>
 8007098:	4603      	mov	r3, r0
 800709a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800709c:	7afb      	ldrb	r3, [r7, #11]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d105      	bne.n	80070ae <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070a8:	2102      	movs	r1, #2
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80070ae:	7afb      	ldrb	r3, [r7, #11]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80070c0:	2301      	movs	r3, #1
 80070c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d877      	bhi.n	80071cc <USBH_CDC_Process+0x114>
 80070dc:	a201      	add	r2, pc, #4	; (adr r2, 80070e4 <USBH_CDC_Process+0x2c>)
 80070de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e2:	bf00      	nop
 80070e4:	080070f9 	.word	0x080070f9
 80070e8:	080070ff 	.word	0x080070ff
 80070ec:	0800712f 	.word	0x0800712f
 80070f0:	080071a3 	.word	0x080071a3
 80070f4:	080071b1 	.word	0x080071b1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80070f8:	2300      	movs	r3, #0
 80070fa:	73fb      	strb	r3, [r7, #15]
      break;
 80070fc:	e06d      	b.n	80071da <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f897 	bl	8007238 <SetLineCoding>
 800710a:	4603      	mov	r3, r0
 800710c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800710e:	7bbb      	ldrb	r3, [r7, #14]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d104      	bne.n	800711e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2202      	movs	r2, #2
 8007118:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800711c:	e058      	b.n	80071d0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800711e:	7bbb      	ldrb	r3, [r7, #14]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d055      	beq.n	80071d0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2204      	movs	r2, #4
 8007128:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800712c:	e050      	b.n	80071d0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	3340      	adds	r3, #64	; 0x40
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f860 	bl	80071fa <GetLineCoding>
 800713a:	4603      	mov	r3, r0
 800713c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800713e:	7bbb      	ldrb	r3, [r7, #14]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d126      	bne.n	8007192 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007156:	791b      	ldrb	r3, [r3, #4]
 8007158:	429a      	cmp	r2, r3
 800715a:	d13b      	bne.n	80071d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007166:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007168:	429a      	cmp	r2, r3
 800716a:	d133      	bne.n	80071d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007176:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007178:	429a      	cmp	r2, r3
 800717a:	d12b      	bne.n	80071d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007184:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007186:	429a      	cmp	r2, r3
 8007188:	d124      	bne.n	80071d4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f958 	bl	8007440 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007190:	e020      	b.n	80071d4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007192:	7bbb      	ldrb	r3, [r7, #14]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d01d      	beq.n	80071d4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	2204      	movs	r2, #4
 800719c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80071a0:	e018      	b.n	80071d4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f867 	bl	8007276 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f8da 	bl	8007362 <CDC_ProcessReception>
      break;
 80071ae:	e014      	b.n	80071da <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80071b0:	2100      	movs	r1, #0
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f001 f822 	bl	80081fc <USBH_ClrFeature>
 80071b8:	4603      	mov	r3, r0
 80071ba:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80071bc:	7bbb      	ldrb	r3, [r7, #14]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10a      	bne.n	80071d8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80071ca:	e005      	b.n	80071d8 <USBH_CDC_Process+0x120>

    default:
      break;
 80071cc:	bf00      	nop
 80071ce:	e004      	b.n	80071da <USBH_CDC_Process+0x122>
      break;
 80071d0:	bf00      	nop
 80071d2:	e002      	b.n	80071da <USBH_CDC_Process+0x122>
      break;
 80071d4:	bf00      	nop
 80071d6:	e000      	b.n	80071da <USBH_CDC_Process+0x122>
      break;
 80071d8:	bf00      	nop

  }

  return status;
 80071da:	7bfb      	ldrb	r3, [r7, #15]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b082      	sub	sp, #8
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	22a1      	movs	r2, #161	; 0xa1
 8007208:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2221      	movs	r2, #33	; 0x21
 800720e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2207      	movs	r2, #7
 8007220:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2207      	movs	r2, #7
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 fb23 	bl	8008874 <USBH_CtlReq>
 800722e:	4603      	mov	r3, r0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2221      	movs	r2, #33	; 0x21
 8007246:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2220      	movs	r2, #32
 800724c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2207      	movs	r2, #7
 800725e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	2207      	movs	r2, #7
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f001 fb04 	bl	8008874 <USBH_CtlReq>
 800726c:	4603      	mov	r3, r0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b086      	sub	sp, #24
 800727a:	af02      	add	r7, sp, #8
 800727c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007288:	2300      	movs	r3, #0
 800728a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007292:	2b01      	cmp	r3, #1
 8007294:	d002      	beq.n	800729c <CDC_ProcessTransmission+0x26>
 8007296:	2b02      	cmp	r3, #2
 8007298:	d023      	beq.n	80072e2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800729a:	e05e      	b.n	800735a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	8b12      	ldrh	r2, [r2, #24]
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d90b      	bls.n	80072c0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	69d9      	ldr	r1, [r3, #28]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	8b1a      	ldrh	r2, [r3, #24]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	7b5b      	ldrb	r3, [r3, #13]
 80072b4:	2001      	movs	r0, #1
 80072b6:	9000      	str	r0, [sp, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f001 fcea 	bl	8008c92 <USBH_BulkSendData>
 80072be:	e00b      	b.n	80072d8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	7b5b      	ldrb	r3, [r3, #13]
 80072ce:	2001      	movs	r0, #1
 80072d0:	9000      	str	r0, [sp, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f001 fcdd 	bl	8008c92 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2202      	movs	r2, #2
 80072dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80072e0:	e03b      	b.n	800735a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	7b5b      	ldrb	r3, [r3, #13]
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f002 f801 	bl	80092f0 <USBH_LL_GetURBState>
 80072ee:	4603      	mov	r3, r0
 80072f0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80072f2:	7afb      	ldrb	r3, [r7, #11]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d128      	bne.n	800734a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	8b12      	ldrh	r2, [r2, #24]
 8007300:	4293      	cmp	r3, r2
 8007302:	d90e      	bls.n	8007322 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	8b12      	ldrh	r2, [r2, #24]
 800730c:	1a9a      	subs	r2, r3, r2
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	8b12      	ldrh	r2, [r2, #24]
 800731a:	441a      	add	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	61da      	str	r2, [r3, #28]
 8007320:	e002      	b.n	8007328 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	2b00      	cmp	r3, #0
 800732e:	d004      	beq.n	800733a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007338:	e00e      	b.n	8007358 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f868 	bl	8007418 <USBH_CDC_TransmitCallback>
      break;
 8007348:	e006      	b.n	8007358 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800734a:	7afb      	ldrb	r3, [r7, #11]
 800734c:	2b02      	cmp	r3, #2
 800734e:	d103      	bne.n	8007358 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007358:	bf00      	nop
  }
}
 800735a:	bf00      	nop
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b086      	sub	sp, #24
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007374:	2300      	movs	r3, #0
 8007376:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800737e:	2b03      	cmp	r3, #3
 8007380:	d002      	beq.n	8007388 <CDC_ProcessReception+0x26>
 8007382:	2b04      	cmp	r3, #4
 8007384:	d00e      	beq.n	80073a4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007386:	e043      	b.n	8007410 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	6a19      	ldr	r1, [r3, #32]
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	8b5a      	ldrh	r2, [r3, #26]
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	7b1b      	ldrb	r3, [r3, #12]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f001 fca1 	bl	8008cdc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2204      	movs	r2, #4
 800739e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80073a2:	e035      	b.n	8007410 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	7b1b      	ldrb	r3, [r3, #12]
 80073a8:	4619      	mov	r1, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f001 ffa0 	bl	80092f0 <USBH_LL_GetURBState>
 80073b0:	4603      	mov	r3, r0
 80073b2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80073b4:	7cfb      	ldrb	r3, [r7, #19]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d129      	bne.n	800740e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	7b1b      	ldrb	r3, [r3, #12]
 80073be:	4619      	mov	r1, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 ff03 	bl	80091cc <USBH_LL_GetLastXferSize>
 80073c6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d016      	beq.n	8007400 <CDC_ProcessReception+0x9e>
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	8b5b      	ldrh	r3, [r3, #26]
 80073d6:	461a      	mov	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4293      	cmp	r3, r2
 80073dc:	d110      	bne.n	8007400 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	1ad2      	subs	r2, r2, r3
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	6a1a      	ldr	r2, [r3, #32]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	441a      	add	r2, r3
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	2203      	movs	r2, #3
 80073fa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80073fe:	e006      	b.n	800740e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f80f 	bl	800742c <USBH_CDC_ReceiveCallback>
      break;
 800740e:	bf00      	nop
  }
}
 8007410:	bf00      	nop
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	4613      	mov	r3, r2
 8007460:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d101      	bne.n	800746c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007468:	2302      	movs	r3, #2
 800746a:	e029      	b.n	80074c0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	79fa      	ldrb	r2, [r7, #7]
 8007470:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 f81f 	bl	80074c8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d003      	beq.n	80074b8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f001 fdd3 	bl	8009064 <USBH_LL_Init>

  return USBH_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074d4:	2300      	movs	r3, #0
 80074d6:	60fb      	str	r3, [r7, #12]
 80074d8:	e009      	b.n	80074ee <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	33e0      	adds	r3, #224	; 0xe0
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	2200      	movs	r2, #0
 80074e6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3301      	adds	r3, #1
 80074ec:	60fb      	str	r3, [r7, #12]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b0f      	cmp	r3, #15
 80074f2:	d9f2      	bls.n	80074da <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80074f4:	2300      	movs	r3, #0
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	e009      	b.n	800750e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007504:	2200      	movs	r2, #0
 8007506:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	3301      	adds	r3, #1
 800750c:	60fb      	str	r3, [r7, #12]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007514:	d3f1      	bcc.n	80074fa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2240      	movs	r2, #64	; 0x40
 800753a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	331c      	adds	r3, #28
 8007566:	f44f 7280 	mov.w	r2, #256	; 0x100
 800756a:	2100      	movs	r1, #0
 800756c:	4618      	mov	r0, r3
 800756e:	f002 fa21 	bl	80099b4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800757c:	2100      	movs	r1, #0
 800757e:	4618      	mov	r0, r3
 8007580:	f002 fa18 	bl	80099b4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f203 3326 	addw	r3, r3, #806	; 0x326
 800758a:	2212      	movs	r2, #18
 800758c:	2100      	movs	r1, #0
 800758e:	4618      	mov	r0, r3
 8007590:	f002 fa10 	bl	80099b4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800759a:	223e      	movs	r2, #62	; 0x3e
 800759c:	2100      	movs	r1, #0
 800759e:	4618      	mov	r0, r3
 80075a0:	f002 fa08 	bl	80099b4 <memset>

  return USBH_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b085      	sub	sp, #20
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
 80075b6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80075b8:	2300      	movs	r3, #0
 80075ba:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d016      	beq.n	80075f0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10e      	bne.n	80075ea <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80075d2:	1c59      	adds	r1, r3, #1
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	33de      	adds	r3, #222	; 0xde
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	73fb      	strb	r3, [r7, #15]
 80075e8:	e004      	b.n	80075f4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80075ea:	2302      	movs	r3, #2
 80075ec:	73fb      	strb	r3, [r7, #15]
 80075ee:	e001      	b.n	80075f4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80075f0:	2302      	movs	r3, #2
 80075f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007602:	b480      	push	{r7}
 8007604:	b085      	sub	sp, #20
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	460b      	mov	r3, r1
 800760c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007618:	78fa      	ldrb	r2, [r7, #3]
 800761a:	429a      	cmp	r2, r3
 800761c:	d204      	bcs.n	8007628 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	78fa      	ldrb	r2, [r7, #3]
 8007622:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007626:	e001      	b.n	800762c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007628:	2302      	movs	r3, #2
 800762a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800762c:	7bfb      	ldrb	r3, [r7, #15]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800763a:	b480      	push	{r7}
 800763c:	b087      	sub	sp, #28
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	4608      	mov	r0, r1
 8007644:	4611      	mov	r1, r2
 8007646:	461a      	mov	r2, r3
 8007648:	4603      	mov	r3, r0
 800764a:	70fb      	strb	r3, [r7, #3]
 800764c:	460b      	mov	r3, r1
 800764e:	70bb      	strb	r3, [r7, #2]
 8007650:	4613      	mov	r3, r2
 8007652:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007654:	2300      	movs	r3, #0
 8007656:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007658:	2300      	movs	r3, #0
 800765a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007662:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007664:	e025      	b.n	80076b2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007666:	7dfb      	ldrb	r3, [r7, #23]
 8007668:	221a      	movs	r2, #26
 800766a:	fb02 f303 	mul.w	r3, r2, r3
 800766e:	3308      	adds	r3, #8
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	4413      	add	r3, r2
 8007674:	3302      	adds	r3, #2
 8007676:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	795b      	ldrb	r3, [r3, #5]
 800767c:	78fa      	ldrb	r2, [r7, #3]
 800767e:	429a      	cmp	r2, r3
 8007680:	d002      	beq.n	8007688 <USBH_FindInterface+0x4e>
 8007682:	78fb      	ldrb	r3, [r7, #3]
 8007684:	2bff      	cmp	r3, #255	; 0xff
 8007686:	d111      	bne.n	80076ac <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800768c:	78ba      	ldrb	r2, [r7, #2]
 800768e:	429a      	cmp	r2, r3
 8007690:	d002      	beq.n	8007698 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007692:	78bb      	ldrb	r3, [r7, #2]
 8007694:	2bff      	cmp	r3, #255	; 0xff
 8007696:	d109      	bne.n	80076ac <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800769c:	787a      	ldrb	r2, [r7, #1]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d002      	beq.n	80076a8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80076a2:	787b      	ldrb	r3, [r7, #1]
 80076a4:	2bff      	cmp	r3, #255	; 0xff
 80076a6:	d101      	bne.n	80076ac <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80076a8:	7dfb      	ldrb	r3, [r7, #23]
 80076aa:	e006      	b.n	80076ba <USBH_FindInterface+0x80>
    }
    if_ix++;
 80076ac:	7dfb      	ldrb	r3, [r7, #23]
 80076ae:	3301      	adds	r3, #1
 80076b0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80076b2:	7dfb      	ldrb	r3, [r7, #23]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d9d6      	bls.n	8007666 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80076b8:	23ff      	movs	r3, #255	; 0xff
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	371c      	adds	r7, #28
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f001 fd04 	bl	80090dc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80076d4:	2101      	movs	r1, #1
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f001 fe1d 	bl	8009316 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
	...

080076e8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b088      	sub	sp, #32
 80076ec:	af04      	add	r7, sp, #16
 80076ee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80076f0:	2302      	movs	r3, #2
 80076f2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80076f4:	2300      	movs	r3, #0
 80076f6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b01      	cmp	r3, #1
 8007702:	d102      	bne.n	800770a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2203      	movs	r2, #3
 8007708:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b0b      	cmp	r3, #11
 8007712:	f200 81be 	bhi.w	8007a92 <USBH_Process+0x3aa>
 8007716:	a201      	add	r2, pc, #4	; (adr r2, 800771c <USBH_Process+0x34>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	0800774d 	.word	0x0800774d
 8007720:	0800777f 	.word	0x0800777f
 8007724:	080077e7 	.word	0x080077e7
 8007728:	08007a2d 	.word	0x08007a2d
 800772c:	08007a93 	.word	0x08007a93
 8007730:	0800788b 	.word	0x0800788b
 8007734:	080079d3 	.word	0x080079d3
 8007738:	080078c1 	.word	0x080078c1
 800773c:	080078e1 	.word	0x080078e1
 8007740:	08007901 	.word	0x08007901
 8007744:	08007945 	.word	0x08007945
 8007748:	08007a15 	.word	0x08007a15
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 819e 	beq.w	8007a96 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007760:	20c8      	movs	r0, #200	; 0xc8
 8007762:	f001 fe22 	bl	80093aa <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f001 fd15 	bl	8009196 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800777c:	e18b      	b.n	8007a96 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007784:	2b01      	cmp	r3, #1
 8007786:	d107      	bne.n	8007798 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007796:	e18d      	b.n	8007ab4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800779e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077a2:	d914      	bls.n	80077ce <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80077aa:	3301      	adds	r3, #1
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d903      	bls.n	80077c6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	220d      	movs	r2, #13
 80077c2:	701a      	strb	r2, [r3, #0]
      break;
 80077c4:	e176      	b.n	8007ab4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	701a      	strb	r2, [r3, #0]
      break;
 80077cc:	e172      	b.n	8007ab4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80077d4:	f103 020a 	add.w	r2, r3, #10
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80077de:	200a      	movs	r0, #10
 80077e0:	f001 fde3 	bl	80093aa <USBH_Delay>
      break;
 80077e4:	e166      	b.n	8007ab4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d005      	beq.n	80077fc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077f6:	2104      	movs	r1, #4
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80077fc:	2064      	movs	r0, #100	; 0x64
 80077fe:	f001 fdd4 	bl	80093aa <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f001 fca0 	bl	8009148 <USBH_LL_GetSpeed>
 8007808:	4603      	mov	r3, r0
 800780a:	461a      	mov	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2205      	movs	r2, #5
 8007816:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007818:	2100      	movs	r1, #0
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f001 faab 	bl	8008d76 <USBH_AllocPipe>
 8007820:	4603      	mov	r3, r0
 8007822:	461a      	mov	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007828:	2180      	movs	r1, #128	; 0x80
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f001 faa3 	bl	8008d76 <USBH_AllocPipe>
 8007830:	4603      	mov	r3, r0
 8007832:	461a      	mov	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	7919      	ldrb	r1, [r3, #4]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800784c:	b292      	uxth	r2, r2
 800784e:	9202      	str	r2, [sp, #8]
 8007850:	2200      	movs	r2, #0
 8007852:	9201      	str	r2, [sp, #4]
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	4603      	mov	r3, r0
 8007858:	2280      	movs	r2, #128	; 0x80
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 fa5c 	bl	8008d18 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	7959      	ldrb	r1, [r3, #5]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007874:	b292      	uxth	r2, r2
 8007876:	9202      	str	r2, [sp, #8]
 8007878:	2200      	movs	r2, #0
 800787a:	9201      	str	r2, [sp, #4]
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	4603      	mov	r3, r0
 8007880:	2200      	movs	r2, #0
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f001 fa48 	bl	8008d18 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007888:	e114      	b.n	8007ab4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f918 	bl	8007ac0 <USBH_HandleEnum>
 8007890:	4603      	mov	r3, r0
 8007892:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007894:	7bbb      	ldrb	r3, [r7, #14]
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	f040 80fe 	bne.w	8007a9a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d103      	bne.n	80078b8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2208      	movs	r2, #8
 80078b4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078b6:	e0f0      	b.n	8007a9a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2207      	movs	r2, #7
 80078bc:	701a      	strb	r2, [r3, #0]
      break;
 80078be:	e0ec      	b.n	8007a9a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 80e9 	beq.w	8007a9e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80078d2:	2101      	movs	r1, #1
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2208      	movs	r2, #8
 80078dc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80078de:	e0de      	b.n	8007a9e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	4619      	mov	r1, r3
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fc3f 	bl	800816e <USBH_SetCfg>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f040 80d5 	bne.w	8007aa2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2209      	movs	r2, #9
 80078fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078fe:	e0d0      	b.n	8007aa2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007906:	f003 0320 	and.w	r3, r3, #32
 800790a:	2b00      	cmp	r3, #0
 800790c:	d016      	beq.n	800793c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800790e:	2101      	movs	r1, #1
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fc4f 	bl	80081b4 <USBH_SetFeature>
 8007916:	4603      	mov	r3, r0
 8007918:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d103      	bne.n	800792a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	220a      	movs	r2, #10
 8007926:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007928:	e0bd      	b.n	8007aa6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800792a:	7bbb      	ldrb	r3, [r7, #14]
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b03      	cmp	r3, #3
 8007930:	f040 80b9 	bne.w	8007aa6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	220a      	movs	r2, #10
 8007938:	701a      	strb	r2, [r3, #0]
      break;
 800793a:	e0b4      	b.n	8007aa6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	220a      	movs	r2, #10
 8007940:	701a      	strb	r2, [r3, #0]
      break;
 8007942:	e0b0      	b.n	8007aa6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 80ad 	beq.w	8007aaa <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007958:	2300      	movs	r3, #0
 800795a:	73fb      	strb	r3, [r7, #15]
 800795c:	e016      	b.n	800798c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800795e:	7bfa      	ldrb	r2, [r7, #15]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	32de      	adds	r2, #222	; 0xde
 8007964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007968:	791a      	ldrb	r2, [r3, #4]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007970:	429a      	cmp	r2, r3
 8007972:	d108      	bne.n	8007986 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007974:	7bfa      	ldrb	r2, [r7, #15]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	32de      	adds	r2, #222	; 0xde
 800797a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007984:	e005      	b.n	8007992 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007986:	7bfb      	ldrb	r3, [r7, #15]
 8007988:	3301      	adds	r3, #1
 800798a:	73fb      	strb	r3, [r7, #15]
 800798c:	7bfb      	ldrb	r3, [r7, #15]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0e5      	beq.n	800795e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007998:	2b00      	cmp	r3, #0
 800799a:	d016      	beq.n	80079ca <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	4798      	blx	r3
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d109      	bne.n	80079c2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2206      	movs	r2, #6
 80079b2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079ba:	2103      	movs	r1, #3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80079c0:	e073      	b.n	8007aaa <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	220d      	movs	r2, #13
 80079c6:	701a      	strb	r2, [r3, #0]
      break;
 80079c8:	e06f      	b.n	8007aaa <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	220d      	movs	r2, #13
 80079ce:	701a      	strb	r2, [r3, #0]
      break;
 80079d0:	e06b      	b.n	8007aaa <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d017      	beq.n	8007a0c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	4798      	blx	r3
 80079e8:	4603      	mov	r3, r0
 80079ea:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80079ec:	7bbb      	ldrb	r3, [r7, #14]
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d103      	bne.n	80079fc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	220b      	movs	r2, #11
 80079f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80079fa:	e058      	b.n	8007aae <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80079fc:	7bbb      	ldrb	r3, [r7, #14]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d154      	bne.n	8007aae <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	220d      	movs	r2, #13
 8007a08:	701a      	strb	r2, [r3, #0]
      break;
 8007a0a:	e050      	b.n	8007aae <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	220d      	movs	r2, #13
 8007a10:	701a      	strb	r2, [r3, #0]
      break;
 8007a12:	e04c      	b.n	8007aae <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d049      	beq.n	8007ab2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	4798      	blx	r3
      }
      break;
 8007a2a:	e042      	b.n	8007ab2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7ff fd47 	bl	80074c8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d009      	beq.n	8007a58 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d005      	beq.n	8007a6e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a68:	2105      	movs	r1, #5
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d107      	bne.n	8007a8a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7ff fe1f 	bl	80076c6 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a88:	e014      	b.n	8007ab4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f001 fb26 	bl	80090dc <USBH_LL_Start>
      break;
 8007a90:	e010      	b.n	8007ab4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007a92:	bf00      	nop
 8007a94:	e00e      	b.n	8007ab4 <USBH_Process+0x3cc>
      break;
 8007a96:	bf00      	nop
 8007a98:	e00c      	b.n	8007ab4 <USBH_Process+0x3cc>
      break;
 8007a9a:	bf00      	nop
 8007a9c:	e00a      	b.n	8007ab4 <USBH_Process+0x3cc>
    break;
 8007a9e:	bf00      	nop
 8007aa0:	e008      	b.n	8007ab4 <USBH_Process+0x3cc>
      break;
 8007aa2:	bf00      	nop
 8007aa4:	e006      	b.n	8007ab4 <USBH_Process+0x3cc>
      break;
 8007aa6:	bf00      	nop
 8007aa8:	e004      	b.n	8007ab4 <USBH_Process+0x3cc>
      break;
 8007aaa:	bf00      	nop
 8007aac:	e002      	b.n	8007ab4 <USBH_Process+0x3cc>
      break;
 8007aae:	bf00      	nop
 8007ab0:	e000      	b.n	8007ab4 <USBH_Process+0x3cc>
      break;
 8007ab2:	bf00      	nop
  }
  return USBH_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop

08007ac0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b088      	sub	sp, #32
 8007ac4:	af04      	add	r7, sp, #16
 8007ac6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007acc:	2301      	movs	r3, #1
 8007ace:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	785b      	ldrb	r3, [r3, #1]
 8007ad4:	2b07      	cmp	r3, #7
 8007ad6:	f200 81c1 	bhi.w	8007e5c <USBH_HandleEnum+0x39c>
 8007ada:	a201      	add	r2, pc, #4	; (adr r2, 8007ae0 <USBH_HandleEnum+0x20>)
 8007adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae0:	08007b01 	.word	0x08007b01
 8007ae4:	08007bbf 	.word	0x08007bbf
 8007ae8:	08007c29 	.word	0x08007c29
 8007aec:	08007cb7 	.word	0x08007cb7
 8007af0:	08007d21 	.word	0x08007d21
 8007af4:	08007d91 	.word	0x08007d91
 8007af8:	08007dd7 	.word	0x08007dd7
 8007afc:	08007e1d 	.word	0x08007e1d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007b00:	2108      	movs	r1, #8
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fa50 	bl	8007fa8 <USBH_Get_DevDesc>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b0c:	7bbb      	ldrb	r3, [r7, #14]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d130      	bne.n	8007b74 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	7919      	ldrb	r1, [r3, #4]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007b36:	b292      	uxth	r2, r2
 8007b38:	9202      	str	r2, [sp, #8]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	9201      	str	r2, [sp, #4]
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	4603      	mov	r3, r0
 8007b42:	2280      	movs	r2, #128	; 0x80
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 f8e7 	bl	8008d18 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	7959      	ldrb	r1, [r3, #5]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b5e:	b292      	uxth	r2, r2
 8007b60:	9202      	str	r2, [sp, #8]
 8007b62:	2200      	movs	r2, #0
 8007b64:	9201      	str	r2, [sp, #4]
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f001 f8d3 	bl	8008d18 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b72:	e175      	b.n	8007e60 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	f040 8172 	bne.w	8007e60 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b82:	3301      	adds	r3, #1
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	d903      	bls.n	8007b9e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	220d      	movs	r2, #13
 8007b9a:	701a      	strb	r2, [r3, #0]
      break;
 8007b9c:	e160      	b.n	8007e60 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	795b      	ldrb	r3, [r3, #5]
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 f907 	bl	8008db8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	791b      	ldrb	r3, [r3, #4]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 f901 	bl	8008db8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	701a      	strb	r2, [r3, #0]
      break;
 8007bbc:	e150      	b.n	8007e60 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007bbe:	2112      	movs	r1, #18
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f9f1 	bl	8007fa8 <USBH_Get_DevDesc>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d103      	bne.n	8007bd8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007bd6:	e145      	b.n	8007e64 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bd8:	7bbb      	ldrb	r3, [r7, #14]
 8007bda:	2b03      	cmp	r3, #3
 8007bdc:	f040 8142 	bne.w	8007e64 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007be6:	3301      	adds	r3, #1
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d903      	bls.n	8007c02 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	220d      	movs	r2, #13
 8007bfe:	701a      	strb	r2, [r3, #0]
      break;
 8007c00:	e130      	b.n	8007e64 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	795b      	ldrb	r3, [r3, #5]
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f001 f8d5 	bl	8008db8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	791b      	ldrb	r3, [r3, #4]
 8007c12:	4619      	mov	r1, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f001 f8cf 	bl	8008db8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	701a      	strb	r2, [r3, #0]
      break;
 8007c26:	e11d      	b.n	8007e64 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007c28:	2101      	movs	r1, #1
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fa7b 	bl	8008126 <USBH_SetAddress>
 8007c30:	4603      	mov	r3, r0
 8007c32:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c34:	7bbb      	ldrb	r3, [r7, #14]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d132      	bne.n	8007ca0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007c3a:	2002      	movs	r0, #2
 8007c3c:	f001 fbb5 	bl	80093aa <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2203      	movs	r2, #3
 8007c4c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	7919      	ldrb	r1, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007c62:	b292      	uxth	r2, r2
 8007c64:	9202      	str	r2, [sp, #8]
 8007c66:	2200      	movs	r2, #0
 8007c68:	9201      	str	r2, [sp, #4]
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2280      	movs	r2, #128	; 0x80
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f001 f851 	bl	8008d18 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	7959      	ldrb	r1, [r3, #5]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c8a:	b292      	uxth	r2, r2
 8007c8c:	9202      	str	r2, [sp, #8]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	9201      	str	r2, [sp, #4]
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	4603      	mov	r3, r0
 8007c96:	2200      	movs	r2, #0
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f001 f83d 	bl	8008d18 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007c9e:	e0e3      	b.n	8007e68 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	f040 80e0 	bne.w	8007e68 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	220d      	movs	r2, #13
 8007cac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	705a      	strb	r2, [r3, #1]
      break;
 8007cb4:	e0d8      	b.n	8007e68 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007cb6:	2109      	movs	r1, #9
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f9a1 	bl	8008000 <USBH_Get_CfgDesc>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d103      	bne.n	8007cd0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2204      	movs	r2, #4
 8007ccc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007cce:	e0cd      	b.n	8007e6c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	f040 80ca 	bne.w	8007e6c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cde:	3301      	adds	r3, #1
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	d903      	bls.n	8007cfa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	220d      	movs	r2, #13
 8007cf6:	701a      	strb	r2, [r3, #0]
      break;
 8007cf8:	e0b8      	b.n	8007e6c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	795b      	ldrb	r3, [r3, #5]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f001 f859 	bl	8008db8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	791b      	ldrb	r3, [r3, #4]
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f001 f853 	bl	8008db8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	701a      	strb	r2, [r3, #0]
      break;
 8007d1e:	e0a5      	b.n	8007e6c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f969 	bl	8008000 <USBH_Get_CfgDesc>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d32:	7bbb      	ldrb	r3, [r7, #14]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d103      	bne.n	8007d40 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2205      	movs	r2, #5
 8007d3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d3e:	e097      	b.n	8007e70 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d40:	7bbb      	ldrb	r3, [r7, #14]
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	f040 8094 	bne.w	8007e70 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d4e:	3301      	adds	r3, #1
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	d903      	bls.n	8007d6a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	220d      	movs	r2, #13
 8007d66:	701a      	strb	r2, [r3, #0]
      break;
 8007d68:	e082      	b.n	8007e70 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	795b      	ldrb	r3, [r3, #5]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f001 f821 	bl	8008db8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	791b      	ldrb	r3, [r3, #4]
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f001 f81b 	bl	8008db8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	701a      	strb	r2, [r3, #0]
      break;
 8007d8e:	e06f      	b.n	8007e70 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d019      	beq.n	8007dce <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007da6:	23ff      	movs	r3, #255	; 0xff
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f953 	bl	8008054 <USBH_Get_StringDesc>
 8007dae:	4603      	mov	r3, r0
 8007db0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007db2:	7bbb      	ldrb	r3, [r7, #14]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d103      	bne.n	8007dc0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2206      	movs	r2, #6
 8007dbc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007dbe:	e059      	b.n	8007e74 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dc0:	7bbb      	ldrb	r3, [r7, #14]
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d156      	bne.n	8007e74 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2206      	movs	r2, #6
 8007dca:	705a      	strb	r2, [r3, #1]
      break;
 8007dcc:	e052      	b.n	8007e74 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2206      	movs	r2, #6
 8007dd2:	705a      	strb	r2, [r3, #1]
      break;
 8007dd4:	e04e      	b.n	8007e74 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d019      	beq.n	8007e14 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007dec:	23ff      	movs	r3, #255	; 0xff
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f930 	bl	8008054 <USBH_Get_StringDesc>
 8007df4:	4603      	mov	r3, r0
 8007df6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d103      	bne.n	8007e06 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2207      	movs	r2, #7
 8007e02:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e04:	e038      	b.n	8007e78 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e06:	7bbb      	ldrb	r3, [r7, #14]
 8007e08:	2b03      	cmp	r3, #3
 8007e0a:	d135      	bne.n	8007e78 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2207      	movs	r2, #7
 8007e10:	705a      	strb	r2, [r3, #1]
      break;
 8007e12:	e031      	b.n	8007e78 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2207      	movs	r2, #7
 8007e18:	705a      	strb	r2, [r3, #1]
      break;
 8007e1a:	e02d      	b.n	8007e78 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d017      	beq.n	8007e56 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007e32:	23ff      	movs	r3, #255	; 0xff
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f90d 	bl	8008054 <USBH_Get_StringDesc>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e3e:	7bbb      	ldrb	r3, [r7, #14]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d102      	bne.n	8007e4a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007e48:	e018      	b.n	8007e7c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e4a:	7bbb      	ldrb	r3, [r7, #14]
 8007e4c:	2b03      	cmp	r3, #3
 8007e4e:	d115      	bne.n	8007e7c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	73fb      	strb	r3, [r7, #15]
      break;
 8007e54:	e012      	b.n	8007e7c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	73fb      	strb	r3, [r7, #15]
      break;
 8007e5a:	e00f      	b.n	8007e7c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007e5c:	bf00      	nop
 8007e5e:	e00e      	b.n	8007e7e <USBH_HandleEnum+0x3be>
      break;
 8007e60:	bf00      	nop
 8007e62:	e00c      	b.n	8007e7e <USBH_HandleEnum+0x3be>
      break;
 8007e64:	bf00      	nop
 8007e66:	e00a      	b.n	8007e7e <USBH_HandleEnum+0x3be>
      break;
 8007e68:	bf00      	nop
 8007e6a:	e008      	b.n	8007e7e <USBH_HandleEnum+0x3be>
      break;
 8007e6c:	bf00      	nop
 8007e6e:	e006      	b.n	8007e7e <USBH_HandleEnum+0x3be>
      break;
 8007e70:	bf00      	nop
 8007e72:	e004      	b.n	8007e7e <USBH_HandleEnum+0x3be>
      break;
 8007e74:	bf00      	nop
 8007e76:	e002      	b.n	8007e7e <USBH_HandleEnum+0x3be>
      break;
 8007e78:	bf00      	nop
 8007e7a:	e000      	b.n	8007e7e <USBH_HandleEnum+0x3be>
      break;
 8007e7c:	bf00      	nop
  }
  return Status;
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007e9a:	bf00      	nop
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b082      	sub	sp, #8
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007eb4:	1c5a      	adds	r2, r3, #1
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f804 	bl	8007eca <USBH_HandleSof>
}
 8007ec2:	bf00      	nop
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b082      	sub	sp, #8
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b0b      	cmp	r3, #11
 8007eda:	d10a      	bne.n	8007ef2 <USBH_HandleSof+0x28>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d005      	beq.n	8007ef2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	4798      	blx	r3
  }
}
 8007ef2:	bf00      	nop
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007efa:	b480      	push	{r7}
 8007efc:	b083      	sub	sp, #12
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007f0a:	bf00      	nop
}
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007f16:	b480      	push	{r7}
 8007f18:	b083      	sub	sp, #12
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007f26:	bf00      	nop
}
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f001 f8c6 	bl	8009112 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	791b      	ldrb	r3, [r3, #4]
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 ff13 	bl	8008db8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	795b      	ldrb	r3, [r3, #5]
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 ff0d 	bl	8008db8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af02      	add	r7, sp, #8
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007fb4:	887b      	ldrh	r3, [r7, #2]
 8007fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fba:	d901      	bls.n	8007fc0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e01b      	b.n	8007ff8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007fc6:	887b      	ldrh	r3, [r7, #2]
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	4613      	mov	r3, r2
 8007fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f872 	bl	80080bc <USBH_GetDescriptor>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d109      	bne.n	8007ff6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007fe8:	887a      	ldrh	r2, [r7, #2]
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f929 	bl	8008244 <USBH_ParseDevDesc>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af02      	add	r7, sp, #8
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	460b      	mov	r3, r1
 800800a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	331c      	adds	r3, #28
 8008010:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008012:	887b      	ldrh	r3, [r7, #2]
 8008014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008018:	d901      	bls.n	800801e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800801a:	2303      	movs	r3, #3
 800801c:	e016      	b.n	800804c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800801e:	887b      	ldrh	r3, [r7, #2]
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008028:	2100      	movs	r1, #0
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f846 	bl	80080bc <USBH_GetDescriptor>
 8008030:	4603      	mov	r3, r0
 8008032:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008034:	7bfb      	ldrb	r3, [r7, #15]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d107      	bne.n	800804a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800803a:	887b      	ldrh	r3, [r7, #2]
 800803c:	461a      	mov	r2, r3
 800803e:	68b9      	ldr	r1, [r7, #8]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f9b3 	bl	80083ac <USBH_ParseCfgDesc>
 8008046:	4603      	mov	r3, r0
 8008048:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800804a:	7bfb      	ldrb	r3, [r7, #15]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b088      	sub	sp, #32
 8008058:	af02      	add	r7, sp, #8
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	607a      	str	r2, [r7, #4]
 800805e:	461a      	mov	r2, r3
 8008060:	460b      	mov	r3, r1
 8008062:	72fb      	strb	r3, [r7, #11]
 8008064:	4613      	mov	r3, r2
 8008066:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008068:	893b      	ldrh	r3, [r7, #8]
 800806a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800806e:	d802      	bhi.n	8008076 <USBH_Get_StringDesc+0x22>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008076:	2303      	movs	r3, #3
 8008078:	e01c      	b.n	80080b4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800807a:	7afb      	ldrb	r3, [r7, #11]
 800807c:	b29b      	uxth	r3, r3
 800807e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008082:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800808a:	893b      	ldrh	r3, [r7, #8]
 800808c:	9300      	str	r3, [sp, #0]
 800808e:	460b      	mov	r3, r1
 8008090:	2100      	movs	r1, #0
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f000 f812 	bl	80080bc <USBH_GetDescriptor>
 8008098:	4603      	mov	r3, r0
 800809a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800809c:	7dfb      	ldrb	r3, [r7, #23]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d107      	bne.n	80080b2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80080a8:	893a      	ldrh	r2, [r7, #8]
 80080aa:	6879      	ldr	r1, [r7, #4]
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 fb93 	bl	80087d8 <USBH_ParseStringDesc>
  }

  return status;
 80080b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3718      	adds	r7, #24
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	607b      	str	r3, [r7, #4]
 80080c6:	460b      	mov	r3, r1
 80080c8:	72fb      	strb	r3, [r7, #11]
 80080ca:	4613      	mov	r3, r2
 80080cc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	789b      	ldrb	r3, [r3, #2]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d11c      	bne.n	8008110 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80080d6:	7afb      	ldrb	r3, [r7, #11]
 80080d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2206      	movs	r2, #6
 80080e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	893a      	ldrh	r2, [r7, #8]
 80080ec:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80080ee:	893b      	ldrh	r3, [r7, #8]
 80080f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80080f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080f8:	d104      	bne.n	8008104 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f240 4209 	movw	r2, #1033	; 0x409
 8008100:	829a      	strh	r2, [r3, #20]
 8008102:	e002      	b.n	800810a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2200      	movs	r2, #0
 8008108:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	8b3a      	ldrh	r2, [r7, #24]
 800810e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008110:	8b3b      	ldrh	r3, [r7, #24]
 8008112:	461a      	mov	r2, r3
 8008114:	6879      	ldr	r1, [r7, #4]
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f000 fbac 	bl	8008874 <USBH_CtlReq>
 800811c:	4603      	mov	r3, r0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b082      	sub	sp, #8
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	460b      	mov	r3, r1
 8008130:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	789b      	ldrb	r3, [r3, #2]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d10f      	bne.n	800815a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2205      	movs	r2, #5
 8008144:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008146:	78fb      	ldrb	r3, [r7, #3]
 8008148:	b29a      	uxth	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800815a:	2200      	movs	r2, #0
 800815c:	2100      	movs	r1, #0
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fb88 	bl	8008874 <USBH_CtlReq>
 8008164:	4603      	mov	r3, r0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b082      	sub	sp, #8
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	460b      	mov	r3, r1
 8008178:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	789b      	ldrb	r3, [r3, #2]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d10e      	bne.n	80081a0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2209      	movs	r2, #9
 800818c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	887a      	ldrh	r2, [r7, #2]
 8008192:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80081a0:	2200      	movs	r2, #0
 80081a2:	2100      	movs	r1, #0
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fb65 	bl	8008874 <USBH_CtlReq>
 80081aa:	4603      	mov	r3, r0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	460b      	mov	r3, r1
 80081be:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	789b      	ldrb	r3, [r3, #2]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d10f      	bne.n	80081e8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2203      	movs	r2, #3
 80081d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80081d4:	78fb      	ldrb	r3, [r7, #3]
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80081e8:	2200      	movs	r2, #0
 80081ea:	2100      	movs	r1, #0
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fb41 	bl	8008874 <USBH_CtlReq>
 80081f2:	4603      	mov	r3, r0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	789b      	ldrb	r3, [r3, #2]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d10f      	bne.n	8008230 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008222:	78fb      	ldrb	r3, [r7, #3]
 8008224:	b29a      	uxth	r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008230:	2200      	movs	r2, #0
 8008232:	2100      	movs	r1, #0
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fb1d 	bl	8008874 <USBH_CtlReq>
 800823a:	4603      	mov	r3, r0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008244:	b480      	push	{r7}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	4613      	mov	r3, r2
 8008250:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f203 3326 	addw	r3, r3, #806	; 0x326
 8008258:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008264:	2302      	movs	r3, #2
 8008266:	e098      	b.n	800839a <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	781a      	ldrb	r2, [r3, #0]
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	785a      	ldrb	r2, [r3, #1]
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	3302      	adds	r3, #2
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	b29a      	uxth	r2, r3
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	3303      	adds	r3, #3
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	b29b      	uxth	r3, r3
 8008288:	021b      	lsls	r3, r3, #8
 800828a:	b29b      	uxth	r3, r3
 800828c:	4313      	orrs	r3, r2
 800828e:	b29a      	uxth	r2, r3
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	791a      	ldrb	r2, [r3, #4]
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	795a      	ldrb	r2, [r3, #5]
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	799a      	ldrb	r2, [r3, #6]
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	79da      	ldrb	r2, [r3, #7]
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d004      	beq.n	80082c8 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d11b      	bne.n	8008300 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	79db      	ldrb	r3, [r3, #7]
 80082cc:	2b20      	cmp	r3, #32
 80082ce:	dc0f      	bgt.n	80082f0 <USBH_ParseDevDesc+0xac>
 80082d0:	2b08      	cmp	r3, #8
 80082d2:	db0f      	blt.n	80082f4 <USBH_ParseDevDesc+0xb0>
 80082d4:	3b08      	subs	r3, #8
 80082d6:	4a34      	ldr	r2, [pc, #208]	; (80083a8 <USBH_ParseDevDesc+0x164>)
 80082d8:	fa22 f303 	lsr.w	r3, r2, r3
 80082dc:	f003 0301 	and.w	r3, r3, #1
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	bf14      	ite	ne
 80082e4:	2301      	movne	r3, #1
 80082e6:	2300      	moveq	r3, #0
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d106      	bne.n	80082fc <USBH_ParseDevDesc+0xb8>
 80082ee:	e001      	b.n	80082f4 <USBH_ParseDevDesc+0xb0>
 80082f0:	2b40      	cmp	r3, #64	; 0x40
 80082f2:	d003      	beq.n	80082fc <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	2208      	movs	r2, #8
 80082f8:	71da      	strb	r2, [r3, #7]
        break;
 80082fa:	e000      	b.n	80082fe <USBH_ParseDevDesc+0xba>
        break;
 80082fc:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80082fe:	e00e      	b.n	800831e <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008306:	2b02      	cmp	r3, #2
 8008308:	d107      	bne.n	800831a <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	79db      	ldrb	r3, [r3, #7]
 800830e:	2b08      	cmp	r3, #8
 8008310:	d005      	beq.n	800831e <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	2208      	movs	r2, #8
 8008316:	71da      	strb	r2, [r3, #7]
 8008318:	e001      	b.n	800831e <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800831a:	2303      	movs	r3, #3
 800831c:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800831e:	88fb      	ldrh	r3, [r7, #6]
 8008320:	2b08      	cmp	r3, #8
 8008322:	d939      	bls.n	8008398 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	3308      	adds	r3, #8
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	b29a      	uxth	r2, r3
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	3309      	adds	r3, #9
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	b29b      	uxth	r3, r3
 8008334:	021b      	lsls	r3, r3, #8
 8008336:	b29b      	uxth	r3, r3
 8008338:	4313      	orrs	r3, r2
 800833a:	b29a      	uxth	r2, r3
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	330a      	adds	r3, #10
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	b29a      	uxth	r2, r3
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	330b      	adds	r3, #11
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	b29b      	uxth	r3, r3
 8008350:	021b      	lsls	r3, r3, #8
 8008352:	b29b      	uxth	r3, r3
 8008354:	4313      	orrs	r3, r2
 8008356:	b29a      	uxth	r2, r3
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	330c      	adds	r3, #12
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	b29a      	uxth	r2, r3
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	330d      	adds	r3, #13
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	b29b      	uxth	r3, r3
 800836c:	021b      	lsls	r3, r3, #8
 800836e:	b29b      	uxth	r3, r3
 8008370:	4313      	orrs	r3, r2
 8008372:	b29a      	uxth	r2, r3
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	7b9a      	ldrb	r2, [r3, #14]
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	7bda      	ldrb	r2, [r3, #15]
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	7c1a      	ldrb	r2, [r3, #16]
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	7c5a      	ldrb	r2, [r3, #17]
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008398:	7dfb      	ldrb	r3, [r7, #23]
}
 800839a:	4618      	mov	r0, r3
 800839c:	371c      	adds	r7, #28
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	01000101 	.word	0x01000101

080083ac <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b08c      	sub	sp, #48	; 0x30
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	4613      	mov	r3, r2
 80083b8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80083c0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80083c8:	2300      	movs	r3, #0
 80083ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80083ce:	2300      	movs	r3, #0
 80083d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d101      	bne.n	80083de <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80083da:	2302      	movs	r3, #2
 80083dc:	e0db      	b.n	8008596 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80083e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	2b09      	cmp	r3, #9
 80083e8:	d002      	beq.n	80083f0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80083ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ec:	2209      	movs	r2, #9
 80083ee:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	781a      	ldrb	r2, [r3, #0]
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	785a      	ldrb	r2, [r3, #1]
 80083fc:	6a3b      	ldr	r3, [r7, #32]
 80083fe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	3302      	adds	r3, #2
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	b29a      	uxth	r2, r3
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	3303      	adds	r3, #3
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	b29b      	uxth	r3, r3
 8008410:	021b      	lsls	r3, r3, #8
 8008412:	b29b      	uxth	r3, r3
 8008414:	4313      	orrs	r3, r2
 8008416:	b29b      	uxth	r3, r3
 8008418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800841c:	bf28      	it	cs
 800841e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008422:	b29a      	uxth	r2, r3
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	791a      	ldrb	r2, [r3, #4]
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	795a      	ldrb	r2, [r3, #5]
 8008434:	6a3b      	ldr	r3, [r7, #32]
 8008436:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	799a      	ldrb	r2, [r3, #6]
 800843c:	6a3b      	ldr	r3, [r7, #32]
 800843e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	79da      	ldrb	r2, [r3, #7]
 8008444:	6a3b      	ldr	r3, [r7, #32]
 8008446:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	7a1a      	ldrb	r2, [r3, #8]
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008450:	88fb      	ldrh	r3, [r7, #6]
 8008452:	2b09      	cmp	r3, #9
 8008454:	f240 809d 	bls.w	8008592 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 8008458:	2309      	movs	r3, #9
 800845a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800845c:	2300      	movs	r3, #0
 800845e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008460:	e081      	b.n	8008566 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008462:	f107 0316 	add.w	r3, r7, #22
 8008466:	4619      	mov	r1, r3
 8008468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800846a:	f000 f9e8 	bl	800883e <USBH_GetNextDesc>
 800846e:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008472:	785b      	ldrb	r3, [r3, #1]
 8008474:	2b04      	cmp	r3, #4
 8008476:	d176      	bne.n	8008566 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	2b09      	cmp	r3, #9
 800847e:	d002      	beq.n	8008486 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008482:	2209      	movs	r2, #9
 8008484:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008486:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800848a:	221a      	movs	r2, #26
 800848c:	fb02 f303 	mul.w	r3, r2, r3
 8008490:	3308      	adds	r3, #8
 8008492:	6a3a      	ldr	r2, [r7, #32]
 8008494:	4413      	add	r3, r2
 8008496:	3302      	adds	r3, #2
 8008498:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800849a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800849c:	69f8      	ldr	r0, [r7, #28]
 800849e:	f000 f87e 	bl	800859e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80084a2:	2300      	movs	r3, #0
 80084a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80084a8:	2300      	movs	r3, #0
 80084aa:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80084ac:	e043      	b.n	8008536 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80084ae:	f107 0316 	add.w	r3, r7, #22
 80084b2:	4619      	mov	r1, r3
 80084b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084b6:	f000 f9c2 	bl	800883e <USBH_GetNextDesc>
 80084ba:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	785b      	ldrb	r3, [r3, #1]
 80084c0:	2b05      	cmp	r3, #5
 80084c2:	d138      	bne.n	8008536 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	795b      	ldrb	r3, [r3, #5]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d113      	bne.n	80084f4 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	d003      	beq.n	80084dc <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	799b      	ldrb	r3, [r3, #6]
 80084d8:	2b03      	cmp	r3, #3
 80084da:	d10b      	bne.n	80084f4 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	79db      	ldrb	r3, [r3, #7]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10b      	bne.n	80084fc <USBH_ParseCfgDesc+0x150>
 80084e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	2b09      	cmp	r3, #9
 80084ea:	d007      	beq.n	80084fc <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 80084ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ee:	2209      	movs	r2, #9
 80084f0:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80084f2:	e003      	b.n	80084fc <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80084f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f6:	2207      	movs	r2, #7
 80084f8:	701a      	strb	r2, [r3, #0]
 80084fa:	e000      	b.n	80084fe <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80084fc:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80084fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008502:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008506:	3201      	adds	r2, #1
 8008508:	00d2      	lsls	r2, r2, #3
 800850a:	211a      	movs	r1, #26
 800850c:	fb01 f303 	mul.w	r3, r1, r3
 8008510:	4413      	add	r3, r2
 8008512:	3308      	adds	r3, #8
 8008514:	6a3a      	ldr	r2, [r7, #32]
 8008516:	4413      	add	r3, r2
 8008518:	3304      	adds	r3, #4
 800851a:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800851c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800851e:	69b9      	ldr	r1, [r7, #24]
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f000 f870 	bl	8008606 <USBH_ParseEPDesc>
 8008526:	4603      	mov	r3, r0
 8008528:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800852c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008530:	3301      	adds	r3, #1
 8008532:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	791b      	ldrb	r3, [r3, #4]
 800853a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800853e:	429a      	cmp	r2, r3
 8008540:	d204      	bcs.n	800854c <USBH_ParseCfgDesc+0x1a0>
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	885a      	ldrh	r2, [r3, #2]
 8008546:	8afb      	ldrh	r3, [r7, #22]
 8008548:	429a      	cmp	r2, r3
 800854a:	d8b0      	bhi.n	80084ae <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	791b      	ldrb	r3, [r3, #4]
 8008550:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008554:	429a      	cmp	r2, r3
 8008556:	d201      	bcs.n	800855c <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 8008558:	2303      	movs	r3, #3
 800855a:	e01c      	b.n	8008596 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800855c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008560:	3301      	adds	r3, #1
 8008562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800856a:	2b01      	cmp	r3, #1
 800856c:	d805      	bhi.n	800857a <USBH_ParseCfgDesc+0x1ce>
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	885a      	ldrh	r2, [r3, #2]
 8008572:	8afb      	ldrh	r3, [r7, #22]
 8008574:	429a      	cmp	r2, r3
 8008576:	f63f af74 	bhi.w	8008462 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	791b      	ldrb	r3, [r3, #4]
 800857e:	2b02      	cmp	r3, #2
 8008580:	bf28      	it	cs
 8008582:	2302      	movcs	r3, #2
 8008584:	b2db      	uxtb	r3, r3
 8008586:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800858a:	429a      	cmp	r2, r3
 800858c:	d201      	bcs.n	8008592 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800858e:	2303      	movs	r3, #3
 8008590:	e001      	b.n	8008596 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8008592:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008596:	4618      	mov	r0, r3
 8008598:	3730      	adds	r7, #48	; 0x30
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800859e:	b480      	push	{r7}
 80085a0:	b083      	sub	sp, #12
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	781a      	ldrb	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	785a      	ldrb	r2, [r3, #1]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	789a      	ldrb	r2, [r3, #2]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	78da      	ldrb	r2, [r3, #3]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	3304      	adds	r3, #4
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	bf28      	it	cs
 80085d2:	2302      	movcs	r3, #2
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	795a      	ldrb	r2, [r3, #5]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	799a      	ldrb	r2, [r3, #6]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	79da      	ldrb	r2, [r3, #7]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	7a1a      	ldrb	r2, [r3, #8]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	721a      	strb	r2, [r3, #8]
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008606:	b480      	push	{r7}
 8008608:	b087      	sub	sp, #28
 800860a:	af00      	add	r7, sp, #0
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008612:	2300      	movs	r3, #0
 8008614:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	781a      	ldrb	r2, [r3, #0]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	785a      	ldrb	r2, [r3, #1]
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	789a      	ldrb	r2, [r3, #2]
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	78da      	ldrb	r2, [r3, #3]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3304      	adds	r3, #4
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	b29a      	uxth	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	3305      	adds	r3, #5
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	b29b      	uxth	r3, r3
 8008646:	021b      	lsls	r3, r3, #8
 8008648:	b29b      	uxth	r3, r3
 800864a:	4313      	orrs	r3, r2
 800864c:	b29a      	uxth	r2, r3
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	799a      	ldrb	r2, [r3, #6]
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	889b      	ldrh	r3, [r3, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d009      	beq.n	8008676 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800866a:	d804      	bhi.n	8008676 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008674:	d901      	bls.n	800867a <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8008676:	2303      	movs	r3, #3
 8008678:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008680:	2b00      	cmp	r3, #0
 8008682:	d136      	bne.n	80086f2 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	78db      	ldrb	r3, [r3, #3]
 8008688:	f003 0303 	and.w	r3, r3, #3
 800868c:	2b02      	cmp	r3, #2
 800868e:	d108      	bne.n	80086a2 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	889b      	ldrh	r3, [r3, #4]
 8008694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008698:	f240 8097 	bls.w	80087ca <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800869c:	2303      	movs	r3, #3
 800869e:	75fb      	strb	r3, [r7, #23]
 80086a0:	e093      	b.n	80087ca <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	78db      	ldrb	r3, [r3, #3]
 80086a6:	f003 0303 	and.w	r3, r3, #3
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d107      	bne.n	80086be <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	889b      	ldrh	r3, [r3, #4]
 80086b2:	2b40      	cmp	r3, #64	; 0x40
 80086b4:	f240 8089 	bls.w	80087ca <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80086b8:	2303      	movs	r3, #3
 80086ba:	75fb      	strb	r3, [r7, #23]
 80086bc:	e085      	b.n	80087ca <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	78db      	ldrb	r3, [r3, #3]
 80086c2:	f003 0303 	and.w	r3, r3, #3
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d005      	beq.n	80086d6 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	78db      	ldrb	r3, [r3, #3]
 80086ce:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80086d2:	2b03      	cmp	r3, #3
 80086d4:	d10a      	bne.n	80086ec <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	799b      	ldrb	r3, [r3, #6]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <USBH_ParseEPDesc+0xe0>
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	799b      	ldrb	r3, [r3, #6]
 80086e2:	2b10      	cmp	r3, #16
 80086e4:	d970      	bls.n	80087c8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80086e6:	2303      	movs	r3, #3
 80086e8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80086ea:	e06d      	b.n	80087c8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80086ec:	2303      	movs	r3, #3
 80086ee:	75fb      	strb	r3, [r7, #23]
 80086f0:	e06b      	b.n	80087ca <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d13c      	bne.n	8008776 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	78db      	ldrb	r3, [r3, #3]
 8008700:	f003 0303 	and.w	r3, r3, #3
 8008704:	2b02      	cmp	r3, #2
 8008706:	d005      	beq.n	8008714 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	78db      	ldrb	r3, [r3, #3]
 800870c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008710:	2b00      	cmp	r3, #0
 8008712:	d106      	bne.n	8008722 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	889b      	ldrh	r3, [r3, #4]
 8008718:	2b40      	cmp	r3, #64	; 0x40
 800871a:	d956      	bls.n	80087ca <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800871c:	2303      	movs	r3, #3
 800871e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008720:	e053      	b.n	80087ca <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	78db      	ldrb	r3, [r3, #3]
 8008726:	f003 0303 	and.w	r3, r3, #3
 800872a:	2b01      	cmp	r3, #1
 800872c:	d10e      	bne.n	800874c <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	799b      	ldrb	r3, [r3, #6]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d007      	beq.n	8008746 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800873a:	2b10      	cmp	r3, #16
 800873c:	d803      	bhi.n	8008746 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008742:	2b40      	cmp	r3, #64	; 0x40
 8008744:	d941      	bls.n	80087ca <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008746:	2303      	movs	r3, #3
 8008748:	75fb      	strb	r3, [r7, #23]
 800874a:	e03e      	b.n	80087ca <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	78db      	ldrb	r3, [r3, #3]
 8008750:	f003 0303 	and.w	r3, r3, #3
 8008754:	2b03      	cmp	r3, #3
 8008756:	d10b      	bne.n	8008770 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	799b      	ldrb	r3, [r3, #6]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d004      	beq.n	800876a <USBH_ParseEPDesc+0x164>
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	889b      	ldrh	r3, [r3, #4]
 8008764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008768:	d32f      	bcc.n	80087ca <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800876a:	2303      	movs	r3, #3
 800876c:	75fb      	strb	r3, [r7, #23]
 800876e:	e02c      	b.n	80087ca <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008770:	2303      	movs	r3, #3
 8008772:	75fb      	strb	r3, [r7, #23]
 8008774:	e029      	b.n	80087ca <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800877c:	2b02      	cmp	r3, #2
 800877e:	d120      	bne.n	80087c2 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	78db      	ldrb	r3, [r3, #3]
 8008784:	f003 0303 	and.w	r3, r3, #3
 8008788:	2b00      	cmp	r3, #0
 800878a:	d106      	bne.n	800879a <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	889b      	ldrh	r3, [r3, #4]
 8008790:	2b08      	cmp	r3, #8
 8008792:	d01a      	beq.n	80087ca <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8008794:	2303      	movs	r3, #3
 8008796:	75fb      	strb	r3, [r7, #23]
 8008798:	e017      	b.n	80087ca <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	78db      	ldrb	r3, [r3, #3]
 800879e:	f003 0303 	and.w	r3, r3, #3
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	d10a      	bne.n	80087bc <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	799b      	ldrb	r3, [r3, #6]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <USBH_ParseEPDesc+0x1b0>
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	889b      	ldrh	r3, [r3, #4]
 80087b2:	2b08      	cmp	r3, #8
 80087b4:	d909      	bls.n	80087ca <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80087b6:	2303      	movs	r3, #3
 80087b8:	75fb      	strb	r3, [r7, #23]
 80087ba:	e006      	b.n	80087ca <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80087bc:	2303      	movs	r3, #3
 80087be:	75fb      	strb	r3, [r7, #23]
 80087c0:	e003      	b.n	80087ca <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80087c2:	2303      	movs	r3, #3
 80087c4:	75fb      	strb	r3, [r7, #23]
 80087c6:	e000      	b.n	80087ca <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80087c8:	bf00      	nop
  }

  return status;
 80087ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	371c      	adds	r7, #28
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80087d8:	b480      	push	{r7}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	4613      	mov	r3, r2
 80087e4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	3301      	adds	r3, #1
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	d120      	bne.n	8008832 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	1e9a      	subs	r2, r3, #2
 80087f6:	88fb      	ldrh	r3, [r7, #6]
 80087f8:	4293      	cmp	r3, r2
 80087fa:	bf28      	it	cs
 80087fc:	4613      	movcs	r3, r2
 80087fe:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	3302      	adds	r3, #2
 8008804:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008806:	2300      	movs	r3, #0
 8008808:	82fb      	strh	r3, [r7, #22]
 800880a:	e00b      	b.n	8008824 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800880c:	8afb      	ldrh	r3, [r7, #22]
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	4413      	add	r3, r2
 8008812:	781a      	ldrb	r2, [r3, #0]
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	3301      	adds	r3, #1
 800881c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800881e:	8afb      	ldrh	r3, [r7, #22]
 8008820:	3302      	adds	r3, #2
 8008822:	82fb      	strh	r3, [r7, #22]
 8008824:	8afa      	ldrh	r2, [r7, #22]
 8008826:	8abb      	ldrh	r3, [r7, #20]
 8008828:	429a      	cmp	r2, r3
 800882a:	d3ef      	bcc.n	800880c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2200      	movs	r2, #0
 8008830:	701a      	strb	r2, [r3, #0]
  }
}
 8008832:	bf00      	nop
 8008834:	371c      	adds	r7, #28
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800883e:	b480      	push	{r7}
 8008840:	b085      	sub	sp, #20
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	881a      	ldrh	r2, [r3, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	b29b      	uxth	r3, r3
 8008852:	4413      	add	r3, r2
 8008854:	b29a      	uxth	r2, r3
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4413      	add	r3, r2
 8008864:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008866:	68fb      	ldr	r3, [r7, #12]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	4613      	mov	r3, r2
 8008880:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008882:	2301      	movs	r3, #1
 8008884:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	789b      	ldrb	r3, [r3, #2]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d002      	beq.n	8008894 <USBH_CtlReq+0x20>
 800888e:	2b02      	cmp	r3, #2
 8008890:	d00f      	beq.n	80088b2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008892:	e027      	b.n	80088e4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	88fa      	ldrh	r2, [r7, #6]
 800889e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2201      	movs	r2, #1
 80088a4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2202      	movs	r2, #2
 80088aa:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80088ac:	2301      	movs	r3, #1
 80088ae:	75fb      	strb	r3, [r7, #23]
      break;
 80088b0:	e018      	b.n	80088e4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f000 f81c 	bl	80088f0 <USBH_HandleControl>
 80088b8:	4603      	mov	r3, r0
 80088ba:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80088bc:	7dfb      	ldrb	r3, [r7, #23]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d002      	beq.n	80088c8 <USBH_CtlReq+0x54>
 80088c2:	7dfb      	ldrb	r3, [r7, #23]
 80088c4:	2b03      	cmp	r3, #3
 80088c6:	d106      	bne.n	80088d6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2201      	movs	r2, #1
 80088cc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	761a      	strb	r2, [r3, #24]
      break;
 80088d4:	e005      	b.n	80088e2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d102      	bne.n	80088e2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2201      	movs	r2, #1
 80088e0:	709a      	strb	r2, [r3, #2]
      break;
 80088e2:	bf00      	nop
  }
  return status;
 80088e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3718      	adds	r7, #24
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
	...

080088f0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af02      	add	r7, sp, #8
 80088f6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80088f8:	2301      	movs	r3, #1
 80088fa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80088fc:	2300      	movs	r3, #0
 80088fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	7e1b      	ldrb	r3, [r3, #24]
 8008904:	3b01      	subs	r3, #1
 8008906:	2b0a      	cmp	r3, #10
 8008908:	f200 8156 	bhi.w	8008bb8 <USBH_HandleControl+0x2c8>
 800890c:	a201      	add	r2, pc, #4	; (adr r2, 8008914 <USBH_HandleControl+0x24>)
 800890e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008912:	bf00      	nop
 8008914:	08008941 	.word	0x08008941
 8008918:	0800895b 	.word	0x0800895b
 800891c:	080089c5 	.word	0x080089c5
 8008920:	080089eb 	.word	0x080089eb
 8008924:	08008a23 	.word	0x08008a23
 8008928:	08008a4d 	.word	0x08008a4d
 800892c:	08008a9f 	.word	0x08008a9f
 8008930:	08008ac1 	.word	0x08008ac1
 8008934:	08008afd 	.word	0x08008afd
 8008938:	08008b23 	.word	0x08008b23
 800893c:	08008b61 	.word	0x08008b61
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f103 0110 	add.w	r1, r3, #16
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	795b      	ldrb	r3, [r3, #5]
 800894a:	461a      	mov	r2, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f943 	bl	8008bd8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2202      	movs	r2, #2
 8008956:	761a      	strb	r2, [r3, #24]
      break;
 8008958:	e139      	b.n	8008bce <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	795b      	ldrb	r3, [r3, #5]
 800895e:	4619      	mov	r1, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fcc5 	bl	80092f0 <USBH_LL_GetURBState>
 8008966:	4603      	mov	r3, r0
 8008968:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800896a:	7bbb      	ldrb	r3, [r7, #14]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d11e      	bne.n	80089ae <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	7c1b      	ldrb	r3, [r3, #16]
 8008974:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008978:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	8adb      	ldrh	r3, [r3, #22]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00a      	beq.n	8008998 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008982:	7b7b      	ldrb	r3, [r7, #13]
 8008984:	2b80      	cmp	r3, #128	; 0x80
 8008986:	d103      	bne.n	8008990 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2203      	movs	r2, #3
 800898c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800898e:	e115      	b.n	8008bbc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2205      	movs	r2, #5
 8008994:	761a      	strb	r2, [r3, #24]
      break;
 8008996:	e111      	b.n	8008bbc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008998:	7b7b      	ldrb	r3, [r7, #13]
 800899a:	2b80      	cmp	r3, #128	; 0x80
 800899c:	d103      	bne.n	80089a6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2209      	movs	r2, #9
 80089a2:	761a      	strb	r2, [r3, #24]
      break;
 80089a4:	e10a      	b.n	8008bbc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2207      	movs	r2, #7
 80089aa:	761a      	strb	r2, [r3, #24]
      break;
 80089ac:	e106      	b.n	8008bbc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	2b04      	cmp	r3, #4
 80089b2:	d003      	beq.n	80089bc <USBH_HandleControl+0xcc>
 80089b4:	7bbb      	ldrb	r3, [r7, #14]
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	f040 8100 	bne.w	8008bbc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	220b      	movs	r2, #11
 80089c0:	761a      	strb	r2, [r3, #24]
      break;
 80089c2:	e0fb      	b.n	8008bbc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6899      	ldr	r1, [r3, #8]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	899a      	ldrh	r2, [r3, #12]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	791b      	ldrb	r3, [r3, #4]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f93a 	bl	8008c56 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2204      	movs	r2, #4
 80089e6:	761a      	strb	r2, [r3, #24]
      break;
 80089e8:	e0f1      	b.n	8008bce <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	791b      	ldrb	r3, [r3, #4]
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fc7d 	bl	80092f0 <USBH_LL_GetURBState>
 80089f6:	4603      	mov	r3, r0
 80089f8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80089fa:	7bbb      	ldrb	r3, [r7, #14]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d102      	bne.n	8008a06 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2209      	movs	r2, #9
 8008a04:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008a06:	7bbb      	ldrb	r3, [r7, #14]
 8008a08:	2b05      	cmp	r3, #5
 8008a0a:	d102      	bne.n	8008a12 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a10:	e0d6      	b.n	8008bc0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008a12:	7bbb      	ldrb	r3, [r7, #14]
 8008a14:	2b04      	cmp	r3, #4
 8008a16:	f040 80d3 	bne.w	8008bc0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	220b      	movs	r2, #11
 8008a1e:	761a      	strb	r2, [r3, #24]
      break;
 8008a20:	e0ce      	b.n	8008bc0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6899      	ldr	r1, [r3, #8]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	899a      	ldrh	r2, [r3, #12]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	795b      	ldrb	r3, [r3, #5]
 8008a2e:	2001      	movs	r0, #1
 8008a30:	9000      	str	r0, [sp, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f8ea 	bl	8008c0c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2206      	movs	r2, #6
 8008a48:	761a      	strb	r2, [r3, #24]
      break;
 8008a4a:	e0c0      	b.n	8008bce <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	795b      	ldrb	r3, [r3, #5]
 8008a50:	4619      	mov	r1, r3
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fc4c 	bl	80092f0 <USBH_LL_GetURBState>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d103      	bne.n	8008a6a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2207      	movs	r2, #7
 8008a66:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a68:	e0ac      	b.n	8008bc4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008a6a:	7bbb      	ldrb	r3, [r7, #14]
 8008a6c:	2b05      	cmp	r3, #5
 8008a6e:	d105      	bne.n	8008a7c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	220c      	movs	r2, #12
 8008a74:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008a76:	2303      	movs	r3, #3
 8008a78:	73fb      	strb	r3, [r7, #15]
      break;
 8008a7a:	e0a3      	b.n	8008bc4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008a7c:	7bbb      	ldrb	r3, [r7, #14]
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d103      	bne.n	8008a8a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2205      	movs	r2, #5
 8008a86:	761a      	strb	r2, [r3, #24]
      break;
 8008a88:	e09c      	b.n	8008bc4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008a8a:	7bbb      	ldrb	r3, [r7, #14]
 8008a8c:	2b04      	cmp	r3, #4
 8008a8e:	f040 8099 	bne.w	8008bc4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	220b      	movs	r2, #11
 8008a96:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008a98:	2302      	movs	r3, #2
 8008a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a9c:	e092      	b.n	8008bc4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	791b      	ldrb	r3, [r3, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f8d5 	bl	8008c56 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2208      	movs	r2, #8
 8008abc:	761a      	strb	r2, [r3, #24]

      break;
 8008abe:	e086      	b.n	8008bce <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	791b      	ldrb	r3, [r3, #4]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fc12 	bl	80092f0 <USBH_LL_GetURBState>
 8008acc:	4603      	mov	r3, r0
 8008ace:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d105      	bne.n	8008ae2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	220d      	movs	r2, #13
 8008ada:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008adc:	2300      	movs	r3, #0
 8008ade:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ae0:	e072      	b.n	8008bc8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008ae2:	7bbb      	ldrb	r3, [r7, #14]
 8008ae4:	2b04      	cmp	r3, #4
 8008ae6:	d103      	bne.n	8008af0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	220b      	movs	r2, #11
 8008aec:	761a      	strb	r2, [r3, #24]
      break;
 8008aee:	e06b      	b.n	8008bc8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008af0:	7bbb      	ldrb	r3, [r7, #14]
 8008af2:	2b05      	cmp	r3, #5
 8008af4:	d168      	bne.n	8008bc8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008af6:	2303      	movs	r3, #3
 8008af8:	73fb      	strb	r3, [r7, #15]
      break;
 8008afa:	e065      	b.n	8008bc8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	795b      	ldrb	r3, [r3, #5]
 8008b00:	2201      	movs	r2, #1
 8008b02:	9200      	str	r2, [sp, #0]
 8008b04:	2200      	movs	r2, #0
 8008b06:	2100      	movs	r1, #0
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 f87f 	bl	8008c0c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	220a      	movs	r2, #10
 8008b1e:	761a      	strb	r2, [r3, #24]
      break;
 8008b20:	e055      	b.n	8008bce <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	795b      	ldrb	r3, [r3, #5]
 8008b26:	4619      	mov	r1, r3
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fbe1 	bl	80092f0 <USBH_LL_GetURBState>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008b32:	7bbb      	ldrb	r3, [r7, #14]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d105      	bne.n	8008b44 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	220d      	movs	r2, #13
 8008b40:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008b42:	e043      	b.n	8008bcc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d103      	bne.n	8008b52 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2209      	movs	r2, #9
 8008b4e:	761a      	strb	r2, [r3, #24]
      break;
 8008b50:	e03c      	b.n	8008bcc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
 8008b54:	2b04      	cmp	r3, #4
 8008b56:	d139      	bne.n	8008bcc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	220b      	movs	r2, #11
 8008b5c:	761a      	strb	r2, [r3, #24]
      break;
 8008b5e:	e035      	b.n	8008bcc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	7e5b      	ldrb	r3, [r3, #25]
 8008b64:	3301      	adds	r3, #1
 8008b66:	b2da      	uxtb	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	765a      	strb	r2, [r3, #25]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	7e5b      	ldrb	r3, [r3, #25]
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d806      	bhi.n	8008b82 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008b80:	e025      	b.n	8008bce <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b88:	2106      	movs	r1, #6
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	795b      	ldrb	r3, [r3, #5]
 8008b98:	4619      	mov	r1, r3
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f90c 	bl	8008db8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	791b      	ldrb	r3, [r3, #4]
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f906 	bl	8008db8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008bb2:	2302      	movs	r3, #2
 8008bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8008bb6:	e00a      	b.n	8008bce <USBH_HandleControl+0x2de>

    default:
      break;
 8008bb8:	bf00      	nop
 8008bba:	e008      	b.n	8008bce <USBH_HandleControl+0x2de>
      break;
 8008bbc:	bf00      	nop
 8008bbe:	e006      	b.n	8008bce <USBH_HandleControl+0x2de>
      break;
 8008bc0:	bf00      	nop
 8008bc2:	e004      	b.n	8008bce <USBH_HandleControl+0x2de>
      break;
 8008bc4:	bf00      	nop
 8008bc6:	e002      	b.n	8008bce <USBH_HandleControl+0x2de>
      break;
 8008bc8:	bf00      	nop
 8008bca:	e000      	b.n	8008bce <USBH_HandleControl+0x2de>
      break;
 8008bcc:	bf00      	nop
  }

  return status;
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b088      	sub	sp, #32
 8008bdc:	af04      	add	r7, sp, #16
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	4613      	mov	r3, r2
 8008be4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008be6:	79f9      	ldrb	r1, [r7, #7]
 8008be8:	2300      	movs	r3, #0
 8008bea:	9303      	str	r3, [sp, #12]
 8008bec:	2308      	movs	r3, #8
 8008bee:	9302      	str	r3, [sp, #8]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	9301      	str	r3, [sp, #4]
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 fb46 	bl	800928e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b088      	sub	sp, #32
 8008c10:	af04      	add	r7, sp, #16
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	4611      	mov	r1, r2
 8008c18:	461a      	mov	r2, r3
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	80fb      	strh	r3, [r7, #6]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d001      	beq.n	8008c30 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c30:	7979      	ldrb	r1, [r7, #5]
 8008c32:	7e3b      	ldrb	r3, [r7, #24]
 8008c34:	9303      	str	r3, [sp, #12]
 8008c36:	88fb      	ldrh	r3, [r7, #6]
 8008c38:	9302      	str	r3, [sp, #8]
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	9301      	str	r3, [sp, #4]
 8008c3e:	2301      	movs	r3, #1
 8008c40:	9300      	str	r3, [sp, #0]
 8008c42:	2300      	movs	r3, #0
 8008c44:	2200      	movs	r2, #0
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f000 fb21 	bl	800928e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b088      	sub	sp, #32
 8008c5a:	af04      	add	r7, sp, #16
 8008c5c:	60f8      	str	r0, [r7, #12]
 8008c5e:	60b9      	str	r1, [r7, #8]
 8008c60:	4611      	mov	r1, r2
 8008c62:	461a      	mov	r2, r3
 8008c64:	460b      	mov	r3, r1
 8008c66:	80fb      	strh	r3, [r7, #6]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c6c:	7979      	ldrb	r1, [r7, #5]
 8008c6e:	2300      	movs	r3, #0
 8008c70:	9303      	str	r3, [sp, #12]
 8008c72:	88fb      	ldrh	r3, [r7, #6]
 8008c74:	9302      	str	r3, [sp, #8]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	9301      	str	r3, [sp, #4]
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	2201      	movs	r2, #1
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f000 fb03 	bl	800928e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008c88:	2300      	movs	r3, #0

}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b088      	sub	sp, #32
 8008c96:	af04      	add	r7, sp, #16
 8008c98:	60f8      	str	r0, [r7, #12]
 8008c9a:	60b9      	str	r1, [r7, #8]
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	80fb      	strh	r3, [r7, #6]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008cb6:	7979      	ldrb	r1, [r7, #5]
 8008cb8:	7e3b      	ldrb	r3, [r7, #24]
 8008cba:	9303      	str	r3, [sp, #12]
 8008cbc:	88fb      	ldrh	r3, [r7, #6]
 8008cbe:	9302      	str	r3, [sp, #8]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	9301      	str	r3, [sp, #4]
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	2302      	movs	r3, #2
 8008cca:	2200      	movs	r2, #0
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 fade 	bl	800928e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b088      	sub	sp, #32
 8008ce0:	af04      	add	r7, sp, #16
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	461a      	mov	r2, r3
 8008cea:	460b      	mov	r3, r1
 8008cec:	80fb      	strh	r3, [r7, #6]
 8008cee:	4613      	mov	r3, r2
 8008cf0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008cf2:	7979      	ldrb	r1, [r7, #5]
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	9303      	str	r3, [sp, #12]
 8008cf8:	88fb      	ldrh	r3, [r7, #6]
 8008cfa:	9302      	str	r3, [sp, #8]
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	9301      	str	r3, [sp, #4]
 8008d00:	2301      	movs	r3, #1
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	2302      	movs	r3, #2
 8008d06:	2201      	movs	r2, #1
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 fac0 	bl	800928e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b086      	sub	sp, #24
 8008d1c:	af04      	add	r7, sp, #16
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	4608      	mov	r0, r1
 8008d22:	4611      	mov	r1, r2
 8008d24:	461a      	mov	r2, r3
 8008d26:	4603      	mov	r3, r0
 8008d28:	70fb      	strb	r3, [r7, #3]
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	70bb      	strb	r3, [r7, #2]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008d32:	7878      	ldrb	r0, [r7, #1]
 8008d34:	78ba      	ldrb	r2, [r7, #2]
 8008d36:	78f9      	ldrb	r1, [r7, #3]
 8008d38:	8b3b      	ldrh	r3, [r7, #24]
 8008d3a:	9302      	str	r3, [sp, #8]
 8008d3c:	7d3b      	ldrb	r3, [r7, #20]
 8008d3e:	9301      	str	r3, [sp, #4]
 8008d40:	7c3b      	ldrb	r3, [r7, #16]
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	4603      	mov	r3, r0
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fa53 	bl	80091f2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b082      	sub	sp, #8
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
 8008d5e:	460b      	mov	r3, r1
 8008d60:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008d62:	78fb      	ldrb	r3, [r7, #3]
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fa72 	bl	8009250 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b084      	sub	sp, #16
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
 8008d7e:	460b      	mov	r3, r1
 8008d80:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f836 	bl	8008df4 <USBH_GetFreePipe>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008d8c:	89fb      	ldrh	r3, [r7, #14]
 8008d8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d00a      	beq.n	8008dac <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008d96:	78fa      	ldrb	r2, [r7, #3]
 8008d98:	89fb      	ldrh	r3, [r7, #14]
 8008d9a:	f003 030f 	and.w	r3, r3, #15
 8008d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008da2:	6879      	ldr	r1, [r7, #4]
 8008da4:	33e0      	adds	r3, #224	; 0xe0
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	440b      	add	r3, r1
 8008daa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008dac:	89fb      	ldrh	r3, [r7, #14]
 8008dae:	b2db      	uxtb	r3, r3
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008dc4:	78fb      	ldrb	r3, [r7, #3]
 8008dc6:	2b0f      	cmp	r3, #15
 8008dc8:	d80d      	bhi.n	8008de6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008dca:	78fb      	ldrb	r3, [r7, #3]
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	33e0      	adds	r3, #224	; 0xe0
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	685a      	ldr	r2, [r3, #4]
 8008dd6:	78fb      	ldrb	r3, [r7, #3]
 8008dd8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008ddc:	6879      	ldr	r1, [r7, #4]
 8008dde:	33e0      	adds	r3, #224	; 0xe0
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	440b      	add	r3, r1
 8008de4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008e00:	2300      	movs	r3, #0
 8008e02:	73fb      	strb	r3, [r7, #15]
 8008e04:	e00f      	b.n	8008e26 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008e06:	7bfb      	ldrb	r3, [r7, #15]
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	33e0      	adds	r3, #224	; 0xe0
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d102      	bne.n	8008e20 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	e007      	b.n	8008e30 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
 8008e22:	3301      	adds	r3, #1
 8008e24:	73fb      	strb	r3, [r7, #15]
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
 8008e28:	2b0f      	cmp	r3, #15
 8008e2a:	d9ec      	bls.n	8008e06 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008e40:	2201      	movs	r2, #1
 8008e42:	490e      	ldr	r1, [pc, #56]	; (8008e7c <MX_USB_HOST_Init+0x40>)
 8008e44:	480e      	ldr	r0, [pc, #56]	; (8008e80 <MX_USB_HOST_Init+0x44>)
 8008e46:	f7fe fb05 	bl	8007454 <USBH_Init>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008e50:	f7f7 fde8 	bl	8000a24 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008e54:	490b      	ldr	r1, [pc, #44]	; (8008e84 <MX_USB_HOST_Init+0x48>)
 8008e56:	480a      	ldr	r0, [pc, #40]	; (8008e80 <MX_USB_HOST_Init+0x44>)
 8008e58:	f7fe fba9 	bl	80075ae <USBH_RegisterClass>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d001      	beq.n	8008e66 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008e62:	f7f7 fddf 	bl	8000a24 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008e66:	4806      	ldr	r0, [pc, #24]	; (8008e80 <MX_USB_HOST_Init+0x44>)
 8008e68:	f7fe fc2d 	bl	80076c6 <USBH_Start>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008e72:	f7f7 fdd7 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008e76:	bf00      	nop
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	08008e9d 	.word	0x08008e9d
 8008e80:	20000278 	.word	0x20000278
 8008e84:	2000000c 	.word	0x2000000c

08008e88 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008e8c:	4802      	ldr	r0, [pc, #8]	; (8008e98 <MX_USB_HOST_Process+0x10>)
 8008e8e:	f7fe fc2b 	bl	80076e8 <USBH_Process>
}
 8008e92:	bf00      	nop
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	20000278 	.word	0x20000278

08008e9c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008ea8:	78fb      	ldrb	r3, [r7, #3]
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	2b04      	cmp	r3, #4
 8008eae:	d819      	bhi.n	8008ee4 <USBH_UserProcess+0x48>
 8008eb0:	a201      	add	r2, pc, #4	; (adr r2, 8008eb8 <USBH_UserProcess+0x1c>)
 8008eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb6:	bf00      	nop
 8008eb8:	08008ee5 	.word	0x08008ee5
 8008ebc:	08008ed5 	.word	0x08008ed5
 8008ec0:	08008ee5 	.word	0x08008ee5
 8008ec4:	08008edd 	.word	0x08008edd
 8008ec8:	08008ecd 	.word	0x08008ecd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008ecc:	4b09      	ldr	r3, [pc, #36]	; (8008ef4 <USBH_UserProcess+0x58>)
 8008ece:	2203      	movs	r2, #3
 8008ed0:	701a      	strb	r2, [r3, #0]
  break;
 8008ed2:	e008      	b.n	8008ee6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008ed4:	4b07      	ldr	r3, [pc, #28]	; (8008ef4 <USBH_UserProcess+0x58>)
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	701a      	strb	r2, [r3, #0]
  break;
 8008eda:	e004      	b.n	8008ee6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008edc:	4b05      	ldr	r3, [pc, #20]	; (8008ef4 <USBH_UserProcess+0x58>)
 8008ede:	2201      	movs	r2, #1
 8008ee0:	701a      	strb	r2, [r3, #0]
  break;
 8008ee2:	e000      	b.n	8008ee6 <USBH_UserProcess+0x4a>

  default:
  break;
 8008ee4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008ee6:	bf00      	nop
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	20000650 	.word	0x20000650

08008ef8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b08a      	sub	sp, #40	; 0x28
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f00:	f107 0314 	add.w	r3, r7, #20
 8008f04:	2200      	movs	r2, #0
 8008f06:	601a      	str	r2, [r3, #0]
 8008f08:	605a      	str	r2, [r3, #4]
 8008f0a:	609a      	str	r2, [r3, #8]
 8008f0c:	60da      	str	r2, [r3, #12]
 8008f0e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f18:	d147      	bne.n	8008faa <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	613b      	str	r3, [r7, #16]
 8008f1e:	4b25      	ldr	r3, [pc, #148]	; (8008fb4 <HAL_HCD_MspInit+0xbc>)
 8008f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f22:	4a24      	ldr	r2, [pc, #144]	; (8008fb4 <HAL_HCD_MspInit+0xbc>)
 8008f24:	f043 0301 	orr.w	r3, r3, #1
 8008f28:	6313      	str	r3, [r2, #48]	; 0x30
 8008f2a:	4b22      	ldr	r3, [pc, #136]	; (8008fb4 <HAL_HCD_MspInit+0xbc>)
 8008f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	613b      	str	r3, [r7, #16]
 8008f34:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f40:	2300      	movs	r3, #0
 8008f42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008f44:	f107 0314 	add.w	r3, r7, #20
 8008f48:	4619      	mov	r1, r3
 8008f4a:	481b      	ldr	r0, [pc, #108]	; (8008fb8 <HAL_HCD_MspInit+0xc0>)
 8008f4c:	f7f8 fa0c 	bl	8001368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008f50:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f56:	2302      	movs	r3, #2
 8008f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f62:	230a      	movs	r3, #10
 8008f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f66:	f107 0314 	add.w	r3, r7, #20
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	4812      	ldr	r0, [pc, #72]	; (8008fb8 <HAL_HCD_MspInit+0xc0>)
 8008f6e:	f7f8 f9fb 	bl	8001368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f72:	4b10      	ldr	r3, [pc, #64]	; (8008fb4 <HAL_HCD_MspInit+0xbc>)
 8008f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f76:	4a0f      	ldr	r2, [pc, #60]	; (8008fb4 <HAL_HCD_MspInit+0xbc>)
 8008f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f7c:	6353      	str	r3, [r2, #52]	; 0x34
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60fb      	str	r3, [r7, #12]
 8008f82:	4b0c      	ldr	r3, [pc, #48]	; (8008fb4 <HAL_HCD_MspInit+0xbc>)
 8008f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f86:	4a0b      	ldr	r2, [pc, #44]	; (8008fb4 <HAL_HCD_MspInit+0xbc>)
 8008f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8008f8e:	4b09      	ldr	r3, [pc, #36]	; (8008fb4 <HAL_HCD_MspInit+0xbc>)
 8008f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f96:	60fb      	str	r3, [r7, #12]
 8008f98:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	2043      	movs	r0, #67	; 0x43
 8008fa0:	f7f8 f9ab 	bl	80012fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008fa4:	2043      	movs	r0, #67	; 0x43
 8008fa6:	f7f8 f9c4 	bl	8001332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008faa:	bf00      	nop
 8008fac:	3728      	adds	r7, #40	; 0x28
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	40023800 	.word	0x40023800
 8008fb8:	40020000 	.word	0x40020000

08008fbc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7fe ff6b 	bl	8007ea6 <USBH_LL_IncTimer>
}
 8008fd0:	bf00      	nop
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fe ffa3 	bl	8007f32 <USBH_LL_Connect>
}
 8008fec:	bf00      	nop
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009002:	4618      	mov	r0, r3
 8009004:	f7fe ffac 	bl	8007f60 <USBH_LL_Disconnect>
}
 8009008:	bf00      	nop
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	460b      	mov	r3, r1
 800901a:	70fb      	strb	r3, [r7, #3]
 800901c:	4613      	mov	r3, r2
 800901e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800903a:	4618      	mov	r0, r3
 800903c:	f7fe ff5d 	bl	8007efa <USBH_LL_PortEnabled>
}
 8009040:	bf00      	nop
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009056:	4618      	mov	r0, r3
 8009058:	f7fe ff5d 	bl	8007f16 <USBH_LL_PortDisabled>
}
 800905c:	bf00      	nop
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009072:	2b01      	cmp	r3, #1
 8009074:	d12a      	bne.n	80090cc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009076:	4a18      	ldr	r2, [pc, #96]	; (80090d8 <USBH_LL_Init+0x74>)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a15      	ldr	r2, [pc, #84]	; (80090d8 <USBH_LL_Init+0x74>)
 8009082:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009086:	4b14      	ldr	r3, [pc, #80]	; (80090d8 <USBH_LL_Init+0x74>)
 8009088:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800908c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800908e:	4b12      	ldr	r3, [pc, #72]	; (80090d8 <USBH_LL_Init+0x74>)
 8009090:	2208      	movs	r2, #8
 8009092:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009094:	4b10      	ldr	r3, [pc, #64]	; (80090d8 <USBH_LL_Init+0x74>)
 8009096:	2201      	movs	r2, #1
 8009098:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800909a:	4b0f      	ldr	r3, [pc, #60]	; (80090d8 <USBH_LL_Init+0x74>)
 800909c:	2200      	movs	r2, #0
 800909e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80090a0:	4b0d      	ldr	r3, [pc, #52]	; (80090d8 <USBH_LL_Init+0x74>)
 80090a2:	2202      	movs	r2, #2
 80090a4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80090a6:	4b0c      	ldr	r3, [pc, #48]	; (80090d8 <USBH_LL_Init+0x74>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80090ac:	480a      	ldr	r0, [pc, #40]	; (80090d8 <USBH_LL_Init+0x74>)
 80090ae:	f7f8 fb10 	bl	80016d2 <HAL_HCD_Init>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80090b8:	f7f7 fcb4 	bl	8000a24 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80090bc:	4806      	ldr	r0, [pc, #24]	; (80090d8 <USBH_LL_Init+0x74>)
 80090be:	f7f8 ff71 	bl	8001fa4 <HAL_HCD_GetCurrentFrame>
 80090c2:	4603      	mov	r3, r0
 80090c4:	4619      	mov	r1, r3
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7fe fede 	bl	8007e88 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	20000654 	.word	0x20000654

080090dc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7f8 fede 	bl	8001eb4 <HAL_HCD_Start>
 80090f8:	4603      	mov	r3, r0
 80090fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090fc:	7bfb      	ldrb	r3, [r7, #15]
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 f95e 	bl	80093c0 <USBH_Get_USB_Status>
 8009104:	4603      	mov	r3, r0
 8009106:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009108:	7bbb      	ldrb	r3, [r7, #14]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800911e:	2300      	movs	r3, #0
 8009120:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009128:	4618      	mov	r0, r3
 800912a:	f7f8 fee6 	bl	8001efa <HAL_HCD_Stop>
 800912e:	4603      	mov	r3, r0
 8009130:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009132:	7bfb      	ldrb	r3, [r7, #15]
 8009134:	4618      	mov	r0, r3
 8009136:	f000 f943 	bl	80093c0 <USBH_Get_USB_Status>
 800913a:	4603      	mov	r3, r0
 800913c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800913e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009150:	2301      	movs	r3, #1
 8009152:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800915a:	4618      	mov	r0, r3
 800915c:	f7f8 ff30 	bl	8001fc0 <HAL_HCD_GetCurrentSpeed>
 8009160:	4603      	mov	r3, r0
 8009162:	2b02      	cmp	r3, #2
 8009164:	d00c      	beq.n	8009180 <USBH_LL_GetSpeed+0x38>
 8009166:	2b02      	cmp	r3, #2
 8009168:	d80d      	bhi.n	8009186 <USBH_LL_GetSpeed+0x3e>
 800916a:	2b00      	cmp	r3, #0
 800916c:	d002      	beq.n	8009174 <USBH_LL_GetSpeed+0x2c>
 800916e:	2b01      	cmp	r3, #1
 8009170:	d003      	beq.n	800917a <USBH_LL_GetSpeed+0x32>
 8009172:	e008      	b.n	8009186 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009174:	2300      	movs	r3, #0
 8009176:	73fb      	strb	r3, [r7, #15]
    break;
 8009178:	e008      	b.n	800918c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800917a:	2301      	movs	r3, #1
 800917c:	73fb      	strb	r3, [r7, #15]
    break;
 800917e:	e005      	b.n	800918c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009180:	2302      	movs	r3, #2
 8009182:	73fb      	strb	r3, [r7, #15]
    break;
 8009184:	e002      	b.n	800918c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009186:	2301      	movs	r3, #1
 8009188:	73fb      	strb	r3, [r7, #15]
    break;
 800918a:	bf00      	nop
  }
  return  speed;
 800918c:	7bfb      	ldrb	r3, [r7, #15]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b084      	sub	sp, #16
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7f8 fec1 	bl	8001f34 <HAL_HCD_ResetPort>
 80091b2:	4603      	mov	r3, r0
 80091b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f000 f901 	bl	80093c0 <USBH_Get_USB_Status>
 80091be:	4603      	mov	r3, r0
 80091c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3710      	adds	r7, #16
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	460b      	mov	r3, r1
 80091d6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091de:	78fa      	ldrb	r2, [r7, #3]
 80091e0:	4611      	mov	r1, r2
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7f8 fec9 	bl	8001f7a <HAL_HCD_HC_GetXferCount>
 80091e8:	4603      	mov	r3, r0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3708      	adds	r7, #8
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80091f2:	b590      	push	{r4, r7, lr}
 80091f4:	b089      	sub	sp, #36	; 0x24
 80091f6:	af04      	add	r7, sp, #16
 80091f8:	6078      	str	r0, [r7, #4]
 80091fa:	4608      	mov	r0, r1
 80091fc:	4611      	mov	r1, r2
 80091fe:	461a      	mov	r2, r3
 8009200:	4603      	mov	r3, r0
 8009202:	70fb      	strb	r3, [r7, #3]
 8009204:	460b      	mov	r3, r1
 8009206:	70bb      	strb	r3, [r7, #2]
 8009208:	4613      	mov	r3, r2
 800920a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800921a:	787c      	ldrb	r4, [r7, #1]
 800921c:	78ba      	ldrb	r2, [r7, #2]
 800921e:	78f9      	ldrb	r1, [r7, #3]
 8009220:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009222:	9302      	str	r3, [sp, #8]
 8009224:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009228:	9301      	str	r3, [sp, #4]
 800922a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	4623      	mov	r3, r4
 8009232:	f7f8 fab5 	bl	80017a0 <HAL_HCD_HC_Init>
 8009236:	4603      	mov	r3, r0
 8009238:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800923a:	7bfb      	ldrb	r3, [r7, #15]
 800923c:	4618      	mov	r0, r3
 800923e:	f000 f8bf 	bl	80093c0 <USBH_Get_USB_Status>
 8009242:	4603      	mov	r3, r0
 8009244:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009246:	7bbb      	ldrb	r3, [r7, #14]
}
 8009248:	4618      	mov	r0, r3
 800924a:	3714      	adds	r7, #20
 800924c:	46bd      	mov	sp, r7
 800924e:	bd90      	pop	{r4, r7, pc}

08009250 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	460b      	mov	r3, r1
 800925a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800925c:	2300      	movs	r3, #0
 800925e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009260:	2300      	movs	r3, #0
 8009262:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800926a:	78fa      	ldrb	r2, [r7, #3]
 800926c:	4611      	mov	r1, r2
 800926e:	4618      	mov	r0, r3
 8009270:	f7f8 fb4e 	bl	8001910 <HAL_HCD_HC_Halt>
 8009274:	4603      	mov	r3, r0
 8009276:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009278:	7bfb      	ldrb	r3, [r7, #15]
 800927a:	4618      	mov	r0, r3
 800927c:	f000 f8a0 	bl	80093c0 <USBH_Get_USB_Status>
 8009280:	4603      	mov	r3, r0
 8009282:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009284:	7bbb      	ldrb	r3, [r7, #14]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800928e:	b590      	push	{r4, r7, lr}
 8009290:	b089      	sub	sp, #36	; 0x24
 8009292:	af04      	add	r7, sp, #16
 8009294:	6078      	str	r0, [r7, #4]
 8009296:	4608      	mov	r0, r1
 8009298:	4611      	mov	r1, r2
 800929a:	461a      	mov	r2, r3
 800929c:	4603      	mov	r3, r0
 800929e:	70fb      	strb	r3, [r7, #3]
 80092a0:	460b      	mov	r3, r1
 80092a2:	70bb      	strb	r3, [r7, #2]
 80092a4:	4613      	mov	r3, r2
 80092a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092a8:	2300      	movs	r3, #0
 80092aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80092b6:	787c      	ldrb	r4, [r7, #1]
 80092b8:	78ba      	ldrb	r2, [r7, #2]
 80092ba:	78f9      	ldrb	r1, [r7, #3]
 80092bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80092c0:	9303      	str	r3, [sp, #12]
 80092c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80092c4:	9302      	str	r3, [sp, #8]
 80092c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c8:	9301      	str	r3, [sp, #4]
 80092ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	4623      	mov	r3, r4
 80092d2:	f7f8 fb41 	bl	8001958 <HAL_HCD_HC_SubmitRequest>
 80092d6:	4603      	mov	r3, r0
 80092d8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80092da:	7bfb      	ldrb	r3, [r7, #15]
 80092dc:	4618      	mov	r0, r3
 80092de:	f000 f86f 	bl	80093c0 <USBH_Get_USB_Status>
 80092e2:	4603      	mov	r3, r0
 80092e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3714      	adds	r7, #20
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd90      	pop	{r4, r7, pc}

080092f0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	460b      	mov	r3, r1
 80092fa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009302:	78fa      	ldrb	r2, [r7, #3]
 8009304:	4611      	mov	r1, r2
 8009306:	4618      	mov	r0, r3
 8009308:	f7f8 fe22 	bl	8001f50 <HAL_HCD_HC_GetURBState>
 800930c:	4603      	mov	r3, r0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b082      	sub	sp, #8
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	460b      	mov	r3, r1
 8009320:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009328:	2b01      	cmp	r3, #1
 800932a:	d103      	bne.n	8009334 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800932c:	78fb      	ldrb	r3, [r7, #3]
 800932e:	4618      	mov	r0, r3
 8009330:	f000 f872 	bl	8009418 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009334:	20c8      	movs	r0, #200	; 0xc8
 8009336:	f7f7 fee1 	bl	80010fc <HAL_Delay>
  return USBH_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	460b      	mov	r3, r1
 800934e:	70fb      	strb	r3, [r7, #3]
 8009350:	4613      	mov	r3, r2
 8009352:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800935a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800935c:	78fa      	ldrb	r2, [r7, #3]
 800935e:	68f9      	ldr	r1, [r7, #12]
 8009360:	4613      	mov	r3, r2
 8009362:	011b      	lsls	r3, r3, #4
 8009364:	1a9b      	subs	r3, r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	440b      	add	r3, r1
 800936a:	3317      	adds	r3, #23
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00a      	beq.n	8009388 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009372:	78fa      	ldrb	r2, [r7, #3]
 8009374:	68f9      	ldr	r1, [r7, #12]
 8009376:	4613      	mov	r3, r2
 8009378:	011b      	lsls	r3, r3, #4
 800937a:	1a9b      	subs	r3, r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	440b      	add	r3, r1
 8009380:	333c      	adds	r3, #60	; 0x3c
 8009382:	78ba      	ldrb	r2, [r7, #2]
 8009384:	701a      	strb	r2, [r3, #0]
 8009386:	e009      	b.n	800939c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009388:	78fa      	ldrb	r2, [r7, #3]
 800938a:	68f9      	ldr	r1, [r7, #12]
 800938c:	4613      	mov	r3, r2
 800938e:	011b      	lsls	r3, r3, #4
 8009390:	1a9b      	subs	r3, r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	440b      	add	r3, r1
 8009396:	333d      	adds	r3, #61	; 0x3d
 8009398:	78ba      	ldrb	r2, [r7, #2]
 800939a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b082      	sub	sp, #8
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f7f7 fea2 	bl	80010fc <HAL_Delay>
}
 80093b8:	bf00      	nop
 80093ba:	3708      	adds	r7, #8
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	4603      	mov	r3, r0
 80093c8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80093ca:	2300      	movs	r3, #0
 80093cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093ce:	79fb      	ldrb	r3, [r7, #7]
 80093d0:	2b03      	cmp	r3, #3
 80093d2:	d817      	bhi.n	8009404 <USBH_Get_USB_Status+0x44>
 80093d4:	a201      	add	r2, pc, #4	; (adr r2, 80093dc <USBH_Get_USB_Status+0x1c>)
 80093d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093da:	bf00      	nop
 80093dc:	080093ed 	.word	0x080093ed
 80093e0:	080093f3 	.word	0x080093f3
 80093e4:	080093f9 	.word	0x080093f9
 80093e8:	080093ff 	.word	0x080093ff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	73fb      	strb	r3, [r7, #15]
    break;
 80093f0:	e00b      	b.n	800940a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80093f2:	2302      	movs	r3, #2
 80093f4:	73fb      	strb	r3, [r7, #15]
    break;
 80093f6:	e008      	b.n	800940a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80093f8:	2301      	movs	r3, #1
 80093fa:	73fb      	strb	r3, [r7, #15]
    break;
 80093fc:	e005      	b.n	800940a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80093fe:	2302      	movs	r3, #2
 8009400:	73fb      	strb	r3, [r7, #15]
    break;
 8009402:	e002      	b.n	800940a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009404:	2302      	movs	r3, #2
 8009406:	73fb      	strb	r3, [r7, #15]
    break;
 8009408:	bf00      	nop
  }
  return usb_status;
 800940a:	7bfb      	ldrb	r3, [r7, #15]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3714      	adds	r7, #20
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	4603      	mov	r3, r0
 8009420:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009422:	79fb      	ldrb	r3, [r7, #7]
 8009424:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009426:	79fb      	ldrb	r3, [r7, #7]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d102      	bne.n	8009432 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800942c:	2300      	movs	r3, #0
 800942e:	73fb      	strb	r3, [r7, #15]
 8009430:	e001      	b.n	8009436 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009432:	2301      	movs	r3, #1
 8009434:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009436:	7bfb      	ldrb	r3, [r7, #15]
 8009438:	461a      	mov	r2, r3
 800943a:	2101      	movs	r1, #1
 800943c:	4803      	ldr	r0, [pc, #12]	; (800944c <MX_DriverVbusFS+0x34>)
 800943e:	f7f8 f92f 	bl	80016a0 <HAL_GPIO_WritePin>
}
 8009442:	bf00      	nop
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	40020800 	.word	0x40020800

08009450 <malloc>:
 8009450:	4b02      	ldr	r3, [pc, #8]	; (800945c <malloc+0xc>)
 8009452:	4601      	mov	r1, r0
 8009454:	6818      	ldr	r0, [r3, #0]
 8009456:	f000 b82b 	b.w	80094b0 <_malloc_r>
 800945a:	bf00      	nop
 800945c:	20000084 	.word	0x20000084

08009460 <free>:
 8009460:	4b02      	ldr	r3, [pc, #8]	; (800946c <free+0xc>)
 8009462:	4601      	mov	r1, r0
 8009464:	6818      	ldr	r0, [r3, #0]
 8009466:	f000 bb31 	b.w	8009acc <_free_r>
 800946a:	bf00      	nop
 800946c:	20000084 	.word	0x20000084

08009470 <sbrk_aligned>:
 8009470:	b570      	push	{r4, r5, r6, lr}
 8009472:	4e0e      	ldr	r6, [pc, #56]	; (80094ac <sbrk_aligned+0x3c>)
 8009474:	460c      	mov	r4, r1
 8009476:	6831      	ldr	r1, [r6, #0]
 8009478:	4605      	mov	r5, r0
 800947a:	b911      	cbnz	r1, 8009482 <sbrk_aligned+0x12>
 800947c:	f000 fad6 	bl	8009a2c <_sbrk_r>
 8009480:	6030      	str	r0, [r6, #0]
 8009482:	4621      	mov	r1, r4
 8009484:	4628      	mov	r0, r5
 8009486:	f000 fad1 	bl	8009a2c <_sbrk_r>
 800948a:	1c43      	adds	r3, r0, #1
 800948c:	d00a      	beq.n	80094a4 <sbrk_aligned+0x34>
 800948e:	1cc4      	adds	r4, r0, #3
 8009490:	f024 0403 	bic.w	r4, r4, #3
 8009494:	42a0      	cmp	r0, r4
 8009496:	d007      	beq.n	80094a8 <sbrk_aligned+0x38>
 8009498:	1a21      	subs	r1, r4, r0
 800949a:	4628      	mov	r0, r5
 800949c:	f000 fac6 	bl	8009a2c <_sbrk_r>
 80094a0:	3001      	adds	r0, #1
 80094a2:	d101      	bne.n	80094a8 <sbrk_aligned+0x38>
 80094a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80094a8:	4620      	mov	r0, r4
 80094aa:	bd70      	pop	{r4, r5, r6, pc}
 80094ac:	20000a38 	.word	0x20000a38

080094b0 <_malloc_r>:
 80094b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094b4:	1ccd      	adds	r5, r1, #3
 80094b6:	f025 0503 	bic.w	r5, r5, #3
 80094ba:	3508      	adds	r5, #8
 80094bc:	2d0c      	cmp	r5, #12
 80094be:	bf38      	it	cc
 80094c0:	250c      	movcc	r5, #12
 80094c2:	2d00      	cmp	r5, #0
 80094c4:	4607      	mov	r7, r0
 80094c6:	db01      	blt.n	80094cc <_malloc_r+0x1c>
 80094c8:	42a9      	cmp	r1, r5
 80094ca:	d905      	bls.n	80094d8 <_malloc_r+0x28>
 80094cc:	230c      	movs	r3, #12
 80094ce:	603b      	str	r3, [r7, #0]
 80094d0:	2600      	movs	r6, #0
 80094d2:	4630      	mov	r0, r6
 80094d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80095ac <_malloc_r+0xfc>
 80094dc:	f000 f868 	bl	80095b0 <__malloc_lock>
 80094e0:	f8d8 3000 	ldr.w	r3, [r8]
 80094e4:	461c      	mov	r4, r3
 80094e6:	bb5c      	cbnz	r4, 8009540 <_malloc_r+0x90>
 80094e8:	4629      	mov	r1, r5
 80094ea:	4638      	mov	r0, r7
 80094ec:	f7ff ffc0 	bl	8009470 <sbrk_aligned>
 80094f0:	1c43      	adds	r3, r0, #1
 80094f2:	4604      	mov	r4, r0
 80094f4:	d155      	bne.n	80095a2 <_malloc_r+0xf2>
 80094f6:	f8d8 4000 	ldr.w	r4, [r8]
 80094fa:	4626      	mov	r6, r4
 80094fc:	2e00      	cmp	r6, #0
 80094fe:	d145      	bne.n	800958c <_malloc_r+0xdc>
 8009500:	2c00      	cmp	r4, #0
 8009502:	d048      	beq.n	8009596 <_malloc_r+0xe6>
 8009504:	6823      	ldr	r3, [r4, #0]
 8009506:	4631      	mov	r1, r6
 8009508:	4638      	mov	r0, r7
 800950a:	eb04 0903 	add.w	r9, r4, r3
 800950e:	f000 fa8d 	bl	8009a2c <_sbrk_r>
 8009512:	4581      	cmp	r9, r0
 8009514:	d13f      	bne.n	8009596 <_malloc_r+0xe6>
 8009516:	6821      	ldr	r1, [r4, #0]
 8009518:	1a6d      	subs	r5, r5, r1
 800951a:	4629      	mov	r1, r5
 800951c:	4638      	mov	r0, r7
 800951e:	f7ff ffa7 	bl	8009470 <sbrk_aligned>
 8009522:	3001      	adds	r0, #1
 8009524:	d037      	beq.n	8009596 <_malloc_r+0xe6>
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	442b      	add	r3, r5
 800952a:	6023      	str	r3, [r4, #0]
 800952c:	f8d8 3000 	ldr.w	r3, [r8]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d038      	beq.n	80095a6 <_malloc_r+0xf6>
 8009534:	685a      	ldr	r2, [r3, #4]
 8009536:	42a2      	cmp	r2, r4
 8009538:	d12b      	bne.n	8009592 <_malloc_r+0xe2>
 800953a:	2200      	movs	r2, #0
 800953c:	605a      	str	r2, [r3, #4]
 800953e:	e00f      	b.n	8009560 <_malloc_r+0xb0>
 8009540:	6822      	ldr	r2, [r4, #0]
 8009542:	1b52      	subs	r2, r2, r5
 8009544:	d41f      	bmi.n	8009586 <_malloc_r+0xd6>
 8009546:	2a0b      	cmp	r2, #11
 8009548:	d917      	bls.n	800957a <_malloc_r+0xca>
 800954a:	1961      	adds	r1, r4, r5
 800954c:	42a3      	cmp	r3, r4
 800954e:	6025      	str	r5, [r4, #0]
 8009550:	bf18      	it	ne
 8009552:	6059      	strne	r1, [r3, #4]
 8009554:	6863      	ldr	r3, [r4, #4]
 8009556:	bf08      	it	eq
 8009558:	f8c8 1000 	streq.w	r1, [r8]
 800955c:	5162      	str	r2, [r4, r5]
 800955e:	604b      	str	r3, [r1, #4]
 8009560:	4638      	mov	r0, r7
 8009562:	f104 060b 	add.w	r6, r4, #11
 8009566:	f000 f829 	bl	80095bc <__malloc_unlock>
 800956a:	f026 0607 	bic.w	r6, r6, #7
 800956e:	1d23      	adds	r3, r4, #4
 8009570:	1af2      	subs	r2, r6, r3
 8009572:	d0ae      	beq.n	80094d2 <_malloc_r+0x22>
 8009574:	1b9b      	subs	r3, r3, r6
 8009576:	50a3      	str	r3, [r4, r2]
 8009578:	e7ab      	b.n	80094d2 <_malloc_r+0x22>
 800957a:	42a3      	cmp	r3, r4
 800957c:	6862      	ldr	r2, [r4, #4]
 800957e:	d1dd      	bne.n	800953c <_malloc_r+0x8c>
 8009580:	f8c8 2000 	str.w	r2, [r8]
 8009584:	e7ec      	b.n	8009560 <_malloc_r+0xb0>
 8009586:	4623      	mov	r3, r4
 8009588:	6864      	ldr	r4, [r4, #4]
 800958a:	e7ac      	b.n	80094e6 <_malloc_r+0x36>
 800958c:	4634      	mov	r4, r6
 800958e:	6876      	ldr	r6, [r6, #4]
 8009590:	e7b4      	b.n	80094fc <_malloc_r+0x4c>
 8009592:	4613      	mov	r3, r2
 8009594:	e7cc      	b.n	8009530 <_malloc_r+0x80>
 8009596:	230c      	movs	r3, #12
 8009598:	603b      	str	r3, [r7, #0]
 800959a:	4638      	mov	r0, r7
 800959c:	f000 f80e 	bl	80095bc <__malloc_unlock>
 80095a0:	e797      	b.n	80094d2 <_malloc_r+0x22>
 80095a2:	6025      	str	r5, [r4, #0]
 80095a4:	e7dc      	b.n	8009560 <_malloc_r+0xb0>
 80095a6:	605b      	str	r3, [r3, #4]
 80095a8:	deff      	udf	#255	; 0xff
 80095aa:	bf00      	nop
 80095ac:	20000a34 	.word	0x20000a34

080095b0 <__malloc_lock>:
 80095b0:	4801      	ldr	r0, [pc, #4]	; (80095b8 <__malloc_lock+0x8>)
 80095b2:	f000 ba88 	b.w	8009ac6 <__retarget_lock_acquire_recursive>
 80095b6:	bf00      	nop
 80095b8:	20000b7c 	.word	0x20000b7c

080095bc <__malloc_unlock>:
 80095bc:	4801      	ldr	r0, [pc, #4]	; (80095c4 <__malloc_unlock+0x8>)
 80095be:	f000 ba83 	b.w	8009ac8 <__retarget_lock_release_recursive>
 80095c2:	bf00      	nop
 80095c4:	20000b7c 	.word	0x20000b7c

080095c8 <std>:
 80095c8:	2300      	movs	r3, #0
 80095ca:	b510      	push	{r4, lr}
 80095cc:	4604      	mov	r4, r0
 80095ce:	e9c0 3300 	strd	r3, r3, [r0]
 80095d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095d6:	6083      	str	r3, [r0, #8]
 80095d8:	8181      	strh	r1, [r0, #12]
 80095da:	6643      	str	r3, [r0, #100]	; 0x64
 80095dc:	81c2      	strh	r2, [r0, #14]
 80095de:	6183      	str	r3, [r0, #24]
 80095e0:	4619      	mov	r1, r3
 80095e2:	2208      	movs	r2, #8
 80095e4:	305c      	adds	r0, #92	; 0x5c
 80095e6:	f000 f9e5 	bl	80099b4 <memset>
 80095ea:	4b0d      	ldr	r3, [pc, #52]	; (8009620 <std+0x58>)
 80095ec:	6263      	str	r3, [r4, #36]	; 0x24
 80095ee:	4b0d      	ldr	r3, [pc, #52]	; (8009624 <std+0x5c>)
 80095f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80095f2:	4b0d      	ldr	r3, [pc, #52]	; (8009628 <std+0x60>)
 80095f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095f6:	4b0d      	ldr	r3, [pc, #52]	; (800962c <std+0x64>)
 80095f8:	6323      	str	r3, [r4, #48]	; 0x30
 80095fa:	4b0d      	ldr	r3, [pc, #52]	; (8009630 <std+0x68>)
 80095fc:	6224      	str	r4, [r4, #32]
 80095fe:	429c      	cmp	r4, r3
 8009600:	d006      	beq.n	8009610 <std+0x48>
 8009602:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009606:	4294      	cmp	r4, r2
 8009608:	d002      	beq.n	8009610 <std+0x48>
 800960a:	33d0      	adds	r3, #208	; 0xd0
 800960c:	429c      	cmp	r4, r3
 800960e:	d105      	bne.n	800961c <std+0x54>
 8009610:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009618:	f000 ba54 	b.w	8009ac4 <__retarget_lock_init_recursive>
 800961c:	bd10      	pop	{r4, pc}
 800961e:	bf00      	nop
 8009620:	08009805 	.word	0x08009805
 8009624:	08009827 	.word	0x08009827
 8009628:	0800985f 	.word	0x0800985f
 800962c:	08009883 	.word	0x08009883
 8009630:	20000a3c 	.word	0x20000a3c

08009634 <stdio_exit_handler>:
 8009634:	4a02      	ldr	r2, [pc, #8]	; (8009640 <stdio_exit_handler+0xc>)
 8009636:	4903      	ldr	r1, [pc, #12]	; (8009644 <stdio_exit_handler+0x10>)
 8009638:	4803      	ldr	r0, [pc, #12]	; (8009648 <stdio_exit_handler+0x14>)
 800963a:	f000 b869 	b.w	8009710 <_fwalk_sglue>
 800963e:	bf00      	nop
 8009640:	2000002c 	.word	0x2000002c
 8009644:	08009c71 	.word	0x08009c71
 8009648:	20000038 	.word	0x20000038

0800964c <cleanup_stdio>:
 800964c:	6841      	ldr	r1, [r0, #4]
 800964e:	4b0c      	ldr	r3, [pc, #48]	; (8009680 <cleanup_stdio+0x34>)
 8009650:	4299      	cmp	r1, r3
 8009652:	b510      	push	{r4, lr}
 8009654:	4604      	mov	r4, r0
 8009656:	d001      	beq.n	800965c <cleanup_stdio+0x10>
 8009658:	f000 fb0a 	bl	8009c70 <_fflush_r>
 800965c:	68a1      	ldr	r1, [r4, #8]
 800965e:	4b09      	ldr	r3, [pc, #36]	; (8009684 <cleanup_stdio+0x38>)
 8009660:	4299      	cmp	r1, r3
 8009662:	d002      	beq.n	800966a <cleanup_stdio+0x1e>
 8009664:	4620      	mov	r0, r4
 8009666:	f000 fb03 	bl	8009c70 <_fflush_r>
 800966a:	68e1      	ldr	r1, [r4, #12]
 800966c:	4b06      	ldr	r3, [pc, #24]	; (8009688 <cleanup_stdio+0x3c>)
 800966e:	4299      	cmp	r1, r3
 8009670:	d004      	beq.n	800967c <cleanup_stdio+0x30>
 8009672:	4620      	mov	r0, r4
 8009674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009678:	f000 bafa 	b.w	8009c70 <_fflush_r>
 800967c:	bd10      	pop	{r4, pc}
 800967e:	bf00      	nop
 8009680:	20000a3c 	.word	0x20000a3c
 8009684:	20000aa4 	.word	0x20000aa4
 8009688:	20000b0c 	.word	0x20000b0c

0800968c <global_stdio_init.part.0>:
 800968c:	b510      	push	{r4, lr}
 800968e:	4b0b      	ldr	r3, [pc, #44]	; (80096bc <global_stdio_init.part.0+0x30>)
 8009690:	4c0b      	ldr	r4, [pc, #44]	; (80096c0 <global_stdio_init.part.0+0x34>)
 8009692:	4a0c      	ldr	r2, [pc, #48]	; (80096c4 <global_stdio_init.part.0+0x38>)
 8009694:	601a      	str	r2, [r3, #0]
 8009696:	4620      	mov	r0, r4
 8009698:	2200      	movs	r2, #0
 800969a:	2104      	movs	r1, #4
 800969c:	f7ff ff94 	bl	80095c8 <std>
 80096a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80096a4:	2201      	movs	r2, #1
 80096a6:	2109      	movs	r1, #9
 80096a8:	f7ff ff8e 	bl	80095c8 <std>
 80096ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80096b0:	2202      	movs	r2, #2
 80096b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096b6:	2112      	movs	r1, #18
 80096b8:	f7ff bf86 	b.w	80095c8 <std>
 80096bc:	20000b74 	.word	0x20000b74
 80096c0:	20000a3c 	.word	0x20000a3c
 80096c4:	08009635 	.word	0x08009635

080096c8 <__sfp_lock_acquire>:
 80096c8:	4801      	ldr	r0, [pc, #4]	; (80096d0 <__sfp_lock_acquire+0x8>)
 80096ca:	f000 b9fc 	b.w	8009ac6 <__retarget_lock_acquire_recursive>
 80096ce:	bf00      	nop
 80096d0:	20000b7d 	.word	0x20000b7d

080096d4 <__sfp_lock_release>:
 80096d4:	4801      	ldr	r0, [pc, #4]	; (80096dc <__sfp_lock_release+0x8>)
 80096d6:	f000 b9f7 	b.w	8009ac8 <__retarget_lock_release_recursive>
 80096da:	bf00      	nop
 80096dc:	20000b7d 	.word	0x20000b7d

080096e0 <__sinit>:
 80096e0:	b510      	push	{r4, lr}
 80096e2:	4604      	mov	r4, r0
 80096e4:	f7ff fff0 	bl	80096c8 <__sfp_lock_acquire>
 80096e8:	6a23      	ldr	r3, [r4, #32]
 80096ea:	b11b      	cbz	r3, 80096f4 <__sinit+0x14>
 80096ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096f0:	f7ff bff0 	b.w	80096d4 <__sfp_lock_release>
 80096f4:	4b04      	ldr	r3, [pc, #16]	; (8009708 <__sinit+0x28>)
 80096f6:	6223      	str	r3, [r4, #32]
 80096f8:	4b04      	ldr	r3, [pc, #16]	; (800970c <__sinit+0x2c>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1f5      	bne.n	80096ec <__sinit+0xc>
 8009700:	f7ff ffc4 	bl	800968c <global_stdio_init.part.0>
 8009704:	e7f2      	b.n	80096ec <__sinit+0xc>
 8009706:	bf00      	nop
 8009708:	0800964d 	.word	0x0800964d
 800970c:	20000b74 	.word	0x20000b74

08009710 <_fwalk_sglue>:
 8009710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009714:	4607      	mov	r7, r0
 8009716:	4688      	mov	r8, r1
 8009718:	4614      	mov	r4, r2
 800971a:	2600      	movs	r6, #0
 800971c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009720:	f1b9 0901 	subs.w	r9, r9, #1
 8009724:	d505      	bpl.n	8009732 <_fwalk_sglue+0x22>
 8009726:	6824      	ldr	r4, [r4, #0]
 8009728:	2c00      	cmp	r4, #0
 800972a:	d1f7      	bne.n	800971c <_fwalk_sglue+0xc>
 800972c:	4630      	mov	r0, r6
 800972e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009732:	89ab      	ldrh	r3, [r5, #12]
 8009734:	2b01      	cmp	r3, #1
 8009736:	d907      	bls.n	8009748 <_fwalk_sglue+0x38>
 8009738:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800973c:	3301      	adds	r3, #1
 800973e:	d003      	beq.n	8009748 <_fwalk_sglue+0x38>
 8009740:	4629      	mov	r1, r5
 8009742:	4638      	mov	r0, r7
 8009744:	47c0      	blx	r8
 8009746:	4306      	orrs	r6, r0
 8009748:	3568      	adds	r5, #104	; 0x68
 800974a:	e7e9      	b.n	8009720 <_fwalk_sglue+0x10>

0800974c <_puts_r>:
 800974c:	6a03      	ldr	r3, [r0, #32]
 800974e:	b570      	push	{r4, r5, r6, lr}
 8009750:	6884      	ldr	r4, [r0, #8]
 8009752:	4605      	mov	r5, r0
 8009754:	460e      	mov	r6, r1
 8009756:	b90b      	cbnz	r3, 800975c <_puts_r+0x10>
 8009758:	f7ff ffc2 	bl	80096e0 <__sinit>
 800975c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800975e:	07db      	lsls	r3, r3, #31
 8009760:	d405      	bmi.n	800976e <_puts_r+0x22>
 8009762:	89a3      	ldrh	r3, [r4, #12]
 8009764:	0598      	lsls	r0, r3, #22
 8009766:	d402      	bmi.n	800976e <_puts_r+0x22>
 8009768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800976a:	f000 f9ac 	bl	8009ac6 <__retarget_lock_acquire_recursive>
 800976e:	89a3      	ldrh	r3, [r4, #12]
 8009770:	0719      	lsls	r1, r3, #28
 8009772:	d513      	bpl.n	800979c <_puts_r+0x50>
 8009774:	6923      	ldr	r3, [r4, #16]
 8009776:	b18b      	cbz	r3, 800979c <_puts_r+0x50>
 8009778:	3e01      	subs	r6, #1
 800977a:	68a3      	ldr	r3, [r4, #8]
 800977c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009780:	3b01      	subs	r3, #1
 8009782:	60a3      	str	r3, [r4, #8]
 8009784:	b9e9      	cbnz	r1, 80097c2 <_puts_r+0x76>
 8009786:	2b00      	cmp	r3, #0
 8009788:	da2e      	bge.n	80097e8 <_puts_r+0x9c>
 800978a:	4622      	mov	r2, r4
 800978c:	210a      	movs	r1, #10
 800978e:	4628      	mov	r0, r5
 8009790:	f000 f87b 	bl	800988a <__swbuf_r>
 8009794:	3001      	adds	r0, #1
 8009796:	d007      	beq.n	80097a8 <_puts_r+0x5c>
 8009798:	250a      	movs	r5, #10
 800979a:	e007      	b.n	80097ac <_puts_r+0x60>
 800979c:	4621      	mov	r1, r4
 800979e:	4628      	mov	r0, r5
 80097a0:	f000 f8b0 	bl	8009904 <__swsetup_r>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	d0e7      	beq.n	8009778 <_puts_r+0x2c>
 80097a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80097ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097ae:	07da      	lsls	r2, r3, #31
 80097b0:	d405      	bmi.n	80097be <_puts_r+0x72>
 80097b2:	89a3      	ldrh	r3, [r4, #12]
 80097b4:	059b      	lsls	r3, r3, #22
 80097b6:	d402      	bmi.n	80097be <_puts_r+0x72>
 80097b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ba:	f000 f985 	bl	8009ac8 <__retarget_lock_release_recursive>
 80097be:	4628      	mov	r0, r5
 80097c0:	bd70      	pop	{r4, r5, r6, pc}
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	da04      	bge.n	80097d0 <_puts_r+0x84>
 80097c6:	69a2      	ldr	r2, [r4, #24]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	dc06      	bgt.n	80097da <_puts_r+0x8e>
 80097cc:	290a      	cmp	r1, #10
 80097ce:	d004      	beq.n	80097da <_puts_r+0x8e>
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	1c5a      	adds	r2, r3, #1
 80097d4:	6022      	str	r2, [r4, #0]
 80097d6:	7019      	strb	r1, [r3, #0]
 80097d8:	e7cf      	b.n	800977a <_puts_r+0x2e>
 80097da:	4622      	mov	r2, r4
 80097dc:	4628      	mov	r0, r5
 80097de:	f000 f854 	bl	800988a <__swbuf_r>
 80097e2:	3001      	adds	r0, #1
 80097e4:	d1c9      	bne.n	800977a <_puts_r+0x2e>
 80097e6:	e7df      	b.n	80097a8 <_puts_r+0x5c>
 80097e8:	6823      	ldr	r3, [r4, #0]
 80097ea:	250a      	movs	r5, #10
 80097ec:	1c5a      	adds	r2, r3, #1
 80097ee:	6022      	str	r2, [r4, #0]
 80097f0:	701d      	strb	r5, [r3, #0]
 80097f2:	e7db      	b.n	80097ac <_puts_r+0x60>

080097f4 <puts>:
 80097f4:	4b02      	ldr	r3, [pc, #8]	; (8009800 <puts+0xc>)
 80097f6:	4601      	mov	r1, r0
 80097f8:	6818      	ldr	r0, [r3, #0]
 80097fa:	f7ff bfa7 	b.w	800974c <_puts_r>
 80097fe:	bf00      	nop
 8009800:	20000084 	.word	0x20000084

08009804 <__sread>:
 8009804:	b510      	push	{r4, lr}
 8009806:	460c      	mov	r4, r1
 8009808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800980c:	f000 f8fc 	bl	8009a08 <_read_r>
 8009810:	2800      	cmp	r0, #0
 8009812:	bfab      	itete	ge
 8009814:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009816:	89a3      	ldrhlt	r3, [r4, #12]
 8009818:	181b      	addge	r3, r3, r0
 800981a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800981e:	bfac      	ite	ge
 8009820:	6563      	strge	r3, [r4, #84]	; 0x54
 8009822:	81a3      	strhlt	r3, [r4, #12]
 8009824:	bd10      	pop	{r4, pc}

08009826 <__swrite>:
 8009826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800982a:	461f      	mov	r7, r3
 800982c:	898b      	ldrh	r3, [r1, #12]
 800982e:	05db      	lsls	r3, r3, #23
 8009830:	4605      	mov	r5, r0
 8009832:	460c      	mov	r4, r1
 8009834:	4616      	mov	r6, r2
 8009836:	d505      	bpl.n	8009844 <__swrite+0x1e>
 8009838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800983c:	2302      	movs	r3, #2
 800983e:	2200      	movs	r2, #0
 8009840:	f000 f8d0 	bl	80099e4 <_lseek_r>
 8009844:	89a3      	ldrh	r3, [r4, #12]
 8009846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800984a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800984e:	81a3      	strh	r3, [r4, #12]
 8009850:	4632      	mov	r2, r6
 8009852:	463b      	mov	r3, r7
 8009854:	4628      	mov	r0, r5
 8009856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800985a:	f000 b8f7 	b.w	8009a4c <_write_r>

0800985e <__sseek>:
 800985e:	b510      	push	{r4, lr}
 8009860:	460c      	mov	r4, r1
 8009862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009866:	f000 f8bd 	bl	80099e4 <_lseek_r>
 800986a:	1c43      	adds	r3, r0, #1
 800986c:	89a3      	ldrh	r3, [r4, #12]
 800986e:	bf15      	itete	ne
 8009870:	6560      	strne	r0, [r4, #84]	; 0x54
 8009872:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009876:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800987a:	81a3      	strheq	r3, [r4, #12]
 800987c:	bf18      	it	ne
 800987e:	81a3      	strhne	r3, [r4, #12]
 8009880:	bd10      	pop	{r4, pc}

08009882 <__sclose>:
 8009882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009886:	f000 b89d 	b.w	80099c4 <_close_r>

0800988a <__swbuf_r>:
 800988a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988c:	460e      	mov	r6, r1
 800988e:	4614      	mov	r4, r2
 8009890:	4605      	mov	r5, r0
 8009892:	b118      	cbz	r0, 800989c <__swbuf_r+0x12>
 8009894:	6a03      	ldr	r3, [r0, #32]
 8009896:	b90b      	cbnz	r3, 800989c <__swbuf_r+0x12>
 8009898:	f7ff ff22 	bl	80096e0 <__sinit>
 800989c:	69a3      	ldr	r3, [r4, #24]
 800989e:	60a3      	str	r3, [r4, #8]
 80098a0:	89a3      	ldrh	r3, [r4, #12]
 80098a2:	071a      	lsls	r2, r3, #28
 80098a4:	d525      	bpl.n	80098f2 <__swbuf_r+0x68>
 80098a6:	6923      	ldr	r3, [r4, #16]
 80098a8:	b31b      	cbz	r3, 80098f2 <__swbuf_r+0x68>
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	6922      	ldr	r2, [r4, #16]
 80098ae:	1a98      	subs	r0, r3, r2
 80098b0:	6963      	ldr	r3, [r4, #20]
 80098b2:	b2f6      	uxtb	r6, r6
 80098b4:	4283      	cmp	r3, r0
 80098b6:	4637      	mov	r7, r6
 80098b8:	dc04      	bgt.n	80098c4 <__swbuf_r+0x3a>
 80098ba:	4621      	mov	r1, r4
 80098bc:	4628      	mov	r0, r5
 80098be:	f000 f9d7 	bl	8009c70 <_fflush_r>
 80098c2:	b9e0      	cbnz	r0, 80098fe <__swbuf_r+0x74>
 80098c4:	68a3      	ldr	r3, [r4, #8]
 80098c6:	3b01      	subs	r3, #1
 80098c8:	60a3      	str	r3, [r4, #8]
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	1c5a      	adds	r2, r3, #1
 80098ce:	6022      	str	r2, [r4, #0]
 80098d0:	701e      	strb	r6, [r3, #0]
 80098d2:	6962      	ldr	r2, [r4, #20]
 80098d4:	1c43      	adds	r3, r0, #1
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d004      	beq.n	80098e4 <__swbuf_r+0x5a>
 80098da:	89a3      	ldrh	r3, [r4, #12]
 80098dc:	07db      	lsls	r3, r3, #31
 80098de:	d506      	bpl.n	80098ee <__swbuf_r+0x64>
 80098e0:	2e0a      	cmp	r6, #10
 80098e2:	d104      	bne.n	80098ee <__swbuf_r+0x64>
 80098e4:	4621      	mov	r1, r4
 80098e6:	4628      	mov	r0, r5
 80098e8:	f000 f9c2 	bl	8009c70 <_fflush_r>
 80098ec:	b938      	cbnz	r0, 80098fe <__swbuf_r+0x74>
 80098ee:	4638      	mov	r0, r7
 80098f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098f2:	4621      	mov	r1, r4
 80098f4:	4628      	mov	r0, r5
 80098f6:	f000 f805 	bl	8009904 <__swsetup_r>
 80098fa:	2800      	cmp	r0, #0
 80098fc:	d0d5      	beq.n	80098aa <__swbuf_r+0x20>
 80098fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009902:	e7f4      	b.n	80098ee <__swbuf_r+0x64>

08009904 <__swsetup_r>:
 8009904:	b538      	push	{r3, r4, r5, lr}
 8009906:	4b2a      	ldr	r3, [pc, #168]	; (80099b0 <__swsetup_r+0xac>)
 8009908:	4605      	mov	r5, r0
 800990a:	6818      	ldr	r0, [r3, #0]
 800990c:	460c      	mov	r4, r1
 800990e:	b118      	cbz	r0, 8009918 <__swsetup_r+0x14>
 8009910:	6a03      	ldr	r3, [r0, #32]
 8009912:	b90b      	cbnz	r3, 8009918 <__swsetup_r+0x14>
 8009914:	f7ff fee4 	bl	80096e0 <__sinit>
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800991e:	0718      	lsls	r0, r3, #28
 8009920:	d422      	bmi.n	8009968 <__swsetup_r+0x64>
 8009922:	06d9      	lsls	r1, r3, #27
 8009924:	d407      	bmi.n	8009936 <__swsetup_r+0x32>
 8009926:	2309      	movs	r3, #9
 8009928:	602b      	str	r3, [r5, #0]
 800992a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800992e:	81a3      	strh	r3, [r4, #12]
 8009930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009934:	e034      	b.n	80099a0 <__swsetup_r+0x9c>
 8009936:	0758      	lsls	r0, r3, #29
 8009938:	d512      	bpl.n	8009960 <__swsetup_r+0x5c>
 800993a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800993c:	b141      	cbz	r1, 8009950 <__swsetup_r+0x4c>
 800993e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009942:	4299      	cmp	r1, r3
 8009944:	d002      	beq.n	800994c <__swsetup_r+0x48>
 8009946:	4628      	mov	r0, r5
 8009948:	f000 f8c0 	bl	8009acc <_free_r>
 800994c:	2300      	movs	r3, #0
 800994e:	6363      	str	r3, [r4, #52]	; 0x34
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009956:	81a3      	strh	r3, [r4, #12]
 8009958:	2300      	movs	r3, #0
 800995a:	6063      	str	r3, [r4, #4]
 800995c:	6923      	ldr	r3, [r4, #16]
 800995e:	6023      	str	r3, [r4, #0]
 8009960:	89a3      	ldrh	r3, [r4, #12]
 8009962:	f043 0308 	orr.w	r3, r3, #8
 8009966:	81a3      	strh	r3, [r4, #12]
 8009968:	6923      	ldr	r3, [r4, #16]
 800996a:	b94b      	cbnz	r3, 8009980 <__swsetup_r+0x7c>
 800996c:	89a3      	ldrh	r3, [r4, #12]
 800996e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009972:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009976:	d003      	beq.n	8009980 <__swsetup_r+0x7c>
 8009978:	4621      	mov	r1, r4
 800997a:	4628      	mov	r0, r5
 800997c:	f000 f9c6 	bl	8009d0c <__smakebuf_r>
 8009980:	89a0      	ldrh	r0, [r4, #12]
 8009982:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009986:	f010 0301 	ands.w	r3, r0, #1
 800998a:	d00a      	beq.n	80099a2 <__swsetup_r+0x9e>
 800998c:	2300      	movs	r3, #0
 800998e:	60a3      	str	r3, [r4, #8]
 8009990:	6963      	ldr	r3, [r4, #20]
 8009992:	425b      	negs	r3, r3
 8009994:	61a3      	str	r3, [r4, #24]
 8009996:	6923      	ldr	r3, [r4, #16]
 8009998:	b943      	cbnz	r3, 80099ac <__swsetup_r+0xa8>
 800999a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800999e:	d1c4      	bne.n	800992a <__swsetup_r+0x26>
 80099a0:	bd38      	pop	{r3, r4, r5, pc}
 80099a2:	0781      	lsls	r1, r0, #30
 80099a4:	bf58      	it	pl
 80099a6:	6963      	ldrpl	r3, [r4, #20]
 80099a8:	60a3      	str	r3, [r4, #8]
 80099aa:	e7f4      	b.n	8009996 <__swsetup_r+0x92>
 80099ac:	2000      	movs	r0, #0
 80099ae:	e7f7      	b.n	80099a0 <__swsetup_r+0x9c>
 80099b0:	20000084 	.word	0x20000084

080099b4 <memset>:
 80099b4:	4402      	add	r2, r0
 80099b6:	4603      	mov	r3, r0
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d100      	bne.n	80099be <memset+0xa>
 80099bc:	4770      	bx	lr
 80099be:	f803 1b01 	strb.w	r1, [r3], #1
 80099c2:	e7f9      	b.n	80099b8 <memset+0x4>

080099c4 <_close_r>:
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	4d06      	ldr	r5, [pc, #24]	; (80099e0 <_close_r+0x1c>)
 80099c8:	2300      	movs	r3, #0
 80099ca:	4604      	mov	r4, r0
 80099cc:	4608      	mov	r0, r1
 80099ce:	602b      	str	r3, [r5, #0]
 80099d0:	f7f7 fa7b 	bl	8000eca <_close>
 80099d4:	1c43      	adds	r3, r0, #1
 80099d6:	d102      	bne.n	80099de <_close_r+0x1a>
 80099d8:	682b      	ldr	r3, [r5, #0]
 80099da:	b103      	cbz	r3, 80099de <_close_r+0x1a>
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	bd38      	pop	{r3, r4, r5, pc}
 80099e0:	20000b78 	.word	0x20000b78

080099e4 <_lseek_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	4d07      	ldr	r5, [pc, #28]	; (8009a04 <_lseek_r+0x20>)
 80099e8:	4604      	mov	r4, r0
 80099ea:	4608      	mov	r0, r1
 80099ec:	4611      	mov	r1, r2
 80099ee:	2200      	movs	r2, #0
 80099f0:	602a      	str	r2, [r5, #0]
 80099f2:	461a      	mov	r2, r3
 80099f4:	f7f7 fa90 	bl	8000f18 <_lseek>
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	d102      	bne.n	8009a02 <_lseek_r+0x1e>
 80099fc:	682b      	ldr	r3, [r5, #0]
 80099fe:	b103      	cbz	r3, 8009a02 <_lseek_r+0x1e>
 8009a00:	6023      	str	r3, [r4, #0]
 8009a02:	bd38      	pop	{r3, r4, r5, pc}
 8009a04:	20000b78 	.word	0x20000b78

08009a08 <_read_r>:
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	4d07      	ldr	r5, [pc, #28]	; (8009a28 <_read_r+0x20>)
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	4608      	mov	r0, r1
 8009a10:	4611      	mov	r1, r2
 8009a12:	2200      	movs	r2, #0
 8009a14:	602a      	str	r2, [r5, #0]
 8009a16:	461a      	mov	r2, r3
 8009a18:	f7f7 fa1e 	bl	8000e58 <_read>
 8009a1c:	1c43      	adds	r3, r0, #1
 8009a1e:	d102      	bne.n	8009a26 <_read_r+0x1e>
 8009a20:	682b      	ldr	r3, [r5, #0]
 8009a22:	b103      	cbz	r3, 8009a26 <_read_r+0x1e>
 8009a24:	6023      	str	r3, [r4, #0]
 8009a26:	bd38      	pop	{r3, r4, r5, pc}
 8009a28:	20000b78 	.word	0x20000b78

08009a2c <_sbrk_r>:
 8009a2c:	b538      	push	{r3, r4, r5, lr}
 8009a2e:	4d06      	ldr	r5, [pc, #24]	; (8009a48 <_sbrk_r+0x1c>)
 8009a30:	2300      	movs	r3, #0
 8009a32:	4604      	mov	r4, r0
 8009a34:	4608      	mov	r0, r1
 8009a36:	602b      	str	r3, [r5, #0]
 8009a38:	f7f7 fa7c 	bl	8000f34 <_sbrk>
 8009a3c:	1c43      	adds	r3, r0, #1
 8009a3e:	d102      	bne.n	8009a46 <_sbrk_r+0x1a>
 8009a40:	682b      	ldr	r3, [r5, #0]
 8009a42:	b103      	cbz	r3, 8009a46 <_sbrk_r+0x1a>
 8009a44:	6023      	str	r3, [r4, #0]
 8009a46:	bd38      	pop	{r3, r4, r5, pc}
 8009a48:	20000b78 	.word	0x20000b78

08009a4c <_write_r>:
 8009a4c:	b538      	push	{r3, r4, r5, lr}
 8009a4e:	4d07      	ldr	r5, [pc, #28]	; (8009a6c <_write_r+0x20>)
 8009a50:	4604      	mov	r4, r0
 8009a52:	4608      	mov	r0, r1
 8009a54:	4611      	mov	r1, r2
 8009a56:	2200      	movs	r2, #0
 8009a58:	602a      	str	r2, [r5, #0]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	f7f7 fa19 	bl	8000e92 <_write>
 8009a60:	1c43      	adds	r3, r0, #1
 8009a62:	d102      	bne.n	8009a6a <_write_r+0x1e>
 8009a64:	682b      	ldr	r3, [r5, #0]
 8009a66:	b103      	cbz	r3, 8009a6a <_write_r+0x1e>
 8009a68:	6023      	str	r3, [r4, #0]
 8009a6a:	bd38      	pop	{r3, r4, r5, pc}
 8009a6c:	20000b78 	.word	0x20000b78

08009a70 <__errno>:
 8009a70:	4b01      	ldr	r3, [pc, #4]	; (8009a78 <__errno+0x8>)
 8009a72:	6818      	ldr	r0, [r3, #0]
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	20000084 	.word	0x20000084

08009a7c <__libc_init_array>:
 8009a7c:	b570      	push	{r4, r5, r6, lr}
 8009a7e:	4d0d      	ldr	r5, [pc, #52]	; (8009ab4 <__libc_init_array+0x38>)
 8009a80:	4c0d      	ldr	r4, [pc, #52]	; (8009ab8 <__libc_init_array+0x3c>)
 8009a82:	1b64      	subs	r4, r4, r5
 8009a84:	10a4      	asrs	r4, r4, #2
 8009a86:	2600      	movs	r6, #0
 8009a88:	42a6      	cmp	r6, r4
 8009a8a:	d109      	bne.n	8009aa0 <__libc_init_array+0x24>
 8009a8c:	4d0b      	ldr	r5, [pc, #44]	; (8009abc <__libc_init_array+0x40>)
 8009a8e:	4c0c      	ldr	r4, [pc, #48]	; (8009ac0 <__libc_init_array+0x44>)
 8009a90:	f000 f99a 	bl	8009dc8 <_init>
 8009a94:	1b64      	subs	r4, r4, r5
 8009a96:	10a4      	asrs	r4, r4, #2
 8009a98:	2600      	movs	r6, #0
 8009a9a:	42a6      	cmp	r6, r4
 8009a9c:	d105      	bne.n	8009aaa <__libc_init_array+0x2e>
 8009a9e:	bd70      	pop	{r4, r5, r6, pc}
 8009aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aa4:	4798      	blx	r3
 8009aa6:	3601      	adds	r6, #1
 8009aa8:	e7ee      	b.n	8009a88 <__libc_init_array+0xc>
 8009aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aae:	4798      	blx	r3
 8009ab0:	3601      	adds	r6, #1
 8009ab2:	e7f2      	b.n	8009a9a <__libc_init_array+0x1e>
 8009ab4:	08009e28 	.word	0x08009e28
 8009ab8:	08009e28 	.word	0x08009e28
 8009abc:	08009e28 	.word	0x08009e28
 8009ac0:	08009e2c 	.word	0x08009e2c

08009ac4 <__retarget_lock_init_recursive>:
 8009ac4:	4770      	bx	lr

08009ac6 <__retarget_lock_acquire_recursive>:
 8009ac6:	4770      	bx	lr

08009ac8 <__retarget_lock_release_recursive>:
 8009ac8:	4770      	bx	lr
	...

08009acc <_free_r>:
 8009acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ace:	2900      	cmp	r1, #0
 8009ad0:	d044      	beq.n	8009b5c <_free_r+0x90>
 8009ad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ad6:	9001      	str	r0, [sp, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f1a1 0404 	sub.w	r4, r1, #4
 8009ade:	bfb8      	it	lt
 8009ae0:	18e4      	addlt	r4, r4, r3
 8009ae2:	f7ff fd65 	bl	80095b0 <__malloc_lock>
 8009ae6:	4a1e      	ldr	r2, [pc, #120]	; (8009b60 <_free_r+0x94>)
 8009ae8:	9801      	ldr	r0, [sp, #4]
 8009aea:	6813      	ldr	r3, [r2, #0]
 8009aec:	b933      	cbnz	r3, 8009afc <_free_r+0x30>
 8009aee:	6063      	str	r3, [r4, #4]
 8009af0:	6014      	str	r4, [r2, #0]
 8009af2:	b003      	add	sp, #12
 8009af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009af8:	f7ff bd60 	b.w	80095bc <__malloc_unlock>
 8009afc:	42a3      	cmp	r3, r4
 8009afe:	d908      	bls.n	8009b12 <_free_r+0x46>
 8009b00:	6825      	ldr	r5, [r4, #0]
 8009b02:	1961      	adds	r1, r4, r5
 8009b04:	428b      	cmp	r3, r1
 8009b06:	bf01      	itttt	eq
 8009b08:	6819      	ldreq	r1, [r3, #0]
 8009b0a:	685b      	ldreq	r3, [r3, #4]
 8009b0c:	1949      	addeq	r1, r1, r5
 8009b0e:	6021      	streq	r1, [r4, #0]
 8009b10:	e7ed      	b.n	8009aee <_free_r+0x22>
 8009b12:	461a      	mov	r2, r3
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	b10b      	cbz	r3, 8009b1c <_free_r+0x50>
 8009b18:	42a3      	cmp	r3, r4
 8009b1a:	d9fa      	bls.n	8009b12 <_free_r+0x46>
 8009b1c:	6811      	ldr	r1, [r2, #0]
 8009b1e:	1855      	adds	r5, r2, r1
 8009b20:	42a5      	cmp	r5, r4
 8009b22:	d10b      	bne.n	8009b3c <_free_r+0x70>
 8009b24:	6824      	ldr	r4, [r4, #0]
 8009b26:	4421      	add	r1, r4
 8009b28:	1854      	adds	r4, r2, r1
 8009b2a:	42a3      	cmp	r3, r4
 8009b2c:	6011      	str	r1, [r2, #0]
 8009b2e:	d1e0      	bne.n	8009af2 <_free_r+0x26>
 8009b30:	681c      	ldr	r4, [r3, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	6053      	str	r3, [r2, #4]
 8009b36:	440c      	add	r4, r1
 8009b38:	6014      	str	r4, [r2, #0]
 8009b3a:	e7da      	b.n	8009af2 <_free_r+0x26>
 8009b3c:	d902      	bls.n	8009b44 <_free_r+0x78>
 8009b3e:	230c      	movs	r3, #12
 8009b40:	6003      	str	r3, [r0, #0]
 8009b42:	e7d6      	b.n	8009af2 <_free_r+0x26>
 8009b44:	6825      	ldr	r5, [r4, #0]
 8009b46:	1961      	adds	r1, r4, r5
 8009b48:	428b      	cmp	r3, r1
 8009b4a:	bf04      	itt	eq
 8009b4c:	6819      	ldreq	r1, [r3, #0]
 8009b4e:	685b      	ldreq	r3, [r3, #4]
 8009b50:	6063      	str	r3, [r4, #4]
 8009b52:	bf04      	itt	eq
 8009b54:	1949      	addeq	r1, r1, r5
 8009b56:	6021      	streq	r1, [r4, #0]
 8009b58:	6054      	str	r4, [r2, #4]
 8009b5a:	e7ca      	b.n	8009af2 <_free_r+0x26>
 8009b5c:	b003      	add	sp, #12
 8009b5e:	bd30      	pop	{r4, r5, pc}
 8009b60:	20000a34 	.word	0x20000a34

08009b64 <__sflush_r>:
 8009b64:	898a      	ldrh	r2, [r1, #12]
 8009b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b6a:	4605      	mov	r5, r0
 8009b6c:	0710      	lsls	r0, r2, #28
 8009b6e:	460c      	mov	r4, r1
 8009b70:	d458      	bmi.n	8009c24 <__sflush_r+0xc0>
 8009b72:	684b      	ldr	r3, [r1, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	dc05      	bgt.n	8009b84 <__sflush_r+0x20>
 8009b78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	dc02      	bgt.n	8009b84 <__sflush_r+0x20>
 8009b7e:	2000      	movs	r0, #0
 8009b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b86:	2e00      	cmp	r6, #0
 8009b88:	d0f9      	beq.n	8009b7e <__sflush_r+0x1a>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b90:	682f      	ldr	r7, [r5, #0]
 8009b92:	6a21      	ldr	r1, [r4, #32]
 8009b94:	602b      	str	r3, [r5, #0]
 8009b96:	d032      	beq.n	8009bfe <__sflush_r+0x9a>
 8009b98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b9a:	89a3      	ldrh	r3, [r4, #12]
 8009b9c:	075a      	lsls	r2, r3, #29
 8009b9e:	d505      	bpl.n	8009bac <__sflush_r+0x48>
 8009ba0:	6863      	ldr	r3, [r4, #4]
 8009ba2:	1ac0      	subs	r0, r0, r3
 8009ba4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ba6:	b10b      	cbz	r3, 8009bac <__sflush_r+0x48>
 8009ba8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009baa:	1ac0      	subs	r0, r0, r3
 8009bac:	2300      	movs	r3, #0
 8009bae:	4602      	mov	r2, r0
 8009bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bb2:	6a21      	ldr	r1, [r4, #32]
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	47b0      	blx	r6
 8009bb8:	1c43      	adds	r3, r0, #1
 8009bba:	89a3      	ldrh	r3, [r4, #12]
 8009bbc:	d106      	bne.n	8009bcc <__sflush_r+0x68>
 8009bbe:	6829      	ldr	r1, [r5, #0]
 8009bc0:	291d      	cmp	r1, #29
 8009bc2:	d82b      	bhi.n	8009c1c <__sflush_r+0xb8>
 8009bc4:	4a29      	ldr	r2, [pc, #164]	; (8009c6c <__sflush_r+0x108>)
 8009bc6:	410a      	asrs	r2, r1
 8009bc8:	07d6      	lsls	r6, r2, #31
 8009bca:	d427      	bmi.n	8009c1c <__sflush_r+0xb8>
 8009bcc:	2200      	movs	r2, #0
 8009bce:	6062      	str	r2, [r4, #4]
 8009bd0:	04d9      	lsls	r1, r3, #19
 8009bd2:	6922      	ldr	r2, [r4, #16]
 8009bd4:	6022      	str	r2, [r4, #0]
 8009bd6:	d504      	bpl.n	8009be2 <__sflush_r+0x7e>
 8009bd8:	1c42      	adds	r2, r0, #1
 8009bda:	d101      	bne.n	8009be0 <__sflush_r+0x7c>
 8009bdc:	682b      	ldr	r3, [r5, #0]
 8009bde:	b903      	cbnz	r3, 8009be2 <__sflush_r+0x7e>
 8009be0:	6560      	str	r0, [r4, #84]	; 0x54
 8009be2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009be4:	602f      	str	r7, [r5, #0]
 8009be6:	2900      	cmp	r1, #0
 8009be8:	d0c9      	beq.n	8009b7e <__sflush_r+0x1a>
 8009bea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bee:	4299      	cmp	r1, r3
 8009bf0:	d002      	beq.n	8009bf8 <__sflush_r+0x94>
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	f7ff ff6a 	bl	8009acc <_free_r>
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	6360      	str	r0, [r4, #52]	; 0x34
 8009bfc:	e7c0      	b.n	8009b80 <__sflush_r+0x1c>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	4628      	mov	r0, r5
 8009c02:	47b0      	blx	r6
 8009c04:	1c41      	adds	r1, r0, #1
 8009c06:	d1c8      	bne.n	8009b9a <__sflush_r+0x36>
 8009c08:	682b      	ldr	r3, [r5, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d0c5      	beq.n	8009b9a <__sflush_r+0x36>
 8009c0e:	2b1d      	cmp	r3, #29
 8009c10:	d001      	beq.n	8009c16 <__sflush_r+0xb2>
 8009c12:	2b16      	cmp	r3, #22
 8009c14:	d101      	bne.n	8009c1a <__sflush_r+0xb6>
 8009c16:	602f      	str	r7, [r5, #0]
 8009c18:	e7b1      	b.n	8009b7e <__sflush_r+0x1a>
 8009c1a:	89a3      	ldrh	r3, [r4, #12]
 8009c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c20:	81a3      	strh	r3, [r4, #12]
 8009c22:	e7ad      	b.n	8009b80 <__sflush_r+0x1c>
 8009c24:	690f      	ldr	r7, [r1, #16]
 8009c26:	2f00      	cmp	r7, #0
 8009c28:	d0a9      	beq.n	8009b7e <__sflush_r+0x1a>
 8009c2a:	0793      	lsls	r3, r2, #30
 8009c2c:	680e      	ldr	r6, [r1, #0]
 8009c2e:	bf08      	it	eq
 8009c30:	694b      	ldreq	r3, [r1, #20]
 8009c32:	600f      	str	r7, [r1, #0]
 8009c34:	bf18      	it	ne
 8009c36:	2300      	movne	r3, #0
 8009c38:	eba6 0807 	sub.w	r8, r6, r7
 8009c3c:	608b      	str	r3, [r1, #8]
 8009c3e:	f1b8 0f00 	cmp.w	r8, #0
 8009c42:	dd9c      	ble.n	8009b7e <__sflush_r+0x1a>
 8009c44:	6a21      	ldr	r1, [r4, #32]
 8009c46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c48:	4643      	mov	r3, r8
 8009c4a:	463a      	mov	r2, r7
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	47b0      	blx	r6
 8009c50:	2800      	cmp	r0, #0
 8009c52:	dc06      	bgt.n	8009c62 <__sflush_r+0xfe>
 8009c54:	89a3      	ldrh	r3, [r4, #12]
 8009c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c5a:	81a3      	strh	r3, [r4, #12]
 8009c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c60:	e78e      	b.n	8009b80 <__sflush_r+0x1c>
 8009c62:	4407      	add	r7, r0
 8009c64:	eba8 0800 	sub.w	r8, r8, r0
 8009c68:	e7e9      	b.n	8009c3e <__sflush_r+0xda>
 8009c6a:	bf00      	nop
 8009c6c:	dfbffffe 	.word	0xdfbffffe

08009c70 <_fflush_r>:
 8009c70:	b538      	push	{r3, r4, r5, lr}
 8009c72:	690b      	ldr	r3, [r1, #16]
 8009c74:	4605      	mov	r5, r0
 8009c76:	460c      	mov	r4, r1
 8009c78:	b913      	cbnz	r3, 8009c80 <_fflush_r+0x10>
 8009c7a:	2500      	movs	r5, #0
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	bd38      	pop	{r3, r4, r5, pc}
 8009c80:	b118      	cbz	r0, 8009c8a <_fflush_r+0x1a>
 8009c82:	6a03      	ldr	r3, [r0, #32]
 8009c84:	b90b      	cbnz	r3, 8009c8a <_fflush_r+0x1a>
 8009c86:	f7ff fd2b 	bl	80096e0 <__sinit>
 8009c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d0f3      	beq.n	8009c7a <_fflush_r+0xa>
 8009c92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c94:	07d0      	lsls	r0, r2, #31
 8009c96:	d404      	bmi.n	8009ca2 <_fflush_r+0x32>
 8009c98:	0599      	lsls	r1, r3, #22
 8009c9a:	d402      	bmi.n	8009ca2 <_fflush_r+0x32>
 8009c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c9e:	f7ff ff12 	bl	8009ac6 <__retarget_lock_acquire_recursive>
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	4621      	mov	r1, r4
 8009ca6:	f7ff ff5d 	bl	8009b64 <__sflush_r>
 8009caa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cac:	07da      	lsls	r2, r3, #31
 8009cae:	4605      	mov	r5, r0
 8009cb0:	d4e4      	bmi.n	8009c7c <_fflush_r+0xc>
 8009cb2:	89a3      	ldrh	r3, [r4, #12]
 8009cb4:	059b      	lsls	r3, r3, #22
 8009cb6:	d4e1      	bmi.n	8009c7c <_fflush_r+0xc>
 8009cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cba:	f7ff ff05 	bl	8009ac8 <__retarget_lock_release_recursive>
 8009cbe:	e7dd      	b.n	8009c7c <_fflush_r+0xc>

08009cc0 <__swhatbuf_r>:
 8009cc0:	b570      	push	{r4, r5, r6, lr}
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cc8:	2900      	cmp	r1, #0
 8009cca:	b096      	sub	sp, #88	; 0x58
 8009ccc:	4615      	mov	r5, r2
 8009cce:	461e      	mov	r6, r3
 8009cd0:	da0d      	bge.n	8009cee <__swhatbuf_r+0x2e>
 8009cd2:	89a3      	ldrh	r3, [r4, #12]
 8009cd4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009cd8:	f04f 0100 	mov.w	r1, #0
 8009cdc:	bf0c      	ite	eq
 8009cde:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009ce2:	2340      	movne	r3, #64	; 0x40
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	6031      	str	r1, [r6, #0]
 8009ce8:	602b      	str	r3, [r5, #0]
 8009cea:	b016      	add	sp, #88	; 0x58
 8009cec:	bd70      	pop	{r4, r5, r6, pc}
 8009cee:	466a      	mov	r2, sp
 8009cf0:	f000 f848 	bl	8009d84 <_fstat_r>
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	dbec      	blt.n	8009cd2 <__swhatbuf_r+0x12>
 8009cf8:	9901      	ldr	r1, [sp, #4]
 8009cfa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009cfe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009d02:	4259      	negs	r1, r3
 8009d04:	4159      	adcs	r1, r3
 8009d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d0a:	e7eb      	b.n	8009ce4 <__swhatbuf_r+0x24>

08009d0c <__smakebuf_r>:
 8009d0c:	898b      	ldrh	r3, [r1, #12]
 8009d0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d10:	079d      	lsls	r5, r3, #30
 8009d12:	4606      	mov	r6, r0
 8009d14:	460c      	mov	r4, r1
 8009d16:	d507      	bpl.n	8009d28 <__smakebuf_r+0x1c>
 8009d18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	6123      	str	r3, [r4, #16]
 8009d20:	2301      	movs	r3, #1
 8009d22:	6163      	str	r3, [r4, #20]
 8009d24:	b002      	add	sp, #8
 8009d26:	bd70      	pop	{r4, r5, r6, pc}
 8009d28:	ab01      	add	r3, sp, #4
 8009d2a:	466a      	mov	r2, sp
 8009d2c:	f7ff ffc8 	bl	8009cc0 <__swhatbuf_r>
 8009d30:	9900      	ldr	r1, [sp, #0]
 8009d32:	4605      	mov	r5, r0
 8009d34:	4630      	mov	r0, r6
 8009d36:	f7ff fbbb 	bl	80094b0 <_malloc_r>
 8009d3a:	b948      	cbnz	r0, 8009d50 <__smakebuf_r+0x44>
 8009d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d40:	059a      	lsls	r2, r3, #22
 8009d42:	d4ef      	bmi.n	8009d24 <__smakebuf_r+0x18>
 8009d44:	f023 0303 	bic.w	r3, r3, #3
 8009d48:	f043 0302 	orr.w	r3, r3, #2
 8009d4c:	81a3      	strh	r3, [r4, #12]
 8009d4e:	e7e3      	b.n	8009d18 <__smakebuf_r+0xc>
 8009d50:	89a3      	ldrh	r3, [r4, #12]
 8009d52:	6020      	str	r0, [r4, #0]
 8009d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d58:	81a3      	strh	r3, [r4, #12]
 8009d5a:	9b00      	ldr	r3, [sp, #0]
 8009d5c:	6163      	str	r3, [r4, #20]
 8009d5e:	9b01      	ldr	r3, [sp, #4]
 8009d60:	6120      	str	r0, [r4, #16]
 8009d62:	b15b      	cbz	r3, 8009d7c <__smakebuf_r+0x70>
 8009d64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d68:	4630      	mov	r0, r6
 8009d6a:	f000 f81d 	bl	8009da8 <_isatty_r>
 8009d6e:	b128      	cbz	r0, 8009d7c <__smakebuf_r+0x70>
 8009d70:	89a3      	ldrh	r3, [r4, #12]
 8009d72:	f023 0303 	bic.w	r3, r3, #3
 8009d76:	f043 0301 	orr.w	r3, r3, #1
 8009d7a:	81a3      	strh	r3, [r4, #12]
 8009d7c:	89a3      	ldrh	r3, [r4, #12]
 8009d7e:	431d      	orrs	r5, r3
 8009d80:	81a5      	strh	r5, [r4, #12]
 8009d82:	e7cf      	b.n	8009d24 <__smakebuf_r+0x18>

08009d84 <_fstat_r>:
 8009d84:	b538      	push	{r3, r4, r5, lr}
 8009d86:	4d07      	ldr	r5, [pc, #28]	; (8009da4 <_fstat_r+0x20>)
 8009d88:	2300      	movs	r3, #0
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	4608      	mov	r0, r1
 8009d8e:	4611      	mov	r1, r2
 8009d90:	602b      	str	r3, [r5, #0]
 8009d92:	f7f7 f8a6 	bl	8000ee2 <_fstat>
 8009d96:	1c43      	adds	r3, r0, #1
 8009d98:	d102      	bne.n	8009da0 <_fstat_r+0x1c>
 8009d9a:	682b      	ldr	r3, [r5, #0]
 8009d9c:	b103      	cbz	r3, 8009da0 <_fstat_r+0x1c>
 8009d9e:	6023      	str	r3, [r4, #0]
 8009da0:	bd38      	pop	{r3, r4, r5, pc}
 8009da2:	bf00      	nop
 8009da4:	20000b78 	.word	0x20000b78

08009da8 <_isatty_r>:
 8009da8:	b538      	push	{r3, r4, r5, lr}
 8009daa:	4d06      	ldr	r5, [pc, #24]	; (8009dc4 <_isatty_r+0x1c>)
 8009dac:	2300      	movs	r3, #0
 8009dae:	4604      	mov	r4, r0
 8009db0:	4608      	mov	r0, r1
 8009db2:	602b      	str	r3, [r5, #0]
 8009db4:	f7f7 f8a5 	bl	8000f02 <_isatty>
 8009db8:	1c43      	adds	r3, r0, #1
 8009dba:	d102      	bne.n	8009dc2 <_isatty_r+0x1a>
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	b103      	cbz	r3, 8009dc2 <_isatty_r+0x1a>
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	bd38      	pop	{r3, r4, r5, pc}
 8009dc4:	20000b78 	.word	0x20000b78

08009dc8 <_init>:
 8009dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dca:	bf00      	nop
 8009dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dce:	bc08      	pop	{r3}
 8009dd0:	469e      	mov	lr, r3
 8009dd2:	4770      	bx	lr

08009dd4 <_fini>:
 8009dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd6:	bf00      	nop
 8009dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dda:	bc08      	pop	{r3}
 8009ddc:	469e      	mov	lr, r3
 8009dde:	4770      	bx	lr
